(()=>{var __webpack_modules__={96:module=>{"use strict";eval("\n\n// FNV_PRIMES and FNV_OFFSETS from\n// http://www.isthe.com/chongo/tech/comp/fnv/index.html#FNV-param\n\nconst FNV_PRIMES = {\n\t32: 16777619n,\n\t64: 1099511628211n,\n\t128: 309485009821345068724781371n,\n\t256: 374144419156711147060143317175368453031918731002211n,\n\t512: 35835915874844867368919076489095108449946327955754392558399825615420669938882575126094039892345713852759n,\n\t1024: 5016456510113118655434598811035278955030765345404790744303017523831112055108147451509157692220295382716162651878526895249385292291816524375083746691371804094271873160484737966720260389217684476157468082573n\n};\n\nconst FNV_OFFSETS = {\n\t32: 2166136261n,\n\t64: 14695981039346656037n,\n\t128: 144066263297769815596495629667062367629n,\n\t256: 100029257958052580907070968620625704837092796014241193945225284501741471925557n,\n\t512: 9659303129496669498009435400716310466090418745672637896108374329434462657994582932197716438449813051892206539805784495328239340083876191928701583869517785n,\n\t1024: 14197795064947621068722070641403218320880622795441933960878474914617582723252296732303717722150864096521202355549365628174669108571814760471015076148029755969804077320157692458563003215304957150157403644460363550505412711285966361610267868082893823963790439336411086884584107735010676915n\n};\n\n// Legacy implementation for 32-bit + number types\nfunction fnv1a(string) {\n\t// Handle Unicode code points > 0x7f\n\tlet hash = Number(FNV_OFFSETS[32]);\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= characterCode;\n\t\thash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n\t}\n\n\treturn hash >>> 0;\n}\n\nfunction bigInt(string, {size = 32} = {}) {\n\tif (!FNV_PRIMES[size]) {\n\t\tthrow new Error('The `size` option must be one of 32, 64, 128, 256, 512, or 1024');\n\t}\n\n\tlet hash = FNV_OFFSETS[size];\n\tconst fnvPrime = FNV_PRIMES[size];\n\n\t// Handle Unicode code points > 0x7f\n\tlet isUnicoded = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlet characterCode = string.charCodeAt(i);\n\n\t\t// Non-ASCII characters trigger the Unicode escape logic\n\t\tif (characterCode > 0x7F && !isUnicoded) {\n\t\t\tstring = unescape(encodeURIComponent(string));\n\t\t\tcharacterCode = string.charCodeAt(i);\n\t\t\tisUnicoded = true;\n\t\t}\n\n\t\thash ^= BigInt(characterCode);\n\t\thash = BigInt.asUintN(size, hash * fnvPrime);\n\t}\n\n\treturn hash;\n}\n\nmodule.exports = fnv1a;\nmodule.exports.bigInt = bigInt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsbUJBQW1CO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5QkFBeUIsV0FBVyxJQUFJO0FBQ3hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL0BzaW5kcmVzb3JodXMvZm52MWEvaW5kZXguanM/ZDY0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIEZOVl9QUklNRVMgYW5kIEZOVl9PRkZTRVRTIGZyb21cbi8vIGh0dHA6Ly93d3cuaXN0aGUuY29tL2Nob25nby90ZWNoL2NvbXAvZm52L2luZGV4Lmh0bWwjRk5WLXBhcmFtXG5cbmNvbnN0IEZOVl9QUklNRVMgPSB7XG5cdDMyOiAxNjc3NzYxOW4sXG5cdDY0OiAxMDk5NTExNjI4MjExbixcblx0MTI4OiAzMDk0ODUwMDk4MjEzNDUwNjg3MjQ3ODEzNzFuLFxuXHQyNTY6IDM3NDE0NDQxOTE1NjcxMTE0NzA2MDE0MzMxNzE3NTM2ODQ1MzAzMTkxODczMTAwMjIxMW4sXG5cdDUxMjogMzU4MzU5MTU4NzQ4NDQ4NjczNjg5MTkwNzY0ODkwOTUxMDg0NDk5NDYzMjc5NTU3NTQzOTI1NTgzOTk4MjU2MTU0MjA2Njk5Mzg4ODI1NzUxMjYwOTQwMzk4OTIzNDU3MTM4NTI3NTluLFxuXHQxMDI0OiA1MDE2NDU2NTEwMTEzMTE4NjU1NDM0NTk4ODExMDM1Mjc4OTU1MDMwNzY1MzQ1NDA0NzkwNzQ0MzAzMDE3NTIzODMxMTEyMDU1MTA4MTQ3NDUxNTA5MTU3NjkyMjIwMjk1MzgyNzE2MTYyNjUxODc4NTI2ODk1MjQ5Mzg1MjkyMjkxODE2NTI0Mzc1MDgzNzQ2NjkxMzcxODA0MDk0MjcxODczMTYwNDg0NzM3OTY2NzIwMjYwMzg5MjE3Njg0NDc2MTU3NDY4MDgyNTczblxufTtcblxuY29uc3QgRk5WX09GRlNFVFMgPSB7XG5cdDMyOiAyMTY2MTM2MjYxbixcblx0NjQ6IDE0Njk1OTgxMDM5MzQ2NjU2MDM3bixcblx0MTI4OiAxNDQwNjYyNjMyOTc3Njk4MTU1OTY0OTU2Mjk2NjcwNjIzNjc2MjluLFxuXHQyNTY6IDEwMDAyOTI1Nzk1ODA1MjU4MDkwNzA3MDk2ODYyMDYyNTcwNDgzNzA5Mjc5NjAxNDI0MTE5Mzk0NTIyNTI4NDUwMTc0MTQ3MTkyNTU1N24sXG5cdDUxMjogOTY1OTMwMzEyOTQ5NjY2OTQ5ODAwOTQzNTQwMDcxNjMxMDQ2NjA5MDQxODc0NTY3MjYzNzg5NjEwODM3NDMyOTQzNDQ2MjY1Nzk5NDU4MjkzMjE5NzcxNjQzODQ0OTgxMzA1MTg5MjIwNjUzOTgwNTc4NDQ5NTMyODIzOTM0MDA4Mzg3NjE5MTkyODcwMTU4Mzg2OTUxNzc4NW4sXG5cdDEwMjQ6IDE0MTk3Nzk1MDY0OTQ3NjIxMDY4NzIyMDcwNjQxNDAzMjE4MzIwODgwNjIyNzk1NDQxOTMzOTYwODc4NDc0OTE0NjE3NTgyNzIzMjUyMjk2NzMyMzAzNzE3NzIyMTUwODY0MDk2NTIxMjAyMzU1NTQ5MzY1NjI4MTc0NjY5MTA4NTcxODE0NzYwNDcxMDE1MDc2MTQ4MDI5NzU1OTY5ODA0MDc3MzIwMTU3NjkyNDU4NTYzMDAzMjE1MzA0OTU3MTUwMTU3NDAzNjQ0NDYwMzYzNTUwNTA1NDEyNzExMjg1OTY2MzYxNjEwMjY3ODY4MDgyODkzODIzOTYzNzkwNDM5MzM2NDExMDg2ODg0NTg0MTA3NzM1MDEwNjc2OTE1blxufTtcblxuLy8gTGVnYWN5IGltcGxlbWVudGF0aW9uIGZvciAzMi1iaXQgKyBudW1iZXIgdHlwZXNcbmZ1bmN0aW9uIGZudjFhKHN0cmluZykge1xuXHQvLyBIYW5kbGUgVW5pY29kZSBjb2RlIHBvaW50cyA+IDB4N2Zcblx0bGV0IGhhc2ggPSBOdW1iZXIoRk5WX09GRlNFVFNbMzJdKTtcblx0bGV0IGlzVW5pY29kZWQgPSBmYWxzZTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuXHRcdGxldCBjaGFyYWN0ZXJDb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cblx0XHQvLyBOb24tQVNDSUkgY2hhcmFjdGVycyB0cmlnZ2VyIHRoZSBVbmljb2RlIGVzY2FwZSBsb2dpY1xuXHRcdGlmIChjaGFyYWN0ZXJDb2RlID4gMHg3RiAmJiAhaXNVbmljb2RlZCkge1xuXHRcdFx0c3RyaW5nID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykpO1xuXHRcdFx0Y2hhcmFjdGVyQ29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aXNVbmljb2RlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aGFzaCBePSBjaGFyYWN0ZXJDb2RlO1xuXHRcdGhhc2ggKz0gKGhhc2ggPDwgMSkgKyAoaGFzaCA8PCA0KSArIChoYXNoIDw8IDcpICsgKGhhc2ggPDwgOCkgKyAoaGFzaCA8PCAyNCk7XG5cdH1cblxuXHRyZXR1cm4gaGFzaCA+Pj4gMDtcbn1cblxuZnVuY3Rpb24gYmlnSW50KHN0cmluZywge3NpemUgPSAzMn0gPSB7fSkge1xuXHRpZiAoIUZOVl9QUklNRVNbc2l6ZV0pIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgc2l6ZWAgb3B0aW9uIG11c3QgYmUgb25lIG9mIDMyLCA2NCwgMTI4LCAyNTYsIDUxMiwgb3IgMTAyNCcpO1xuXHR9XG5cblx0bGV0IGhhc2ggPSBGTlZfT0ZGU0VUU1tzaXplXTtcblx0Y29uc3QgZm52UHJpbWUgPSBGTlZfUFJJTUVTW3NpemVdO1xuXG5cdC8vIEhhbmRsZSBVbmljb2RlIGNvZGUgcG9pbnRzID4gMHg3ZlxuXHRsZXQgaXNVbmljb2RlZCA9IGZhbHNlO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG5cdFx0bGV0IGNoYXJhY3RlckNvZGUgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuXHRcdC8vIE5vbi1BU0NJSSBjaGFyYWN0ZXJzIHRyaWdnZXIgdGhlIFVuaWNvZGUgZXNjYXBlIGxvZ2ljXG5cdFx0aWYgKGNoYXJhY3RlckNvZGUgPiAweDdGICYmICFpc1VuaWNvZGVkKSB7XG5cdFx0XHRzdHJpbmcgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKSk7XG5cdFx0XHRjaGFyYWN0ZXJDb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRpc1VuaWNvZGVkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRoYXNoIF49IEJpZ0ludChjaGFyYWN0ZXJDb2RlKTtcblx0XHRoYXNoID0gQmlnSW50LmFzVWludE4oc2l6ZSwgaGFzaCAqIGZudlByaW1lKTtcblx0fVxuXG5cdHJldHVybiBoYXNoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZudjFhO1xubW9kdWxlLmV4cG9ydHMuYmlnSW50ID0gYmlnSW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n")},622:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(294);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(935);\n// EXTERNAL MODULE: ./node_modules/react-is/index.js\nvar react_is = __webpack_require__(864);\n// EXTERNAL MODULE: ./node_modules/shallowequal/index.js\nvar shallowequal = __webpack_require__(774);\nvar shallowequal_default = /*#__PURE__*/__webpack_require__.n(shallowequal);\n;// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js\nfunction stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = \'\', p = \'\', F = \'\', G = \'\', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, \'\')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, \'\').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, \'\'));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(\'\'), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = \'\'));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + \'{\' + k + \'}\';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, \'$1 $2\');\n                    k = f + \'{\' + k + \'}\';\n                    k = 1 === w || 2 === w && L(\'@\' + k, 3) ? \'@-webkit-\' + k + \'@\' + k : \'@\' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, \'\'));\n                } else k = \'\';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = \'\';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, \'\') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(\' \', \':\')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = \'\\x00\\x00\'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = \'\';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += \'\\x00\');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = \'\';\n                  break;\n\n                default:\n                  32 !== g && (y = \' \');\n              }\n              break;\n\n            case 0:\n              y = \'\\\\0\';\n              break;\n\n            case 12:\n              y = \'\\\\f\';\n              break;\n\n            case 11:\n              y = \'\\\\v\';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = \'\\f\' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += \'\\r\');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = \'\', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(\',\') + \'{\' + p + \'}\';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, \':-moz-$1\') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, \'::-webkit-input-$1\') + p.replace(Q, \'::-moz-$1\') + p.replace(Q, \':-ms-input-$1\') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? \'\' : d[0] + \' \'; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + \' \', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, \'$1\' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, \'$1\' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf(\'\\f\')) return c.replace(F, (58 === d.charCodeAt(0) ? \'\' : \'$1\') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + \';\',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(\':\', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + \';\';\n      return 1 === w || 2 === w && L(b, 1) ? \'-webkit-\' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? \'-webkit-\' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? \'-webkit-\' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? \'-webkit-\' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return \'-webkit-\' + a + a;\n\n      case 978:\n        return \'-webkit-\' + a + \'-moz-\' + a + a;\n\n      case 1019:\n      case 983:\n        return \'-webkit-\' + a + \'-moz-\' + a + \'-ms-\' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return \'-webkit-\' + a + a;\n        if (0 < a.indexOf(\'image-set(\', 11)) return a.replace(ja, \'$1-webkit-$2\') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return \'-webkit-box-\' + a.replace(\'-grow\', \'\') + \'-webkit-\' + a + \'-ms-\' + a.replace(\'grow\', \'positive\') + a;\n\n          case 115:\n            return \'-webkit-\' + a + \'-ms-\' + a.replace(\'shrink\', \'negative\') + a;\n\n          case 98:\n            return \'-webkit-\' + a + \'-ms-\' + a.replace(\'basis\', \'preferred-size\') + a;\n        }\n        return \'-webkit-\' + a + \'-ms-\' + a + a;\n\n      case 964:\n        return \'-webkit-\' + a + \'-ms-flex-\' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(\':\', 15)).replace(\'flex-\', \'\').replace(\'space-between\', \'justify\');\n        return \'-webkit-box-pack\' + b + \'-webkit-\' + a + \'-ms-flex-pack\' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, \':-webkit-\') + a.replace(aa, \':-moz-\') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf(\'-\') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, \'tb\');\n            break;\n\n          case 232:\n            b = a.replace(G, \'tb-rl\');\n            break;\n\n          case 220:\n            b = a.replace(G, \'lr\');\n            break;\n\n          default:\n            return a;\n        }\n\n        return \'-webkit-\' + a + \'-ms-\' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf(\'sticky\', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(\':\', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, \'-webkit-\' + b) + \';\' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, \'-webkit-\' + (102 < m ? \'inline-\' : \'\') + \'box\') + \';\' + a.replace(b, \'-webkit-\' + b) + \';\' + a.replace(b, \'-ms-\' + b + \'box\') + \';\' + a;\n        }\n\n        return a + \';\';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace(\'-items\', \'\'), \'-webkit-\' + a + \'-webkit-box-\' + b + \'-ms-flex-\' + b + a;\n\n          case 115:\n            return \'-webkit-\' + a + \'-ms-flex-item-\' + a.replace(ba, \'\') + a;\n\n          default:\n            return \'-webkit-\' + a + \'-ms-flex-line-pack\' + a.replace(\'align-content\', \'\').replace(ba, \'\') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(\':\') + 1)).charCodeAt(0) ? P(d.replace(\'stretch\', \'fill-available\'), c, e, h).replace(\':fill-available\', \':stretch\') : a.replace(b, \'-webkit-\' + b) + a.replace(b, \'-moz-\' + b.replace(\'fill-\', \'\')) + a;\n        break;\n\n      case 962:\n        if (a = \'-webkit-\' + a + (102 === a.charCodeAt(5) ? \'-ms-\' + a : \'\') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf(\'transform\', 10)) return a.substring(0, a.indexOf(\';\', 27) + 1).replace(ma, \'$1-webkit-$2\') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? \':\' : \'{\'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, \'$1\'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + \';\' ? e.replace(oa, \' or ($1)\').substring(4) : \'(\' + c + \')\';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if (\'function\' === typeof d) S[A++] = d;else if (\'object\' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? \'function\' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && \'string\' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = \'\';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = \'\';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\n/* harmony default export */ const stylis_browser_esm = (stylis_min);\n\n;// CONCATENATED MODULE: ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js\nvar unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\n/* harmony default export */ const unitless_browser_esm = (unitlessKeys);\n\n;// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/memoize.browser.esm.js\nfunction memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\n/* harmony default export */ const memoize_browser_esm = (memoize);\n\n;// CONCATENATED MODULE: ./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js\n\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = memoize_browser_esm(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\n/* harmony default export */ const is_prop_valid_browser_esm = (index);\n\n// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(679);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n;// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js\nfunction v(){return(v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var g=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!(0,react_is.typeOf)(t)},w=Object.freeze([]),E=Object.freeze({});function b(e){return"function"==typeof e}function _(e){return false||e.displayName||e.name||"Component"}function N(e){return e&&"string"==typeof e.styledComponentId}var A="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",C="5.3.3",I="undefined"!=typeof window&&"HTMLElement"in window,P=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!=="production"),O={},R= false?0:{};function D(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t)})),e}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw true?new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):"")):0}var T=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\\n";return t},e}(),x=new Map,k=new Map,V=1,B=function(e){if(x.has(e))return x.get(e);for(;k.has(V);)V++;var t=V++;return false&&0,x.set(e,t),k.set(t,e),t},z=function(e){return k.get(e)},M=function(e,t){t>=V&&(V=t+1),x.set(e,t),k.set(t,e)},G="style["+A+\'][data-styled-version="5.3.3"]\',L=new RegExp("^"+A+\'\\\\.g(\\\\d+)\\\\[id="([\\\\w\\\\d-]+)"\\\\].*?"([^"]*)\'),F=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r)},Y=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(L);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(M(u,c),F(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0}else r.push(i)}}},q=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A,"active"),r.setAttribute("data-styled-version","5.3.3");var i=q();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W=function(){function e(e){var t=this.element=H(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I,X={isServer:!I,useCSSOMInjection:!P},Z=function(){function e(e,t,n){void 0===e&&(e=E),void 0===t&&(t={}),this.options=v({},X,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&I&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(G),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A)&&(Y(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return B(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U(o):r?new $(o):new W(o),new T(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(B(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=z(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=A+".g"+o+\'[id="\'+s+\'"]\',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",")})),r+=""+a+c+\'{content:"\'+u+\'"}/*!sc*/\\n\'}}}return r}(this)},e}(),K=/(a)(d)/gi,Q=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q(t%52)+n;return(Q(t%52)+n).replace(K,"$1-$2")}var te=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne=function(e){return te(5381,e)};function re(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b(n)&&!N(n))return!1}return!0}var oe=ne("5.3.3"),se=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic= true&&(void 0===n||n.isStatic)&&re(e),this.componentId=t,this.baseHash=te(oe,t),this.baseStyle=n,Z.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var s=Ne(this.rules,e,t,n).join(""),i=ee(te(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a)}o.push(i),this.staticRulesId=i}else{for(var c=this.rules.length,u=te(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h, false&&(0);else if(h){var p=Ne(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te(u,f+d),l+=f}}if(l){var m=ee(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y)}o.push(m)}}return o.join(" ")},e}(),ie=/^\\s*\\/\\/.*$/gm,ae=[":","[",".","#"];function ce(e){var t,n,r,o,s=void 0===e?E:e,i=s.options,a=void 0===i?E:i,c=s.plugins,u=void 0===c?w:c,l=new stylis_browser_esm(a),d=[],h=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){d.push(e)})),f=function(e,r,s){return 0===r&&-1!==ae.indexOf(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\\\"+n+"\\\\b","g"),o=new RegExp("(\\\\"+n+"\\\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f))},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j(15),te(e,t.name)}),5381).toString():"",m}var ue=react.createContext(),le=ue.Consumer,de=react.createContext(),he=(de.Consumer,new Z),pe=ce();function fe(){return (0,react.useContext)(ue)||he}function me(){return (0,react.useContext)(de)||pe}function ye(e){var t=(0,react.useState)(e.stylisPlugins),n=t[0],s=t[1],c=fe(),u=(0,react.useMemo)((function(){var t=c;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,react.useMemo)((function(){return ce({options:{prefix:!e.disableVendorPrefixes},plugins:n})}),[e.disableVendorPrefixes,n]);return (0,react.useEffect)((function(){shallowequal_default()(n,e.stylisPlugins)||s(e.stylisPlugins)}),[e.stylisPlugins]),react.createElement(ue.Provider,{value:u},react.createElement(de.Provider,{value:l}, false?0:e.children))}var ve=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return j(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=pe),this.name+e.hash},e}(),ge=/([A-Z])/,Se=/([A-Z])/g,we=/^ms-/,Ee=function(e){return"-"+e.toLowerCase()};function be(e){return ge.test(e)?e.replace(Se,Ee).replace(we,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return"";if(N(e))return"."+e.styledComponentId;if(b(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return false&&0,Ne(u,n,r,o)}var l;return e instanceof ve?r?(e.inject(r,o),e.getName(o)):e:S(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(Array.isArray(t[i])&&t[i].isCss||b(t[i])?s.push(be(i)+":",t[i],";"):S(t[i])?s.push.apply(s,e(t[i],i)):s.push(be(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in unitless_browser_esm?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var Ae=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ce(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b(e)||S(e)?Ae(Ne(g(w,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ae(Ne(g(e,n)))}var Ie=/invalid hook call/i,Pe=new Set,Oe=function(e,t){if(false){ var o, n, r; }},Re=function(e,t,n){return void 0===n&&(n=E),e.theme!==n.theme&&e.theme||t||n.theme},De=/[!"#$%&\'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g,je=/(^-|-$)/g;function Te(e){return e.replace(De,"-").replace(je,"")}var xe=function(e){return ee(ne(e)>>>0)};function ke(e){return"string"==typeof e&&( true||0)}var Ve=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Be=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ze(e,t,n){var r=e[n];Ve(t)&&Ve(r)?Me(r,t):e[n]=t}function Me(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ve(i))for(var a in i)Be(a)&&ze(e,i[a],a)}return e}var Ge=react.createContext(),Le=Ge.Consumer;function Fe(e){var t=s(Ge),n=i((function(){return function(e,t){if(!e)return j(14);if(b(e)){var n=e(t);return true?n:0}return Array.isArray(e)||"object"!=typeof e?j(8):t?v({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?r.createElement(Ge.Provider,{value:n},e.children):null}var Ye={};function qe(e,t,n){var o=N(e),i=!ke(e),a=t.attrs,c=void 0===a?w:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":Te(e);Ye[n]=(Ye[n]||0)+1;var r=n+"-"+xe("5.3.3"+n+Ye[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke(e)?"styled."+e:"Styled("+_(e)+")"}(e):p,g=t.displayName&&t.componentId?Te(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new se(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target; false&&0;var f=function(e,t,n){void 0===e&&(e=E);var r=v({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t]})),[r,o]}(Re(t,(0,react.useContext)(Ge),a)||E,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe(),s=me(),i=t?e.generateAndInjectStyles(E,o,s):e.generateAndInjectStyles(n,o,s);return false&&0, false&&0,i}(i,r,y, false?0:void 0),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke(_),A=g!==t?v({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,is_prop_valid_browser_esm,_):!N||is_prop_valid_browser_esm(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,(0,react.createElement)(_,C)}(C,e,t,P)};return O.displayName=f,(C=react.forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke(e)?e:Te(_(e)));return qe(e,v({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me({},e.defaultProps,t):t}}), false&&(0),C.toString=function(){return"."+C.styledComponentId},i&&hoist_non_react_statics_cjs_default()(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var He=function(e){return function e(t,r,o){if(void 0===o&&(o=E),!(0,react_is.isValidElementType)(r))return j(1,String(r));var s=function(){return t(r,o,Ce.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v({},o,{},n))},s.attrs=function(n){return e(t,r,v({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(qe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He[e]=He(e)}));var $e=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=re(e),Z.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Ne(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&Z.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();function We(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];var i=Ce.apply(void 0,[e].concat(n)),a="sc-global-"+xe(JSON.stringify(i)),u=new $e(i,a);function l(e){var t=fe(),n=me(),o=s(Ge),l=c(t.allocateGSInstance(a)).current;return false&&0, false&&0,t.server&&h(l,e,t,o,n),d((function(){if(!t.server)return h(l,e,t,o,n),function(){return u.removeStyles(l,t)}}),[l,e,t,o,n]),null}function h(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,O,n,o);else{var s=v({},t,{theme:Re(t,r,l.defaultProps)});u.renderStyles(e,s,n,o)}}return false&&0,r.memo(l)}function Ue(e){ false&&0;for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ce.apply(void 0,[e].concat(n)).join(""),s=xe(o);return new ve(s,o)}var Je=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=q();return"<style "+[n&&\'nonce="\'+n+\'"\',A+\'="true"\',\'data-styled-version="5.3.3"\'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?j(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return j(2);var n=((t={})[A]="",t["data-styled-version"]="5.3.3",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=q();return o&&(n.nonce=o),[react.createElement("style",v({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new Z({isServer:!0}),this.sealed=!1}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?j(2):react.createElement(ye,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return j(3)},e}(),Xe=function(e){var t=r.forwardRef((function(t,n){var o=s(Ge),i=e.defaultProps,a=Re(t,o,i);return false&&0,r.createElement(e,v({},t,{theme:a,ref:n}))}));return y(t,e),t.displayName="WithTheme("+_(e)+")",t},Ze=function(){return s(Ge)},Ke={StyleSheet:Z,masterSheet:he}; false&&0, false&&(0);/* harmony default export */ const styled_components_browser_esm = (He);\n//# sourceMappingURL=styled-components.browser.esm.js.map\n\n;// CONCATENATED MODULE: ./src/components/ScorerSelector.js\n\n\nconst SearchWidgetContainer = styled_components_browser_esm.div.withConfig({\n  displayName: "ScorerSelector__SearchWidgetContainer",\n  componentId: "sc-15tzb7j-0"\n})(["vertical-align:top;display:inline-block;position:relative;& ~ &{margin-left:30px;}"]);\nconst Scorer = styled_components_browser_esm.div.withConfig({\n  displayName: "ScorerSelector__Scorer",\n  componentId: "sc-15tzb7j-1"\n})(["width:516px;"]);\nconst Selector = styled_components_browser_esm.div.withConfig({\n  displayName: "ScorerSelector__Selector",\n  componentId: "sc-15tzb7j-2"\n})(["height:1.5em;"]);\nconst Label = styled_components_browser_esm.label.withConfig({\n  displayName: "ScorerSelector__Label",\n  componentId: "sc-15tzb7j-3"\n})(["font-weight:bold;margin-right:.5em;color:#666;"]);\nfunction ScorerSelector({\n  scorers,\n  onChange,\n  onKbdClick\n}) {\n  const [selectedIndex, setSelectedIndex] = (0,react.useState)(0);\n  const items = scorers.map(({\n    name\n  }, i) => /*#__PURE__*/react.createElement("option", {\n    key: i,\n    value: i\n  }, name));\n  const [leftDescription, rightDescription] = scorers[selectedIndex].description;\n\n  const handleChange = event => {\n    const newSelectedIndex = +event.target.value;\n    onChange(scorers[newSelectedIndex]);\n    setSelectedIndex(newSelectedIndex);\n  };\n\n  return /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(SearchWidgetContainer, null, /*#__PURE__*/react.createElement(Scorer, null, /*#__PURE__*/react.createElement(Selector, null, /*#__PURE__*/react.createElement(Label, null, "Scorer:"), "QuickScore"), /*#__PURE__*/react.createElement("div", {\n    onClick: onKbdClick\n  }, leftDescription))), /*#__PURE__*/react.createElement(SearchWidgetContainer, null, /*#__PURE__*/react.createElement(Scorer, null, /*#__PURE__*/react.createElement(Selector, null, /*#__PURE__*/react.createElement(Label, {\n    htmlFor: "menu"\n  }, "Scorer:"), /*#__PURE__*/react.createElement("select", {\n    id: "menu",\n    onChange: handleChange\n  }, items)), /*#__PURE__*/react.createElement("div", {\n    onClick: onKbdClick\n  }, rightDescription))));\n}\n;// CONCATENATED MODULE: ./src/components/SearchBox.js\nconst _excluded = ["query", "scorerName"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nconst StyledInput = styled_components_browser_esm.input.withConfig({\n  displayName: "SearchBox__StyledInput",\n  componentId: "sc-ozt4ii-0"\n})(["font-weight:bold;width:500px;height:25px;margin:0 0 .5em 0;border:none;border-bottom:1px solid #ddd;padding:2px 2px 5px 28px;outline:none;&::placeholder{font-weight:normal;font-style:italic;}"]);\n/* harmony default export */ const SearchBox = (/*#__PURE__*/(0,react.forwardRef)(function SearchBox(_ref, ref) {\n  let {\n    query = "",\n    scorerName\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  const inputRef = (0,react.useRef)(null);\n  (0,react.useImperativeHandle)(ref, () => ({\n    focus() {\n      inputRef.current.focus();\n    }\n\n  }));\n  return /*#__PURE__*/react.createElement(StyledInput, _extends({\n    type: "search",\n    ref: inputRef,\n    tabIndex: "0",\n    placeholder: `Search for a title or URL using ${scorerName}`,\n    spellCheck: false,\n    value: query\n  }, props));\n}));\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_extends.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nfunction _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, _typeof(obj);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === "object" || typeof call === "function")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError("Derived constructors may only return object or undefined");\n  }\n\n  return _assertThisInitialized(self);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, "prototype", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n;// CONCATENATED MODULE: ./node_modules/clsx/dist/clsx.m.js\nfunction toVal(mix) {\n\tvar k, y, str=\'\';\n\n\tif (typeof mix === \'string\' || typeof mix === \'number\') {\n\t\tstr += mix;\n\t} else if (typeof mix === \'object\') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += \' \');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += \' \');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/* harmony default export */ function clsx_m() {\n\tvar i=0, tmp, x, str=\'\';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += \' \');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js\n/**\n * Helper method that determines when to recalculate row or column metadata.\n */\nfunction calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don\'t compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === \'number\' || typeof nextCellSize === \'number\') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\n\nfunction objectWithoutProperties_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/types.js\n\n\nvar bpfrpt_proptype_CellPosition =  true ? null : 0;\nvar bpfrpt_proptype_CellRendererParams =  true ? null : 0;\nvar bpfrpt_proptype_CellRenderer =  true ? null : 0;\nvar bpfrpt_proptype_CellCache =  true ? null : 0;\nvar bpfrpt_proptype_StyleCache =  true ? null : 0;\nvar bpfrpt_proptype_CellRangeRendererParams =  true ? null : 0;\nvar bpfrpt_proptype_CellRangeRenderer =  true ? null : 0;\nvar bpfrpt_proptype_CellSizeGetter =  true ? null : 0;\nvar bpfrpt_proptype_CellSize =  true ? null : 0;\nvar bpfrpt_proptype_NoContentRenderer =  true ? null : 0;\nvar bpfrpt_proptype_Scroll =  true ? null : 0;\nvar bpfrpt_proptype_ScrollbarPresenceChange =  true ? null : 0;\nvar bpfrpt_proptype_RenderedSection =  true ? null : 0;\nvar bpfrpt_proptype_OverscanIndicesGetterParams =  true ? null : 0;\nvar bpfrpt_proptype_OverscanIndices =  true ? null : 0;\nvar bpfrpt_proptype_OverscanIndicesGetter =  true ? null : 0;\nvar bpfrpt_proptype_Alignment =  true ? null : 0;\nvar bpfrpt_proptype_VisibleCellRange =  true ? null : 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/utils/CellSizeAndPositionManager.js\n\n\n\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n\n    _classCallCheck(this, CellSizeAndPositionManager);\n\n    _defineProperty(this, "_cellSizeAndPositionData", {});\n\n    _defineProperty(this, "_lastMeasuredIndex", -1);\n\n    _defineProperty(this, "_lastBatchedIndex", -1);\n\n    _defineProperty(this, "_cellCount", void 0);\n\n    _defineProperty(this, "_cellSizeGetter", void 0);\n\n    _defineProperty(this, "_estimatedCellSize", void 0);\n\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  _createClass(CellSizeAndPositionManager, [{\n    key: "areOffsetsAdjusted",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: "configure",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: "getCellCount",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: "getEstimatedCellSize",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: "getLastMeasuredIndex",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: "getOffsetAdjustment",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: "getSizeAndPositionOfCell",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error("Requested index ".concat(index, " is outside of range 0..").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we\'re using CellMeasurer and haven\'t yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error("Invalid size returned for cell ".concat(i, " of value ").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: "getSizeAndPositionOfLastMeasuredCell",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: "getTotalSize",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container\'s current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: "getUpdatedOffsetForIndex",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? \'auto\' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case \'start\':\n          idealOffset = maxOffset;\n          break;\n\n        case \'end\':\n          idealOffset = minOffset;\n          break;\n\n        case \'center\':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: "getVisibleCellRange",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they\'ll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: "resetCell",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: "_binarySearch",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: "_exponentialSearch",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: "_findNearestCell",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error("Invalid offset ".concat(offset, " specified"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we\'ve already measured cells within this range just use a binary search as it\'s faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven\'t yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n\n  return CellSizeAndPositionManager;\n}();\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/utils/maxElementSize.js\nvar DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== \'undefined\';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nvar getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js\n\n\n\n\n\n\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser\'s native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = objectWithoutProperties_objectWithoutProperties(_ref, ["maxScrollSize"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, "_cellSizeAndPositionManager", void 0);\n\n    _defineProperty(this, "_maxScrollSize", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: "areOffsetsAdjusted",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: "configure",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: "getCellCount",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: "getEstimatedCellSize",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: "getLastMeasuredIndex",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: "getOffsetAdjustment",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: "getSizeAndPositionOfCell",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: "getSizeAndPositionOfLastMeasuredCell",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: "getTotalSize",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: "getUpdatedOffsetForIndex",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? \'auto\' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: "getVisibleCellRange",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: "resetCell",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: "_getOffsetPercentage",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: "_offsetToSafeOffset",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: "_safeOffsetToOffset",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/utils/createCallbackMemoizer.js\n/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nfunction createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n    var keys = Object.keys(indices);\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(\',\') !== value.join(\',\') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/defaultOverscanIndicesGetter.js\nvar SCROLL_DIRECTION_BACKWARD = -1;\nvar SCROLL_DIRECTION_FORWARD = 1;\nvar SCROLL_DIRECTION_HORIZONTAL = \'horizontal\';\nvar SCROLL_DIRECTION_VERTICAL = \'vertical\';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn\'t exceed the available cells.\n */\n\nfunction defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js\n\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn\'t past the last column/row of cells.\n */\n\nfunction updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === \'number\' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don\'t have a selected item but list size or number of children have decreased,\n    // Make sure we aren\'t scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection\'s range.\n    // To do this, we don\'t need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we\'re still okay.\n    // Only adjust the scroll position if we\'ve scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/defaultCellRangeRenderer.js\n/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nfunction defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = "".concat(rowIndex, "-").concat(columnIndex);\n      var style = void 0; // Cache style objects so shallow-compare doesn\'t re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don\'t interfere with CellMeasurer\'s measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of \'auto\' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: \'auto\',\n            left: 0,\n            position: \'absolute\',\n            top: 0,\n            width: \'auto\'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: \'absolute\',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don\'t cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (false) {}\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (false) {}\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/canUseDOM.js\n/* harmony default export */ const canUseDOM = (!!(typeof window !== \'undefined\' && window.document && window.document.createElement));\n;// CONCATENATED MODULE: ./node_modules/dom-helpers/esm/scrollbarSize.js\n\nvar size;\nfunction scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement(\'div\');\n      scrollDiv.style.position = \'absolute\';\n      scrollDiv.style.top = \'-9999px\';\n      scrollDiv.style.width = \'50px\';\n      scrollDiv.style.height = \'50px\';\n      scrollDiv.style.overflow = \'scroll\';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}\n;// CONCATENATED MODULE: ./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn\'t stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding "this" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error(\'Can only polyfill class components\');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== \'function\' &&\n    typeof prototype.getSnapshotBeforeUpdate !== \'function\'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, "unsafe" lifecycles won\'t be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === \'function\') {\n    foundWillMountName = \'componentWillMount\';\n  } else if (typeof prototype.UNSAFE_componentWillMount === \'function\') {\n    foundWillMountName = \'UNSAFE_componentWillMount\';\n  }\n  if (typeof prototype.componentWillReceiveProps === \'function\') {\n    foundWillReceivePropsName = \'componentWillReceiveProps\';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === \'function\') {\n    foundWillReceivePropsName = \'UNSAFE_componentWillReceiveProps\';\n  }\n  if (typeof prototype.componentWillUpdate === \'function\') {\n    foundWillUpdateName = \'componentWillUpdate\';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === \'function\') {\n    foundWillUpdateName = \'UNSAFE_componentWillUpdate\';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === \'function\'\n        ? \'getDerivedStateFromProps()\'\n        : \'getSnapshotBeforeUpdate()\';\n\n    throw Error(\n      \'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\' +\n        componentName +\n        \' uses \' +\n        newApiName +\n        \' but also contains the following legacy lifecycles:\' +\n        (foundWillMountName !== null ? \'\\n  \' + foundWillMountName : \'\') +\n        (foundWillReceivePropsName !== null\n          ? \'\\n  \' + foundWillReceivePropsName\n          : \'\') +\n        (foundWillUpdateName !== null ? \'\\n  \' + foundWillUpdateName : \'\') +\n        \'\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n\' +\n        \'https://fb.me/react-async-component-lifecycle-hooks\'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === \'function\') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === \'function\') {\n    if (typeof prototype.componentDidUpdate !== \'function\') {\n      throw new Error(\n        \'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype\'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can\'t just check for the presence of "maybeSnapshot",\n      // Because for <= 15.x versions this might be a "prevContext" object.\n      // We also can\'t just check "__reactInternalSnapshot",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/utils/animationFrame.js\n// Properly handle server-side rendering.\nvar win;\n\nif (typeof window !== \'undefined\') {\n  win = window;\n} else if (typeof self !== \'undefined\') {\n  win = self;\n} else {\n  win = {};\n} // requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\nvar request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n  return win.setTimeout(callback, 1000 / 60);\n};\n\nvar cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {\n  win.clearTimeout(id);\n};\n\nvar raf = request;\nvar caf = cancel;\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/utils/requestAnimationTimeout.js\n\nvar bpfrpt_proptype_AnimationTimeoutId =  true ? null : 0;\nvar cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return caf(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you\'re timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nvar requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = raf(timeout);\n    }\n  };\n\n  var frame = {\n    id: raf(timeout)\n  };\n  return frame;\n};\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/Grid.js\n\n\n\n\n\n\n\n\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nvar DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element\'s scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: \'observed\',\n  REQUESTED: \'requested\'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    _classCallCheck(this, Grid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Grid).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), "_onGridRenderedMemoizer", createCallbackMemoizer());\n\n    _defineProperty(_assertThisInitialized(_this), "_onScrollMemoizer", createCallbackMemoizer(false));\n\n    _defineProperty(_assertThisInitialized(_this), "_deferredInvalidateColumnIndex", null);\n\n    _defineProperty(_assertThisInitialized(_this), "_deferredInvalidateRowIndex", null);\n\n    _defineProperty(_assertThisInitialized(_this), "_recomputeScrollLeftFlag", false);\n\n    _defineProperty(_assertThisInitialized(_this), "_recomputeScrollTopFlag", false);\n\n    _defineProperty(_assertThisInitialized(_this), "_horizontalScrollBarSize", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_verticalScrollBarSize", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_scrollbarPresenceChanged", false);\n\n    _defineProperty(_assertThisInitialized(_this), "_scrollingContainer", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_childrenToDisplay", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_columnStartIndex", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_columnStopIndex", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_rowStartIndex", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_rowStopIndex", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_renderedColumnStartIndex", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_renderedColumnStopIndex", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_renderedRowStartIndex", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_renderedRowStopIndex", 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_initialScrollTop", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_initialScrollLeft", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_disablePointerEventsTimeoutId", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_styleCache", {});\n\n    _defineProperty(_assertThisInitialized(_this), "_cellCache", {});\n\n    _defineProperty(_assertThisInitialized(_this), "_debounceScrollEndedCallback", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_invokeOnGridRenderedHelper", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_setScrollingContainerRef", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_onScroll", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component\'s scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: "getOffsetForCell",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows\' height.\n     */\n\n  }, {\n    key: "getTotalRowsHeight",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns\' width.\n     */\n\n  }, {\n    key: "getTotalColumnsWidth",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It\'s an advanced method and should probably not be used unless you\'re implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: "handleScrollEvent",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don\'t force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don\'t change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: "invalidateCellSizeAfterRender",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === \'number\' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === \'number\' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: "measureAllCells",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: "recomputeGridSize",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can\'t know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: "scrollToCell",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don\'t adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === \'number\' && scrollLeft >= 0 || typeof scrollTop === \'number\' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don\'t work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref\'s scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn\'t trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don\'t update scroll offset if the size is 0; we don\'t render any cells in this case.\n      // Setting a state may cause us to later thing we\'ve updated the offce when we haven\'t.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don\'t show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: "render",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: \'border-box\',\n        direction: \'ltr\',\n        height: autoHeight ? \'auto\' : height,\n        position: \'relative\',\n        width: autoWidth ? \'auto\' : width,\n        WebkitOverflowScrolling: \'touch\',\n        willChange: \'transform\'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren\'t necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to \'auto\' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? \'hidden\' : \'auto\';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? \'hidden\' : \'auto\';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return react.createElement("div", extends_extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        "aria-label": this.props[\'aria-label\'],\n        "aria-readonly": this.props[\'aria-readonly\'],\n        className: clsx_m(\'ReactVirtualized__Grid\', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && react.createElement("div", {\n        className: "ReactVirtualized__Grid__innerScrollContainer",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? \'auto\' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: \'hidden\',\n          pointerEvents: isScrolling ? \'none\' : \'\',\n          position: \'relative\'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: "_calculateChildrenToRender",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: \'horizontal\',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === \'number\' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === \'number\' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: \'vertical\',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === \'number\' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === \'number\' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can\'t know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can\'t know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: "_debounceScrollEnded",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: "_handleInvalidatedGridSize",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === \'number\' && typeof this._deferredInvalidateRowIndex === \'number\') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: "_invokeOnScrollMemoizer",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: "_isScrolling",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, \'isScrolling\') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: "_maybeCallOnScrollbarPresenceChange",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: "scrollToPosition",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: "_getCalculatedScrollLeft",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: "_updateScrollLeftForScrollToColumn",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: "_getCalculatedScrollTop",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: "_resetStyleCache",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don\'t clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = "".concat(rowIndex, "-").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: "_updateScrollTopForScrollToRow",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: "getDerivedStateFromProps",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn\'t specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === \'number\' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === \'number\' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === \'number\' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === \'number\' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: "_getEstimatedColumnSize",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === \'number\' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: "_getEstimatedRowSize",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === \'number\' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: "_getScrollToPositionStateUpdate",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === \'number\' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === \'number\' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === \'number\' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === \'number\' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: "_wrapSizeGetter",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === \'function\' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: "_getCalculatedScrollLeft",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: "_getScrollLeftForScrollToColumnStateUpdate",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === \'number\' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: "_getCalculatedScrollTop",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: "_getScrollTopForScrollToRowStateUpdate",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === \'number\' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n\n  return Grid;\n}(react.PureComponent), _defineProperty(_class, "propTypes",  true ? null : 0), _temp);\n\n_defineProperty(Grid, "defaultProps", {\n  \'aria-label\': \'grid\',\n  \'aria-readonly\': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: \'rowgroup\',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: \'grid\',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: \'auto\',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n\npolyfill(Grid);\n/* harmony default export */ const Grid_Grid = (Grid);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/accessibilityOverscanIndicesGetter.js\nvar accessibilityOverscanIndicesGetter_SCROLL_DIRECTION_BACKWARD = (/* unused pure expression or super */ null && (-1));\nvar accessibilityOverscanIndicesGetter_SCROLL_DIRECTION_FORWARD = 1;\nvar accessibilityOverscanIndicesGetter_SCROLL_DIRECTION_HORIZONTAL = \'horizontal\';\nvar accessibilityOverscanIndicesGetter_SCROLL_DIRECTION_VERTICAL = \'vertical\';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn\'t exceed the available cells.\n */\n\nfunction accessibilityOverscanIndicesGetter_defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n  // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === accessibilityOverscanIndicesGetter_SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/Grid/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/List/types.js\n\nvar bpfrpt_proptype_RowRendererParams =  true ? null : 0;\nvar bpfrpt_proptype_RowRenderer =  true ? null : 0;\nvar bpfrpt_proptype_RenderedRows =  true ? null : 0;\nvar types_bpfrpt_proptype_Scroll =  true ? null : 0;\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/List/List.js\n\n\n\n\n\n\n\n\n\nvar List_class, List_temp;\n\n\n\n\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\nvar List = (List_temp = List_class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), "Grid", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), "_cellRenderer", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, \'width\');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = \'100%\';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_setRef", function (ref) {\n      _this.Grid = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_onScroll", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "_onSectionRendered", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: "forceUpdateGrid",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: "getOffsetForRow",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: "invalidateCellSizeAfterRender",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: "measureAllRows",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: "recomputeGridSize",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: "recomputeRowHeights",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: "scrollToPosition",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: "scrollToRow",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = clsx_m(\'ReactVirtualized__List\', className);\n      return react.createElement(Grid_Grid, extends_extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n\n  return List;\n}(react.PureComponent), _defineProperty(List_class, "propTypes",  true ? null : 0), List_temp);\n\n_defineProperty(List, "defaultProps", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter_defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: \'auto\',\n  scrollToIndex: -1,\n  style: {}\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/react-virtualized/dist/es/List/index.js\n\n\n\n\n;// CONCATENATED MODULE: ./src/components/ResultsList.js\nconst ResultsList_excluded = ["maxItems", "itemComponent", "items", "query", "selectedIndex", "setSelectedIndex"];\n\nfunction ResultsList_extends() { ResultsList_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return ResultsList_extends.apply(this, arguments); }\n\nfunction ResultsList_objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = ResultsList_objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction ResultsList_objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\nconst RowHeight = 45;\nconst Width = 500;\n/* harmony default export */ const ResultsList = (/*#__PURE__*/(0,react.forwardRef)(function ResultsList(_ref, ref) {\n  let {\n    maxItems = 20,\n    itemComponent: ItemComponent,\n    items,\n    query,\n    selectedIndex,\n    setSelectedIndex\n  } = _ref,\n      props = ResultsList_objectWithoutProperties(_ref, ResultsList_excluded);\n\n  const listRef = (0,react.useRef)(null);\n  const startIndex = (0,react.useRef)(0);\n  const stopIndex = (0,react.useRef)(0);\n  const itemCount = items.length;\n  const height = Math.min(itemCount, maxItems) * RowHeight;\n  (0,react.useImperativeHandle)(ref, () => ({\n    scrollToRow(index) {\n      listRef.current.scrollToRow(index);\n    },\n\n    scrollByPage(direction) {\n      const itemCount = Math.min(maxItems, items.length) - 1;\n      let newIndex = selectedIndex;\n\n      if (direction == "down") {\n        if (selectedIndex === stopIndex.current) {\n          newIndex = Math.min(selectedIndex + itemCount, items.length - 1);\n        } else {\n          newIndex = stopIndex.current;\n        }\n      } else {\n        if (selectedIndex === startIndex.current) {\n          newIndex = Math.max(selectedIndex - itemCount, 0);\n        } else {\n          newIndex = startIndex.current;\n        }\n      }\n\n      setSelectedIndex(newIndex);\n    }\n\n  }));\n\n  const rowRenderer = ({\n    index,\n    key,\n    style\n  }) => {\n    const item = items[index];\n    return /*#__PURE__*/react.createElement(ItemComponent, {\n      key: key,\n      index: index,\n      item: item,\n      isSelected: selectedIndex === index,\n      style: style,\n      query: query\n    });\n  };\n\n  const handleRowsRendered = event => {\n    // track the visible rendered rows so we know how to change the\n    // selection when the App tells us to page up/down, since the App\n    // doesn\'t know what\'s visible\n    startIndex.current = event.startIndex;\n    stopIndex.current = event.stopIndex;\n  };\n\n  return /*#__PURE__*/react.createElement(List, ResultsList_extends({\n    ref: listRef,\n    tabIndex: -1,\n    width: Width,\n    height: height,\n    rowCount: itemCount,\n    rowHeight: RowHeight,\n    rowRenderer: rowRenderer,\n    scrollToIndex: selectedIndex,\n    onRowsRendered: handleRowsRendered\n  }, props));\n}));\n// EXTERNAL MODULE: ./node_modules/fast-memoize/src/index.js\nvar src = __webpack_require__(316);\nvar src_default = /*#__PURE__*/__webpack_require__.n(src);\n;// CONCATENATED MODULE: ./src/components/MatchedString.js\n\n\n\nconst Match = styled_components_browser_esm.span.withConfig({\n  displayName: "MatchedString__Match",\n  componentId: "sc-1exnx2u-0"\n})(["font-weight:bold;"]); // memoize this, since it could get called multiple times by render() with\n// the same values, such as when the selection changes but the query doesn\'t\n\nconst wrapMatches = src_default()((string, matches) => {\n  const substrings = [];\n  let previousEnd = 0;\n\n  for (const [start, end] of matches) {\n    const prefix = string.substring(previousEnd, start);\n    const match = /*#__PURE__*/react.createElement(Match, null, string.substring(start, end));\n    substrings.push(prefix, match);\n    previousEnd = end;\n  } // add the part of the string after the final match, which will be the\n  // whole string if there are no matches\n\n\n  substrings.push(string.substring(previousEnd)); // toArray() automatically adds keys to the array items\n\n  return react.Children.toArray(substrings);\n});\nfunction MatchedString({\n  string,\n  matches\n}) {\n  return /*#__PURE__*/react.createElement("span", null, wrapMatches(string, matches));\n}\n;// CONCATENATED MODULE: ./src/components/ResultsListItem.js\n\n\n\nconst MaxTitleLength = 70;\nconst MaxURLLength = 75;\nconst Item = styled_components_browser_esm.div.withConfig({\n  displayName: "ResultsListItem__Item",\n  componentId: "sc-1lfev8k-0"\n})(["margin:0;padding:4px 55px 5px 28px;max-width:590px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;position:relative;", ";"], props => props.isSelected && Ce(["background:#ebebeb;"]));\nconst Text = styled_components_browser_esm.div.withConfig({\n  displayName: "ResultsListItem__Text",\n  componentId: "sc-1lfev8k-1"\n})(["width:100%;height:19px;text-overflow:ellipsis;overflow:hidden;"]);\nconst URLText = styled_components_browser_esm(Text).withConfig({\n  displayName: "ResultsListItem__URLText",\n  componentId: "sc-1lfev8k-2"\n})(["font-size:12px;opacity:0.7;"]);\nconst Favicon = styled_components_browser_esm.div.withConfig({\n  displayName: "ResultsListItem__Favicon",\n  componentId: "sc-1lfev8k-3"\n})(["left:6px;top:6px;width:16px;height:16px;background-size:cover;background-repeat:no-repeat;background-image:url(https://www.google.com/s2/favicons?domain=https://", ");position:absolute;"], props => props.domain);\nconst Score = styled_components_browser_esm.div.withConfig({\n  displayName: "ResultsListItem__Score",\n  componentId: "sc-1lfev8k-4"\n})(["font-size:12px;opacity:0.6;top:6px;right:6px;height:19px;text-align:right;position:absolute;"]);\nconst URLScore = styled_components_browser_esm(Score).withConfig({\n  displayName: "ResultsListItem__URLScore",\n  componentId: "sc-1lfev8k-5"\n})(["top:23px;"]);\n\nfunction clip(value) {\n  // for display purposes, ignore the rounding issues with toFixed().\n  // fuzzysort returns whole numbers <= 0, so don\'t add unnecessary\n  // decimal places to those scores (we\'ll live with 0.00000).\n  return value < 0 ? value : value.toFixed(5);\n}\n\nfunction ResultsListItem({\n  item,\n  isSelected,\n  index,\n  style\n}) {\n  const {\n    item: {\n      title,\n      url,\n      domain\n    },\n    scores,\n    matches\n  } = item;\n  const tooltip = [title.length > MaxTitleLength ? title : "", url.length > MaxURLLength ? url : ""].join("\\n").trim();\n  const titleScore = clip(scores.title);\n  const urlScore = clip(scores.url);\n  const scoresTooltip = `#${index + 1} scores:\ntitle: ${titleScore}\nurl: ${urlScore}`; // make sure to apply props.style to the row container so it gets\n  // positioned correctly in the virtual list\n\n  return /*#__PURE__*/react.createElement(Item, {\n    style: style,\n    title: tooltip,\n    isSelected: isSelected\n  }, /*#__PURE__*/react.createElement(Favicon, {\n    domain: domain\n  }), /*#__PURE__*/react.createElement(Text, null, /*#__PURE__*/react.createElement(MatchedString, {\n    string: title,\n    matches: matches.title\n  })), /*#__PURE__*/react.createElement(URLText, null, /*#__PURE__*/react.createElement(MatchedString, {\n    string: url,\n    matches: matches.url\n  })), /*#__PURE__*/react.createElement(Score, {\n    title: scoresTooltip\n  }, titleScore), /*#__PURE__*/react.createElement(URLScore, {\n    title: scoresTooltip\n  }, urlScore));\n}\n;// CONCATENATED MODULE: ./src/scorers/getMatchingItems.js\n\nconst searchData = {};\nconst search = src_default()((query, name, scorer, // this param isn\'t used, but it\'s included so that if the items\n// change, memoize() won\'t return the old result\nitemsHash) => {\n  const start = performance.now();\n  const matchingItems = scorer.search(query);\n  const end = performance.now();\n  const data = searchData[name]; // track every query to get an average time per scorer.  we do this\n  // inside the memoized search function so that the time and counts only\n  // update when there\'s a new search.\n\n  data.time += end - start;\n  data.count++;\n  return matchingItems;\n});\nfunction getMatchingItems(query, config, itemsHash) {\n  const {\n    name,\n    scorer,\n    converter\n  } = config;\n  let data = searchData[name];\n\n  if (!data) {\n    data = searchData[name] = {\n      time: 0,\n      count: 0\n    };\n  }\n\n  const items = search(query, name, scorer, itemsHash); // limit the average time to 1 decimal point, but convert the string\n  // back to a number so that 1.0 becomes 1\n\n  return [converter(items), +(data.time / data.count).toFixed(1)];\n}\n;// CONCATENATED MODULE: ./src/components/SearchWidget.js\n\n\n\n\n\n\nconst Box = styled_components_browser_esm.div.withConfig({\n  displayName: "SearchWidget__Box",\n  componentId: "sc-1x0texb-0"\n})(["font-size:14px;border:1px solid #ccc;padding:7px;vertical-align:top;display:inline-block;position:relative;& ~ &{margin-left:30px;}"]);\nconst SearchTime = styled_components_browser_esm.div.withConfig({\n  displayName: "SearchWidget__SearchTime",\n  componentId: "sc-1x0texb-1"\n})(["top:9px;right:30px;text-align:right;font-style:italic;font-size:smaller;color:#aaa;position:absolute;"]);\n/* harmony default export */ const SearchWidget = (/*#__PURE__*/(0,react.forwardRef)(function SearchWidget({\n  query,\n  itemsHash,\n  scorerConfig,\n  selectedIndex,\n  setSelectedIndex,\n  onQueryChange,\n  onKeyDown\n}, ref) {\n  const resultsListRef = (0,react.useRef)(null);\n  const searchBoxRef = (0,react.useRef)(null);\n  const [items, ms] = getMatchingItems(query, scorerConfig, itemsHash);\n  const count = items.length;\n  const countDisplay = `${count} result${count > 1 || count == 0 ? "s" : ""}`; // don\'t let the selection go beyond the last item in this SearchWidget,\n  // even if the other one has more items\n\n  const maxIndex = Math.min(selectedIndex, count - 1);\n  (0,react.useImperativeHandle)(ref, () => ({\n    scrollToRow(row) {\n      resultsListRef.current.scrollToRow(row);\n    },\n\n    scrollByPage(direction) {\n      resultsListRef.current.scrollByPage(direction);\n    },\n\n    focus() {\n      searchBoxRef.current.focus();\n    }\n\n  }));\n  return /*#__PURE__*/react.createElement(Box, null, /*#__PURE__*/react.createElement(SearchBox, {\n    ref: searchBoxRef,\n    query: query,\n    scorerName: scorerConfig.name,\n    onChange: onQueryChange,\n    onKeyDown: onKeyDown\n  }), query ? /*#__PURE__*/react.createElement(SearchTime, null, countDisplay, " - ", ms, " ms avg") : "", /*#__PURE__*/react.createElement(ResultsList, {\n    ref: resultsListRef,\n    items: items,\n    itemComponent: ResultsListItem,\n    query: query,\n    maxItems: 10,\n    selectedIndex: maxIndex,\n    setSelectedIndex: setSelectedIndex\n  }));\n}));\n;// CONCATENATED MODULE: ./src/utils/copy-to-clipboard.js\nfunction copyTextToClipboard(text) {\n  const copyFrom = document.createElement("textarea");\n  const body = document.body;\n  const activeElement = document.activeElement;\n  let result;\n  copyFrom.textContent = text;\n  body.appendChild(copyFrom);\n  copyFrom.focus();\n  copyFrom.select();\n  result = document.execCommand("copy");\n  body.removeChild(copyFrom);\n\n  if (!result) {\n    alert("The browser blocked the copy action for some reason.");\n  }\n\n  if (activeElement) {\n    // refocus the previously active element, since we stole the\n    // focus to copy the text from the temp textarea\n    activeElement.focus();\n  }\n}\n;// CONCATENATED MODULE: ./src/components/ItemsEditor.js\n\n\n\nconst ItemsContainer = styled_components_browser_esm.div.withConfig({\n  displayName: "ItemsEditor__ItemsContainer",\n  componentId: "sc-letov8-0"\n})(["margin-top:4em;"]);\nconst ItemsTextArea = styled_components_browser_esm.textarea.withConfig({\n  displayName: "ItemsEditor__ItemsTextArea",\n  componentId: "sc-letov8-1"\n})(["font-family:Consolas,Lucida Console,Courier New,monospace;color:#444;width:516px;height:35em;padding:.5em;border:1px solid #ccc;display:inline-block;vertical-align:top;"]);\nconst OrderedList = styled_components_browser_esm.ol.withConfig({\n  displayName: "ItemsEditor__OrderedList",\n  componentId: "sc-letov8-2"\n})(["width:50%;margin:0;padding:0 2.5em;display:inline-block;vertical-align:top;& li{margin:0 0 1em 0;}"]);\nconst Code = styled_components_browser_esm.div.withConfig({\n  displayName: "ItemsEditor__Code",\n  componentId: "sc-letov8-3"\n})(["font-family:Consolas,Lucida Console,Courier New,monospace;white-space:pre-wrap;margin:.5em 0;padding:.25em .5em;background-color:rgba(27,31,35,0.05);"]);\nconst BookmarksCopyCode = `var s = bookmarks.Store.getInstance().data;\nvar b = Array.from(s.selection.items).map(id => s.nodes[id]).map(({title, url}) => ({title, url}));\ncopy(JSON.stringify(b, null, 2));\n`;\nfunction ItemsEditor({\n  itemsJSON,\n  setItems\n}) {\n  const editorRef = (0,react.useRef)(null);\n\n  const handleCopyClick = () => copyTextToClipboard(BookmarksCopyCode);\n\n  const handleDelete = () => {\n    editorRef.current.value = "";\n    editorRef.current.focus();\n  };\n\n  const handleTextChange = ({\n    target: {\n      value\n    }\n  }) => {\n    let items;\n\n    try {\n      items = JSON.parse(value);\n    } catch (e) {}\n\n    if (items) {\n      setItems(items);\n    }\n  };\n\n  return /*#__PURE__*/react.createElement(ItemsContainer, {\n    id: "editor"\n  }, /*#__PURE__*/react.createElement("p", {\n    style: {\n      marginBottom: "1.75em"\n    }\n  }, "The bookmark JSON data used in the search widgets above can be edited here.  If you\'re using Chrome, you can copy and paste your own bookmarks by following the directions below, which may make it a little easier to evaluate the QuickScore algorithm by searching for familiar bookmarks."), /*#__PURE__*/react.createElement(ItemsTextArea, {\n    ref: editorRef,\n    autoComplete: "off",\n    autoCorrect: "off",\n    autoCapitalize: "off",\n    spellCheck: "false",\n    defaultValue: itemsJSON,\n    onChange: handleTextChange\n  }), /*#__PURE__*/react.createElement(OrderedList, {\n    id: "directions"\n  }, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("button", {\n    onClick: handleCopyClick\n  }, "Copy"), " the code below to the clipboard:", /*#__PURE__*/react.createElement(Code, null, BookmarksCopyCode)), /*#__PURE__*/react.createElement("li", null, "Open the Bookmark manager from ", /*#__PURE__*/react.createElement("i", null, "Main menu > Bookmarks > Bookmark manager"), "."), /*#__PURE__*/react.createElement("li", null, "Select the bookmarks you want to copy.  You can shift-click bookmarks to select a range, or press ", /*#__PURE__*/react.createElement("kbd", null, "ctrl"), /*#__PURE__*/react.createElement("kbd", null, "A"), " or ", /*#__PURE__*/react.createElement("kbd", null, "cmd"), /*#__PURE__*/react.createElement("kbd", null, "A"), " to select all of them in the current folder."), /*#__PURE__*/react.createElement("li", null, "Press ", /*#__PURE__*/react.createElement("kbd", null, "ctrl"), /*#__PURE__*/react.createElement("kbd", null, "shift"), /*#__PURE__*/react.createElement("kbd", null, "J"), " on Windows/Linux or ", /*#__PURE__*/react.createElement("kbd", null, "cmd"), /*#__PURE__*/react.createElement("kbd", null, "opt"), /*#__PURE__*/react.createElement("kbd", null, "J"), " on macOS to open the Chrome Developer tools console."), /*#__PURE__*/react.createElement("li", null, "Paste the copied code next to the > in the console."), /*#__PURE__*/react.createElement("li", null, "Press ", /*#__PURE__*/react.createElement("kbd", null, "enter"), " to execute the code."), /*#__PURE__*/react.createElement("li", null, "In the text editor to the left, ", /*#__PURE__*/react.createElement("button", {\n    onClick: handleDelete\n  }, "delete"), " all the JSON and then paste the copied bookmarks.")));\n}\n;// CONCATENATED MODULE: ./node_modules/quick-score/lib/index.esm.js\n/**\r\n * A class representing a half-open interval of characters.  A range\'s `location`\r\n * property and `max()` value can be used as arguments for the `substring()`\r\n * method to extract a range of characters.\r\n */\r\nclass Range {\r\n\t/**\r\n\t * @param {number} [location=-1] - Starting index of the range.\r\n\t * @param {number} [length=0] - Number of characters in the range.\r\n\t */\r\n\tconstructor(\r\n\t\tlocation = -1,\r\n\t\tlength = 0)\r\n\t{\r\n\t\tthis.location = location;\r\n\t\tthis.length = length;\r\n\t}\r\n\r\n\r\n\t/* eslint no-inline-comments: 0 */\r\n\t/**\r\n\t * Gets the end index of the range, which indicates the character\r\n\t * immediately after the last one in the range.\r\n\t *\r\n\t * @returns {number}\r\n\t *//**\r\n\t * Sets the end index of the range, which indicates the character\r\n\t * immediately after the last one in the range.\r\n\t *\r\n\t * @param {number} [value] - End of the range.\r\n\t *\r\n\t * @returns {number}\r\n\t */\r\n\tmax(\r\n\t\tvalue)\r\n\t{\r\n\t\tif (typeof value == "number") {\r\n\t\t\tthis.length = value - this.location;\r\n\t\t}\r\n\r\n\t\t\t// the NSMaxRange() function in Objective-C returns this value\r\n\t\treturn this.location + this.length;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns whether the range contains a location >= 0.\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid()\r\n\t{\r\n\t\treturn (this.location > -1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an array of the range\'s start and end indexes.\r\n\t *\r\n\t * @returns {Array<number>}\r\n\t */\r\n\ttoArray()\r\n\t{\r\n\t\treturn [this.location, this.max()];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a string representation of the range\'s open interval.\r\n\t *\r\n\t * @returns {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tif (this.location == -1) {\r\n\t\t\treturn "invalid range";\r\n\t\t} else {\r\n\t\t\treturn "[" + this.location + "," + this.max() + ")";\r\n\t\t}\r\n\t}\r\n}\n\nconst BaseConfigDefaults = {\r\n\twordSeparators: "-/\\\\:()<>%._=&[]+ \\t\\n\\r",\r\n\tuppercaseLetters: (() => {\r\n\t\tconst charCodeA = "A".charCodeAt(0);\r\n\t\tconst uppercase = [];\r\n\r\n\t\tfor (let i = 0; i < 26; i++) {\r\n\t\t\tuppercase.push(String.fromCharCode(charCodeA + i));\r\n\t\t}\r\n\r\n\t\treturn uppercase.join("");\r\n\t})(),\r\n\tignoredScore: 0.9,\r\n\tskippedScore: 0.15,\r\n\temptyQueryScore: 0,\r\n\t\t// long, nearly-matching queries can generate up to 2^queryLength loops,\r\n\t\t// so support worst-case queries up to 16 characters and then give up\r\n\t\t// and return 0 for longer queries that may or may not actually match\r\n\tmaxIterations: Math.pow(2, 16)\r\n};\r\nconst QSConfigDefaults = {\r\n\tlongStringLength: 150,\r\n\tmaxMatchStartPct: 0.15,\r\n\tminMatchDensityPct: 0.75,\r\n\tmaxMatchDensityPct: 0.95,\r\n\tbeginningOfStringPct: 0.1\r\n};\r\n\r\n\r\nclass Config {\r\n\tconstructor(\r\n\t\toptions)\r\n\t{\r\n\t\tObject.assign(this, BaseConfigDefaults, options);\r\n\t}\r\n\r\n\r\n\tuseSkipReduction()\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tadjustRemainingScore(\r\n\t\tstring,\r\n\t\tquery,\r\n\t\tremainingScore,\r\n\t\tskippedSpecialChar,\r\n\t\tsearchRange,\r\n\t\tremainingSearchRange,\r\n\t\tmatchedRange,\r\n\t\tfullMatchedRange)\r\n\t{\r\n\t\t\t// use the original Quicksilver expression for the remainingScore\r\n\t\treturn remainingScore * remainingSearchRange.length;\r\n\t}\r\n}\r\n\r\n\r\nclass QuickScoreConfig extends Config {\r\n\tconstructor(\r\n\t\toptions)\r\n\t{\r\n\t\tsuper(Object.assign({}, QSConfigDefaults, options));\r\n\t}\r\n\r\n\r\n\tuseSkipReduction(\r\n\t\tstring,\r\n\t\tquery,\r\n\t\tremainingScore,\r\n\t\tsearchRange,\r\n\t\tremainingSearchRange,\r\n\t\tmatchedRange,\r\n\t\tfullMatchedRange)\r\n\t{\r\n\t\tconst len = string.length;\r\n\t\tconst isShortString = len <= this.longStringLength;\r\n\t\tconst matchStartPercentage = fullMatchedRange.location / len;\r\n\r\n\t\treturn isShortString || matchStartPercentage < this.maxMatchStartPct;\r\n\t}\r\n\r\n\r\n\tadjustRemainingScore(\r\n\t\tstring,\r\n\t\tquery,\r\n\t\tremainingScore,\r\n\t\tskippedSpecialChar,\r\n\t\tsearchRange,\r\n\t\tremainingSearchRange,\r\n\t\tmatchedRange,\r\n\t\tfullMatchedRange)\r\n\t{\r\n\t\tconst isShortString = string.length <= this.longStringLength;\r\n\t\tconst matchStartPercentage = fullMatchedRange.location / string.length;\r\n\t\tlet matchRangeDiscount = 1;\r\n\t\tlet matchStartDiscount = (1 - matchStartPercentage);\r\n\r\n\t\t\t// discount the remainingScore based on how much larger the match is\r\n\t\t\t// than the query, unless the match is in the first 10% of the\r\n\t\t\t// string, the match range isn\'t too sparse and the whole string is\r\n\t\t\t// not too long.  also only discount if we didn\'t skip any whitespace\r\n\t\t\t// or capitals.\r\n\t\tif (!skippedSpecialChar) {\r\n\t\t\tmatchRangeDiscount = query.length / fullMatchedRange.length;\r\n\t\t\tmatchRangeDiscount = (isShortString &&\r\n\t\t\t\tmatchStartPercentage <= this.beginningOfStringPct &&\r\n\t\t\t\tmatchRangeDiscount >= this.minMatchDensityPct) ?\r\n\t\t\t\t1 : matchRangeDiscount;\r\n\t\t\tmatchStartDiscount = matchRangeDiscount >= this.maxMatchDensityPct ?\r\n\t\t\t\t1 : matchStartDiscount;\r\n\t\t}\r\n\r\n\t\t\t// discount the scores of very long strings\r\n\t\treturn remainingScore *\r\n\t\t\tMath.min(remainingSearchRange.length, this.longStringLength) *\r\n\t\t\tmatchRangeDiscount * matchStartDiscount;\r\n\t}\r\n}\r\n\r\n\r\nfunction createConfig(\r\n\toptions)\r\n{\r\n\tif (options instanceof Config) {\r\n\t\t\t// this is a full-fledged Config instance, so we don\'t need to do\r\n\t\t\t// anything to it\r\n\t\treturn options;\r\n\t} else {\r\n\t\t\t// create a complete config from this\r\n\t\treturn new QuickScoreConfig(options);\r\n\t}\r\n}\r\n\r\n\r\nconst DefaultConfig = createConfig();\r\nconst BaseConfig = new Config();\r\nconst QuicksilverConfig = new Config({\r\n\t\t// the Quicksilver algorithm returns .9 for empty queries\r\n\temptyQueryScore: 0.9,\r\n\tadjustRemainingScore: function(\r\n\t\tstring,\r\n\t\tquery,\r\n\t\tremainingScore,\r\n\t\tskippedSpecialChar,\r\n\t\tsearchRange,\r\n\t\tremainingSearchRange,\r\n\t\tmatchedRange,\r\n\t\tfullMatchedRange)\r\n\t{\r\n\t\tlet score = remainingScore * remainingSearchRange.length;\r\n\r\n\t\tif (!skippedSpecialChar) {\r\n\t\t\t\t// the current QuickSilver algorithm reduces the score by half\r\n\t\t\t\t// this value when no special chars are skipped, so add the half\r\n\t\t\t\t// back in to match it\r\n\t\t\tscore += ((matchedRange.location - searchRange.location) / 2.0);\r\n\t\t}\r\n\r\n\t\treturn score;\r\n\t}\r\n});\n\n/**\r\n * Scores a string against a query.\r\n *\r\n * @param {string} string - The string to score.\r\n *\r\n * @param {string} query - The query string to score the `string` parameter against.\r\n *\r\n * @param {Array} [matches] - If supplied, the `quickScore()` will push\r\n * onto `matches` an array with start and end indexes for each substring range\r\n * of `string` that matches `query`.  These indexes can be used to highlight the\r\n * matching characters in an auto-complete UI.\r\n *\r\n * @param {string} [transformedString] - A transformed version of the string that\r\n * will be used for matching.  This defaults to a lowercase version of `string`,\r\n * but it could also be used to match against a string with all the diacritics\r\n * removed, so an unaccented character in the query would match an accented one\r\n * in the string.\r\n *\r\n * @param {string} [transformedQuery] - A transformed version of `query`.  The\r\n * same transformation applied to `transformedString` should be applied to this\r\n * parameter, or both can be left as `undefined` for the default lowercase\r\n * transformation.\r\n *\r\n * @param {object} [config] - A configuration object that can modify how the\r\n * `quickScore` algorithm behaves.\r\n *\r\n * @param {Range} [stringRange] - The range of characters in `string` that should\r\n * be checked for matches against `query`.  Defaults to all of the `string`\r\n * parameter.\r\n *\r\n * @returns {number}\r\n */\r\nfunction quickScore(\r\n\tstring = "",\r\n\tquery = "",\r\n\tmatches,\r\n\ttransformedString = string.toLocaleLowerCase(),\r\n\ttransformedQuery = query.toLocaleLowerCase(),\r\n\tconfig = DefaultConfig,\r\n\tstringRange = new Range(0, string.length))\r\n{\r\n\tlet iterations = 0;\r\n\r\n\tif (query) {\r\n\t\treturn calcScore(stringRange, new Range(0, query.length), new Range());\r\n\t} else {\r\n\t\treturn config.emptyQueryScore;\r\n\t}\r\n\r\n\r\n\tfunction calcScore(\r\n\t\tsearchRange,\r\n\t\tqueryRange,\r\n\t\tfullMatchedRange)\r\n\t{\r\n\t\tif (!queryRange.length) {\r\n\t\t\t\t// deduct some points for all remaining characters\r\n\t\t\treturn config.ignoredScore;\r\n\t\t} else if (queryRange.length > searchRange.length) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tconst initialMatchesLength = matches && matches.length;\r\n\r\n\t\tfor (let i = queryRange.length; i > 0; i--) {\r\n\t\t\tif (iterations > config.maxIterations) {\r\n\t\t\t\t\t// a long query that matches the string except for the last\r\n\t\t\t\t\t// character can generate 2^queryLength iterations of this\r\n\t\t\t\t\t// loop before returning 0, so short-circuit that when we\'ve\r\n\t\t\t\t\t// seen too many iterations (bit of an ugly kludge, but it\r\n\t\t\t\t\t// avoids locking up the UI if the user somehow types an\r\n\t\t\t\t\t// edge-case query)\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\titerations++;\r\n\r\n\t\t\tconst querySubstring = transformedQuery.substring(queryRange.location, queryRange.location + i);\r\n\t\t\t\t// reduce the length of the search range by the number of chars\r\n\t\t\t\t// we\'re skipping in the query, to make sure there\'s enough string\r\n\t\t\t\t// left to possibly contain the skipped chars\r\n\t\t\tconst matchedRange = getRangeOfSubstring(transformedString, querySubstring,\r\n\t\t\t\tnew Range(searchRange.location, searchRange.length - queryRange.length + i));\r\n\r\n\t\t\tif (!matchedRange.isValid()) {\r\n\t\t\t\t\t// we didn\'t find the query substring, so try again with a\r\n\t\t\t\t\t// shorter substring\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (!fullMatchedRange.isValid()) {\r\n\t\t\t\tfullMatchedRange.location = matchedRange.location;\r\n\t\t\t} else {\r\n\t\t\t\tfullMatchedRange.location = Math.min(fullMatchedRange.location, matchedRange.location);\r\n\t\t\t}\r\n\r\n\t\t\tfullMatchedRange.max(matchedRange.max());\r\n\r\n\t\t\tif (matches) {\r\n\t\t\t\tmatches.push([matchedRange.location, matchedRange.max()]);\r\n\t\t\t}\r\n\r\n\t\t\tconst remainingSearchRange = new Range(matchedRange.max(), searchRange.max() - matchedRange.max());\r\n\t\t\tconst remainingQueryRange = new Range(queryRange.location + i, queryRange.length - i);\r\n\t\t\tconst remainingScore = calcScore(remainingSearchRange, remainingQueryRange, fullMatchedRange);\r\n\r\n\t\t\tif (remainingScore) {\r\n\t\t\t\tlet score = remainingSearchRange.location - searchRange.location;\r\n\t\t\t\t\t// default to true since we only want to apply a discount if\r\n\t\t\t\t\t// we hit the final else clause below, and we won\'t get to\r\n\t\t\t\t\t// any of them if the match is right at the start of the\r\n\t\t\t\t\t// searchRange\r\n\t\t\t\tlet skippedSpecialChar = true;\r\n\t\t\t\tconst useSkipReduction = config.useSkipReduction(string, query,\r\n\t\t\t\t\tremainingScore, remainingSearchRange, searchRange,\r\n\t\t\t\t\tremainingSearchRange, matchedRange, fullMatchedRange);\r\n\r\n\t\t\t\tif (matchedRange.location > searchRange.location) {\r\n\t\t\t\t\t\t// some letters were skipped when finding this match, so\r\n\t\t\t\t\t\t// adjust the score based on whether spaces or capital\r\n\t\t\t\t\t\t// letters were skipped\r\n\t\t\t\t\tif (useSkipReduction &&\r\n\t\t\t\t\t\t\tconfig.wordSeparators.indexOf(string[matchedRange.location - 1]) > -1) {\r\n\t\t\t\t\t\tfor (let j = matchedRange.location - 2; j >= searchRange.location; j--) {\r\n\t\t\t\t\t\t\tif (config.wordSeparators.indexOf(string[j]) > -1) {\r\n\t\t\t\t\t\t\t\tscore--;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tscore -= config.skippedScore;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (useSkipReduction &&\r\n\t\t\t\t\t\t\tconfig.uppercaseLetters.indexOf(string[matchedRange.location]) > -1) {\r\n\t\t\t\t\t\tfor (let j = matchedRange.location - 1; j >= searchRange.location; j--) {\r\n\t\t\t\t\t\t\tif (config.uppercaseLetters.indexOf(string[j]) > -1) {\r\n\t\t\t\t\t\t\t\tscore--;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tscore -= config.skippedScore;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// reduce the score by the number of chars we\'ve\r\n\t\t\t\t\t\t\t// skipped since the beginning of the search range\r\n\t\t\t\t\t\tscore -= matchedRange.location - searchRange.location;\r\n\t\t\t\t\t\tskippedSpecialChar = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscore += config.adjustRemainingScore(string,\r\n\t\t\t\t\tquery, remainingScore, skippedSpecialChar, searchRange,\r\n\t\t\t\t\tremainingSearchRange, matchedRange, fullMatchedRange);\r\n\t\t\t\tscore /= searchRange.length;\r\n\r\n\t\t\t\treturn score;\r\n\t\t\t} else if (matches) {\r\n\t\t\t\t\t// the remaining query does not appear in the remaining\r\n\t\t\t\t\t// string, so strip off any matches we\'ve added during the\r\n\t\t\t\t\t// current call, as they\'ll be invalid when we start over\r\n\t\t\t\t\t// with a shorter piece of the query\r\n\t\t\t\tmatches.length = initialMatchesLength;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n\t// make createConfig() available on quickScore so that the QuickScore\r\n\t// constructor has access to it\r\nquickScore.createConfig = createConfig;\r\n\r\n\r\nfunction getRangeOfSubstring(\r\n\tstring,\r\n\tquery,\r\n\tsearchRange)\r\n{\r\n\tconst index = string.indexOf(query, searchRange.location);\r\n\tconst result = new Range();\r\n\r\n\tif (index > -1 && index < searchRange.max()) {\r\n\t\tresult.location = index;\r\n\t\tresult.length = query.length;\r\n\t}\r\n\r\n\treturn result;\r\n}\n\n/**\r\n * A class for scoring and sorting a list of items against a query string.  Each\r\n * item receives a floating point score between `0` and `1`.\r\n */\r\nclass QuickScore {\r\n\t/**\r\n\t * @param {Array<string|object>} [items] - The list of items to score.  If\r\n\t * the list is not a flat array of strings, a `keys` array must be supplied\r\n\t * via the second parameter.  The `items` array is not modified by QuickScore.\r\n\t *\r\n\t * @param {Array<string|object>|object} [options] - If the `items` parameter\r\n\t * is an array of flat strings, the `options` parameter can be left out.  If\r\n\t * it is a list of objects containing keys that should be scored, the\r\n\t * `options` parameter must either be an array of key names or an object\r\n\t * containing a `keys` property.\r\n\t *\r\n\t * @param {Array<string|string[]|{name: string, scorer: function}>} [options.keys] -\r\n\t * In the simplest case, an array of key names to score on the objects in\r\n\t * the `items` array.\r\n\t *\r\n\t * The key names can point to a nested key by passing either a dot-delimited\r\n\t * string or an array of sub-keys that specify the path to the value.  So a\r\n\t * key `name` of `"foo.bar"` would evaluate to `"baz"` given an object like\r\n\t * `{ foo: { bar: "baz" } }`.  Alternatively, that path could be passed as\r\n\t * an array, like `["foo", "bar"]`.  In either case, if this sub-key\'s match\r\n\t * produces the highest score for an item in the search results, its\r\n\t * `scoreKey` name will be `"foo.bar"`.\r\n\t *\r\n\t * If your items have keys that contain periods, e.g., `"first.name"`, but\r\n\t * you don\'t want these names to be treated as paths to nested keys, simply\r\n\t * wrap the name in an array, like `{ keys: ["ssn", ["first.name"],\r\n\t * ["last.name"]] }`.\r\n\t *\r\n\t * Instead of a string or string array, an item in `keys` can also be passed\r\n\t * as a `{name, scorer}` object, which lets you specify a different scoring\r\n\t * function for each key.  The scoring function should behave as described\r\n\t * next.\r\n\t *\r\n\t * @param {function(string, string, array?): number} [options.scorer] -\r\n\t * An optional function that takes `string` and `query` parameters and\r\n\t * returns a floating point number between 0 and 1 that represents how\r\n\t * well the `query` matches the `string`.  It defaults to the\r\n\t * [quickScore()]{@link quickScore} function in this library.\r\n\t *\r\n\t * If the function gets a third `matches` parameter, it should fill the\r\n\t * passed-in array with indexes corresponding to where the query\r\n\t * matches the string, as described in the [search()]{@link QuickScore#search}\r\n\t * method.\r\n\t *\r\n\t * @param {string} [options.sortKey=options.keys[0]] - An optional key name\r\n\t * that will be used to sort items with identical scores.  Defaults to the\r\n\t * name of the first item in the `keys` parameter.  If `sortKey` points to\r\n\t * a nested key, use a dot-delimited string instead of an array to specify\r\n\t * the path.\r\n\t *\r\n\t * @param {number} [options.minimumScore=0] - An optional value that\r\n\t * specifies the minimum score an item must have to appear in the results\r\n\t * array returned from [search()]{@link QuickScore#search}.  Defaults to `0`,\r\n\t * so items that don\'t match the full `query` will not be returned.  This\r\n\t * value is ignored if the `query` is empty or undefined, in which case all\r\n\t * items are returned, sorted alphabetically and case-insensitively on the\r\n\t * `sortKey`, if any.\r\n\t *\r\n\t * @param {function(string): string} [options.transformString] -\r\n\t * An optional function that takes a `string` parameter and returns a\r\n\t * transformed version of that string.  This function will be called on each\r\n\t * of the searchable keys in the `items` array as well as on the `query`\r\n\t * parameter to the `search()` method.  The default function calls\r\n\t * `toLocaleLowerCase()` on each string, for a case-insensitive search.  The\r\n\t * result of this function is cached for each searchable key on each item.\r\n\t *\r\n\t * You can pass a function here to do other kinds of preprocessing, such as\r\n\t * removing diacritics from all the strings or converting Chinese characters\r\n\t * to pinyin.  For example, you could use the\r\n\t * [`latinize`](https://www.npmjs.com/package/latinize) npm package to\r\n\t * convert characters with diacritics to the base character so that your\r\n\t * users can type an unaccented character in the query while still matching\r\n\t * items that have accents or diacritics.  Pass in an `options` object like\r\n\t * this to use a custom `transformString()` function:\r\n\t * `{ transformString: s => latinize(s.toLocaleLowerCase()) }`\r\n\t *\r\n\t * @param {object} [options.config] - An optional object that can be passed\r\n\t * to the scorer function to further customize it\'s behavior.  If the\r\n\t * `scorer` function has a `createConfig()` method on it, the `QuickScore`\r\n\t * instance will call that with the `config` value and store the result.\r\n\t * This can be used to extend the `config` parameter with default values.\r\n\t */\r\n\tconstructor(\r\n\t\titems = [],\r\n\t\toptions = {})\r\n\t{\r\n\t\tconst {\r\n\t\t\tscorer = quickScore,\r\n\t\t\ttransformString = toLocaleLowerCase,\r\n\t\t\tkeys = [],\r\n\t\t\tsortKey = "",\r\n\t\t\tminimumScore = 0,\r\n\t\t\tconfig\r\n\t\t} = Array.isArray(options)\r\n\t\t\t? { keys: options }\r\n\t\t\t: options;\r\n\r\n\t\tthis.scorer = scorer;\r\n\t\tthis.minimumScore = minimumScore;\r\n\t\tthis.config = config;\r\n\t\tthis.transformStringFunc = transformString;\r\n\r\n\t\tif (typeof scorer.createConfig === "function") {\r\n\t\t\t\t// let the scorer fill out the config with default values\r\n\t\t\tthis.config = scorer.createConfig(config);\r\n\t\t}\r\n\r\n\t\tthis.setKeys(keys, sortKey);\r\n\t\tthis.setItems(items);\r\n\r\n\t\t\t// the scoring function needs access to this.sortKey\r\n\t\tthis.compareScoredStrings = this.compareScoredStrings.bind(this);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Scores the instance\'s items against the `query` and sorts them from\r\n\t * highest to lowest.\r\n\t *\r\n\t * @param {string} query - The string to score each item against.  The\r\n\t * instance\'s `transformString()` function is called on this string before\r\n\t * it\'s matched against each item.\r\n\t *\r\n\t * @returns {Array<object>} When the instance\'s `items` are flat strings,\r\n\t * the result objects contain the following properties:\r\n\t *\r\n\t * - `item`: the string that was scored\r\n\t * - `score`: the floating point score of the string for the current query\r\n\t * - `matches`: an array of arrays that specifies the character ranges\r\n\t *   where the query matched the string\r\n\t *\r\n\t * When the `items` are objects, the result objects contain:\r\n\t *\r\n\t * - `item`: the object that was scored\r\n\t * - `score`: the highest score from among the individual key scores\r\n\t * - `scoreKey`: the name of the key with the highest score, which will be\r\n\t *   an empty string if they\'re all zero\r\n\t * - `scoreValue`: the value of the key with the highest score, which makes\r\n\t *   it easier to access if it\'s a nested string\r\n\t * - `scores`: a hash of the individual scores for each key\r\n\t * - `matches`: a hash of arrays that specify the character ranges of the\r\n\t *   query match for each key\r\n\t *\r\n\t * The results array is sorted high to low on each item\'s score.  Items with\r\n\t * identical scores are sorted alphabetically and case-insensitively on the\r\n\t * `sortKey` option.  Items with scores that are <= the `minimumScore` option\r\n\t * (defaults to `0`) are not returned, unless the `query` is falsy, in which\r\n\t * case all of the items are returned, sorted alphabetically.\r\n\t *\r\n\t * The arrays of start and end indices in the `matches` array can be used as\r\n\t * parameters to the `substring()` method to extract the characters from\r\n\t * each string that match the query.  This can then be used to format the\r\n\t * matching characters with a different color or style.\r\n\t *\r\n\t * Each result item also has a `_` property, which caches transformed\r\n\t * versions of the item\'s strings, and might contain additional internal\r\n\t * metadata in the future.  It can be ignored.\r\n\t */\r\n\tsearch(\r\n\t\tquery)\r\n\t{\r\n\t\tconst results = [];\r\n\t\tconst {items, transformedItems, keys: sharedKeys, config} = this;\r\n\t\t\t// if the query is empty, we want to return all items, so make the\r\n\t\t\t// minimum score less than 0\r\n\t\tconst minScore = query ? this.minimumScore : -1;\r\n\t\tconst transformedQuery = this.transformString(query);\r\n\t\tconst itemCount = items.length;\r\n\t\tconst sharedKeyCount = sharedKeys.length;\r\n\r\n\t\tif (typeof items[0] === "string") {\r\n\t\t\t\t// items is an array of strings\r\n\t\t\tfor (let i = 0; i < itemCount; i++) {\r\n\t\t\t\tconst item = items[i];\r\n\t\t\t\tconst transformedItem = transformedItems[i];\r\n\t\t\t\tconst matches = [];\r\n\t\t\t\tconst score = this.scorer(item, query, matches, transformedItem,\r\n\t\t\t\t\ttransformedQuery, config);\r\n\r\n\t\t\t\tif (score > minScore) {\r\n\t\t\t\t\tresults.push({\r\n\t\t\t\t\t\titem,\r\n\t\t\t\t\t\tscore,\r\n\t\t\t\t\t\tmatches,\r\n\t\t\t\t\t\t_: transformedItem\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < itemCount; i++) {\r\n\t\t\t\tconst item = items[i];\r\n\t\t\t\tconst transformedItem = transformedItems[i];\r\n\t\t\t\tconst result = {\r\n\t\t\t\t\titem,\r\n\t\t\t\t\tscore: 0,\r\n\t\t\t\t\tscoreKey: "",\r\n\t\t\t\t\tscoreValue: "",\r\n\t\t\t\t\tscores: {},\r\n\t\t\t\t\tmatches: {},\r\n\t\t\t\t\t_: transformedItem\r\n\t\t\t\t};\r\n\t\t\t\t\t// if an empty keys array was passed into the constructor,\r\n\t\t\t\t\t// score all of the non-empty string keys on the object\r\n\t\t\t\tconst keys = sharedKeyCount ? sharedKeys : Object.keys(transformedItem);\r\n\t\t\t\tconst keyCount = keys.length;\r\n\t\t\t\tlet highScore = 0;\r\n\t\t\t\tlet scoreKey = "";\r\n\t\t\t\tlet scoreValue = "";\r\n\r\n\t\t\t\t\t// find the highest score for each keyed string on this item\r\n\t\t\t\tfor (let j = 0; j < keyCount; j++) {\r\n\t\t\t\t\tconst key = keys[j];\r\n\t\t\t\t\t\t// use the key as the name if it\'s just a string, and\r\n\t\t\t\t\t\t// default to the instance\'s scorer function\r\n\t\t\t\t\tconst {name = key, scorer = this.scorer} = key;\r\n\t\t\t\t\tconst transformedString = transformedItem[name];\r\n\r\n\t\t\t\t\t\t// setItems() checks for non-strings and empty strings\r\n\t\t\t\t\t\t// when creating the transformed objects, so if the key\r\n\t\t\t\t\t\t// doesn\'t exist there, we can skip the processing\r\n\t\t\t\t\t\t// below for this key in this item\r\n\t\t\t\t\tif (transformedString) {\r\n\t\t\t\t\t\tconst string = this.getItemString(item, key);\r\n\t\t\t\t\t\tconst matches = [];\r\n\t\t\t\t\t\tconst newScore = scorer(string, query, matches,\r\n\t\t\t\t\t\t\ttransformedString, transformedQuery, config);\r\n\r\n\t\t\t\t\t\tresult.scores[name] = newScore;\r\n\t\t\t\t\t\tresult.matches[name] = matches;\r\n\r\n\t\t\t\t\t\tif (newScore > highScore) {\r\n\t\t\t\t\t\t\thighScore = newScore;\r\n\t\t\t\t\t\t\tscoreKey = name;\r\n\t\t\t\t\t\t\tscoreValue = string;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (highScore > minScore) {\r\n\t\t\t\t\tresult.score = highScore;\r\n\t\t\t\t\tresult.scoreKey = scoreKey;\r\n\t\t\t\t\tresult.scoreValue = scoreValue;\r\n\t\t\t\t\tresults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresults.sort(this.compareScoredStrings);\r\n\r\n\t\treturn results;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets the `keys` configuration.  `setItems()` must be called after changing\r\n\t * the keys so that the items\' transformed strings get cached.\r\n\t *\r\n\t * @param {Array<string> | Array<object>} keys - List of keys to score, as\r\n\t * either strings or `{name, scorer}` objects.\r\n\t *\r\n\t * @param {string} [sortKey=keys[0]] - Name of key on which to sort\r\n\t * identically scored items.  Defaults to the first `keys` item.\r\n\t */\r\n\tsetKeys(\r\n\t\tkeys,\r\n\t\tsortKey = "")\r\n\t{\r\n\t\tthis.keys = [].concat(keys);\r\n\t\tthis.sortKey = sortKey;\r\n\r\n\t\tif (this.keys.length) {\r\n\t\t\tconst {scorer} = this;\r\n\r\n\t\t\t\t// associate each key with the scorer function, if it isn\'t already\r\n\t\t\tthis.keys = this.keys.map(keyItem => {\r\n\t\t\t\t\t// items in the keys array should either be a string or\r\n\t\t\t\t\t// array specifying a key name, or a { name, scorer } object\r\n\t\t\t\tconst key = keyItem.length\r\n\t\t\t\t\t? { name: keyItem, scorer }\r\n\t\t\t\t\t: keyItem;\r\n\r\n\t\t\t\tif (Array.isArray(key.name)) {\r\n\t\t\t\t\tif (key.name.length > 1) {\r\n\t\t\t\t\t\tkey.path = key.name;\r\n\t\t\t\t\t\tkey.name = key.path.join(".");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// this path consists of just one key name, which was\r\n\t\t\t\t\t\t\t// probably wrapped in an array because it contains\r\n\t\t\t\t\t\t\t// dots but isn\'t intended as a key path.  so don\'t\r\n\t\t\t\t\t\t\t// create a path array on this key, so that we\'re not\r\n\t\t\t\t\t\t\t// constantly calling reduce() to get this one key.\r\n\t\t\t\t\t\t[key.name] = key.name;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (key.name.indexOf(".") > -1) {\r\n\t\t\t\t\tkey.path = key.name.split(".");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn key;\r\n\t\t\t});\r\n\r\n\t\t\tthis.sortKey = this.sortKey || this.keys[0].name;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets the `items` array and caches a transformed copy of all the item\r\n\t * strings specified by the `keys` parameter to the constructor, using the\r\n\t * `transformString` option (which defaults to `toLocaleLowerCase()`).\r\n\t *\r\n\t * @param {Array<string> | Array<object>} items - List of items to score.\r\n\t */\r\n\tsetItems(\r\n\t\titems)\r\n\t{\r\n\t\tconst itemArray = [].concat(items);\r\n\t\tconst itemCount = itemArray.length;\r\n\t\tconst transformedItems = [];\r\n\t\tconst sharedKeys = this.keys;\r\n\t\tconst sharedKeyCount = sharedKeys.length;\r\n\r\n\t\tif (typeof itemArray[0] === "string") {\r\n\t\t\tfor (let i = 0; i < itemCount; i++) {\r\n\t\t\t\ttransformedItems.push(this.transformString(itemArray[i]));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = 0; i < itemCount; i++) {\r\n\t\t\t\tconst item = itemArray[i];\r\n\t\t\t\tconst transformedItem = {};\r\n\t\t\t\tconst keys = sharedKeyCount ? sharedKeys : Object.keys(item);\r\n\t\t\t\tconst keyCount = keys.length;\r\n\r\n\t\t\t\tfor (let j = 0; j < keyCount; j++) {\r\n\t\t\t\t\tconst key = keys[j];\r\n\t\t\t\t\tconst string = this.getItemString(item, key);\r\n\r\n\t\t\t\t\tif (string && typeof string === "string") {\r\n\t\t\t\t\t\ttransformedItem[key.name || key] =\r\n\t\t\t\t\t\t\tthis.transformString(string);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttransformedItems.push(transformedItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.items = itemArray;\r\n\t\tthis.transformedItems = transformedItems;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Gets an item\'s key, possibly at a nested path.\r\n\t *\r\n\t * @private\r\n\t * @param {object} item - An object with multiple string properties.\r\n\t * @param {object|string} key - A key object with\r\n\t * the name of the string to get from `item`, or a plain string when all\r\n\t * keys on an item are being matched.\r\n\t * @returns {string}\r\n\t */\r\n\tgetItemString(\r\n\t\titem,\r\n\t\tkey)\r\n\t{\r\n\t\tconst {name, path} = key;\r\n\r\n\t\tif (path) {\r\n\t\t\treturn path.reduce((value, prop) => value && value[prop], item);\r\n\t\t} else {\r\n\t\t\t\t// if this instance is scoring all the keys on each item, key\r\n\t\t\t\t// will just be a string, not a { name, scorer } object\r\n\t\t\treturn item[name || key];\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Transforms a string into a canonical form for scoring.\r\n\t *\r\n\t * @private\r\n\t * @param {string} string - The string to transform.\r\n\t * @returns {string}\r\n\t */\r\n\ttransformString(\r\n\t\tstring)\r\n\t{\r\n\t\treturn this.transformStringFunc(string);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Compares two items based on their scores, or on their `sortKey` if the\r\n\t * scores are identical.\r\n\t *\r\n\t * @private\r\n\t * @param {object} a - First item.\r\n\t * @param {object} b - Second item.\r\n\t * @returns {number}\r\n\t */\r\n\tcompareScoredStrings(\r\n\t\ta,\r\n\t\tb)\r\n\t{\r\n\t\t\t// use the transformed versions of the strings for sorting\r\n\t\tconst itemA = a._;\r\n\t\tconst itemB = b._;\r\n\t\tconst itemAString = typeof itemA === "string"\r\n\t\t\t? itemA\r\n\t\t\t: itemA[this.sortKey];\r\n\t\tconst itemBString = typeof itemB === "string"\r\n\t\t\t? itemB\r\n\t\t\t: itemB[this.sortKey];\r\n\r\n\t\tif (a.score === b.score) {\r\n\t\t\t\t// sort undefineds to the end of the array, as per the ES spec\r\n\t\t\tif (itemAString === undefined || itemBString === undefined) {\r\n\t\t\t\tif (itemAString === undefined && itemBString === undefined) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else if (itemAString === undefined) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t} else if (itemAString === itemBString) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else if (itemAString < itemBString) {\r\n\t\t\t\treturn -1;\r\n\t\t\t} else {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn b.score - a.score;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Default function for transforming each string to be searched.\r\n *\r\n * @private\r\n * @param {string} string - The string to transform.\r\n * @returns {string} The transformed string.\r\n */\r\nfunction toLocaleLowerCase(\r\n\tstring)\r\n{\r\n\treturn string.toLocaleLowerCase();\r\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/fuse.js/dist/fuse.esm.js\n/**\n * Fuse.js v6.5.3 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === \'[object Array]\'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == \'string\') {\n    return value\n  }\n  let result = value + \'\';\n  return result == \'0\' && 1 / value == -INFINITY ? \'-0\' : result\n}\n\nfunction fuse_esm_toString(value) {\n  return value == null ? \'\' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === \'string\'\n}\n\nfunction isNumber(value) {\n  return typeof value === \'number\'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == \'[object Boolean]\')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === \'object\'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? \'[object Undefined]\'\n      : \'[object Null]\'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = \'Extended search is not available\';\n\nconst INCORRECT_INDEX_TYPE = "Incorrect \'index\' type";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property \'weight\' in key \'${key}\' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, \'name\')) {\n      throw new Error(MISSING_KEY_PROPERTY(\'name\'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, \'weight\')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split(\'.\')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join(\'.\') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there\'s no path left, we\'ve arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we\'re at the last value in the path, and if it\'s a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(fuse_esm_toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split(\'.\') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of \'0.0\' requires a perfect match\n  // (of both letters and location), a threshold of \'1.0\' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is \'distance\' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of \'0\' requires the match be at\n  // the exact location specified, a threshold of \'1000\' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object\'s properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won\'t matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar fuse_esm_Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = fuse_esm_Config.getFn,\n    fieldNormWeight = fuse_esm_Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = fuse_esm_Config.getFn, fieldNormWeight = fuse_esm_Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = fuse_esm_Config.getFn, fieldNormWeight = fuse_esm_Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = fuse_esm_Config.distance,\n    ignoreLocation = fuse_esm_Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = fuse_esm_Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction fuse_esm_search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = fuse_esm_Config.location,\n    distance = fuse_esm_Config.distance,\n    threshold = fuse_esm_Config.threshold,\n    findAllMatches = fuse_esm_Config.findAllMatches,\n    minMatchCharLength = fuse_esm_Config.minMatchCharLength,\n    includeMatches = fuse_esm_Config.includeMatches,\n    ignoreLocation = fuse_esm_Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don\'t exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be "almost" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = fuse_esm_Config.location,\n      threshold = fuse_esm_Config.threshold,\n      distance = fuse_esm_Config.distance,\n      includeMatches = fuse_esm_Config.includeMatches,\n      findAllMatches = fuse_esm_Config.findAllMatches,\n      minMatchCharLength = fuse_esm_Config.minMatchCharLength,\n      isCaseSensitive = fuse_esm_Config.isCaseSensitive,\n      ignoreLocation = fuse_esm_Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = fuse_esm_search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: \'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'exact\'\n  }\n  static get multiRegex() {\n    return /^="(.*)"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'inverse-exact\'\n  }\n  static get multiRegex() {\n    return /^!"(.*)"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'prefix-exact\'\n  }\n  static get multiRegex() {\n    return /^\\^"(.*)"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'inverse-prefix-exact\'\n  }\n  static get multiRegex() {\n    return /^!\\^"(.*)"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'suffix-exact\'\n  }\n  static get multiRegex() {\n    return /^"(.*)"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'inverse-suffix-exact\'\n  }\n  static get multiRegex() {\n    return /^!"(.*)"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = fuse_esm_Config.location,\n      threshold = fuse_esm_Config.threshold,\n      distance = fuse_esm_Config.distance,\n      includeMatches = fuse_esm_Config.includeMatches,\n      findAllMatches = fuse_esm_Config.findAllMatches,\n      minMatchCharLength = fuse_esm_Config.minMatchCharLength,\n      isCaseSensitive = fuse_esm_Config.isCaseSensitive,\n      ignoreLocation = fuse_esm_Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return \'fuzzy\'\n  }\n  static get multiRegex() {\n    return /^"(.*)"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: \'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return \'include\'\n  }\n  static get multiRegex() {\n    return /^\'"(.*)"$/\n  }\n  static get singleRegex() {\n    return /^\'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\"]*\\"[^\\"]*\\")*[^\\"]*$)/;\nconst OR_TOKEN = \'|\';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// "^core go$ | rb$ | py$ xy$" => [["^core", "go$"], ["rb$"], ["py$", "xy$"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `"hello world"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `\'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = fuse_esm_Config.isCaseSensitive,\n      includeMatches = fuse_esm_Config.includeMatches,\n      minMatchCharLength = fuse_esm_Config.minMatchCharLength,\n      ignoreLocation = fuse_esm_Config.ignoreLocation,\n      findAllMatches = fuse_esm_Config.findAllMatches,\n      location = fuse_esm_Config.location,\n      threshold = fuse_esm_Config.threshold,\n      distance = fuse_esm_Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: \'$and\',\n  OR: \'$or\'\n};\n\nconst KeyType = {\n  PATH: \'$path\',\n  PATTERN: \'$val\'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = fuse_esm_Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = fuse_esm_Config.includeMatches,\n    includeScore = fuse_esm_Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...fuse_esm_Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {}\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = \'6.5.3\';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = fuse_esm_Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\n\n\n// EXTERNAL MODULE: ./node_modules/liquidmetal/liquidmetal.js\nvar liquidmetal = __webpack_require__(820);\nvar liquidmetal_default = /*#__PURE__*/__webpack_require__.n(liquidmetal);\n// EXTERNAL MODULE: ./node_modules/fuzzysort/fuzzysort.js\nvar fuzzysort = __webpack_require__(360);\nvar fuzzysort_default = /*#__PURE__*/__webpack_require__.n(fuzzysort);\n;// CONCATENATED MODULE: ./src/scorers/FuzzySort.js\n\nconst DefaultOptions = {\n  allowTypo: false\n};\nclass FuzzySort {\n  constructor(items, options = {}) {\n    this.items = items;\n    this.options = Object.assign({}, DefaultOptions, options);\n  }\n\n  search(query) {\n    return fuzzysort_default().go(query, this.items, this.options);\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/remove-accents/index.js\nvar remove_accents = __webpack_require__(826);\nvar remove_accents_default = /*#__PURE__*/__webpack_require__.n(remove_accents);\n;// CONCATENATED MODULE: ./node_modules/match-sorter/dist/match-sorter.esm.js\n\n\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n\nvar defaultBaseSortFn = function defaultBaseSortFn(a, b) {\n  return String(a.rankedValue).localeCompare(String(b.rankedValue));\n};\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\n\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      keys = _options.keys,\n      _options$threshold = _options.threshold,\n      threshold = _options$threshold === void 0 ? rankings.MATCHES : _options$threshold,\n      _options$baseSort = _options.baseSort,\n      baseSort = _options$baseSort === void 0 ? defaultBaseSortFn : _options$baseSort,\n      _options$sorter = _options.sorter,\n      sorter = _options$sorter === void 0 ? function (matchedItems) {\n    return matchedItems.sort(function (a, b) {\n      return sortRankedValues(a, b, baseSort);\n    });\n  } : _options$sorter;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var rankingInfo = getHighestRanking(item, keys, value, options);\n    var rank = rankingInfo.rank,\n        _rankingInfo$keyThres = rankingInfo.keyThreshold,\n        keyThreshold = _rankingInfo$keyThres === void 0 ? threshold : _rankingInfo$keyThres;\n\n    if (rank >= keyThreshold) {\n      matches.push(extends_extends({}, rankingInfo, {\n        item: item,\n        index: index\n      }));\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    var stringItem = item;\n    return {\n      // ends up being duplicate of \'item\' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        rankedValue = _ref2.rankedValue,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var newRankedValue = rankedValue;\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n\n    return {\n      rankedValue: newRankedValue,\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lower casing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.includes(" " + stringToRank)) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn\'t even contained in the testString, then\n    //   it\'s definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = \'\';\n  var wordsInString = string.split(\' \');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split(\'-\');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var matchingInOrderCharCount = 0;\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index, J = string.length; j < J; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var spreadPercentage = 1 / spread;\n    var inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    var ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1, I = stringToRank.length; i < I; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\n\n\nfunction sortRankedValues(a, b, baseSort) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  // value might not actually be a string at this point (we don\'t get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = "" + value; // toString\n\n  if (!keepDiacritics) {\n    value = remove_accents_default()(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if (typeof key === \'object\') {\n    key = key.key;\n  }\n\n  var value;\n\n  if (typeof key === \'function\') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes(\'.\')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  } // because `value` can also be undefined\n\n\n  if (value == null) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return [String(value)];\n}\n/**\n * Given path: "foo.bar.baz"\n * And item: {foo: {bar: {baz: \'buzz\'}}}\n *   -> \'buzz\'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\n\n\nfunction getNestedValues(path, item) {\n  var keys = path.split(\'.\');\n  var values = [item];\n\n  for (var i = 0, I = keys.length; i < I; i++) {\n    var nestedKey = keys[i];\n    var nestedValues = [];\n\n    for (var j = 0, J = values.length; j < J; j++) {\n      var nestedItem = values[j];\n      if (nestedItem == null) continue;\n\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        var nestedValue = nestedItem[nestedKey];\n\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === \'*\') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n\n    values = nestedValues;\n  }\n\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don\'t use `.flat()` because that\'s not available in node.js v10\n    var result = [];\n    return result.concat.apply(result, values);\n  } // Based on our logic it should be an array of strings by now...\n  // assuming the user\'s path terminated in strings\n\n\n  return values;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  var allValues = [];\n\n  for (var j = 0, J = keys.length; j < J; j++) {\n    var key = keys[j];\n    var attributes = getKeyAttributes(key);\n    var itemValues = getItemValues(item, key);\n\n    for (var i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes: attributes\n      });\n    }\n  }\n\n  return allValues;\n}\n\nvar defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key\'s attributes\n */\n\nfunction getKeyAttributes(key) {\n  if (typeof key === \'string\') {\n    return defaultKeyAttributes;\n  }\n\n  return extends_extends({}, defaultKeyAttributes, key);\n}\n/*\neslint\n  no-continue: "off",\n*/\n\n\n\n;// CONCATENATED MODULE: ./src/scorers/MatchSorter.js\n\nclass MatchSorter {\n  constructor(items, options = {}) {\n    this.items = items;\n    this.options = options;\n  }\n\n  search(query) {\n    return matchSorter(this.items, query, this.options);\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/@sindresorhus/fnv1a/index.js\nvar fnv1a = __webpack_require__(96);\nvar fnv1a_default = /*#__PURE__*/__webpack_require__.n(fnv1a);\n;// CONCATENATED MODULE: ./src/data/bookmarks-data.js\n/* harmony default export */ const bookmarks_data = ([{\n  "title": "24 ways Flickr Photos On Demand with getFlickr",\n  "url": "https://24ways.org/2006/flickr-photos-on-demand"\n}, {\n  "title": "Amberjack",\n  "url": "https://amberjack.org/"\n}, {\n  "title": "DD_belatedPNG better PNG background-image support in IE6",\n  "url": "https://www.dillerdesign.com/experiment/DD_belatedPNG/"\n}, {\n  "title": "DD_roundies Another (better) round-corner HTML box concept",\n  "url": "https://dillerdesign.com/experiment/DD_roundies/"\n}, {\n  "title": "DEfusion.org.uk » JavaScript Image Cropper UI, using Prototype & script.aculo.us",\n  "url": "https://www.defusion.org.uk/code/javascript-image-cropper-ui-using-prototype-scriptaculous/"\n}, {\n  "title": "Date Parsing [Universal Feed Parser]",\n  "url": "https://feedparser.org/docs/date-parsing.html"\n}, {\n  "title": "Dav Glass YUI",\n  "url": "https://blog.davglass.com/files/yui/docs/"\n}, {\n  "title": "Django The Web framework for perfectionists with deadlines",\n  "url": "https://www.djangoproject.com/"\n}, {\n  "title": "Enumerating JavaScript Objects",\n  "url": "https://dean.edwards.name/weblog/2006/07/enum/"\n}, {\n  "title": "Fleegix.js JavaScript Toolkit",\n  "url": "https://js.fleegix.org/?ref"\n}, {\n  "title": "Google Map Parameters - Google Mapki",\n  "url": "https://mapki.com/wiki/Google_Map_Parameters"\n}, {\n  "title": "IE PNG Fix - TwinHelix",\n  "url": "https://www.twinhelix.com/css/iepngfix/"\n}, {\n  "title": "JSL JavaScript Standard Library",\n  "url": "https://www.devpro.it/JSL/"\n}, {\n  "title": "JSONRequest",\n  "url": "https://json.org/JSONRequest.html"\n}, {\n  "title": "Jack Slocum\'s Blog » Adding built-in editing support to the Yahoo! UI Extensions Grid",\n  "url": "https://www.jackslocum.com/yui/2006/09/10/adding-built-in-editing-support-to-the-yahoo-ui-extensions-grid/"\n}, {\n  "title": "Javascript Toolbox Reusable Libraries And Scripts Plus Information",\n  "url": "https://www.javascripttoolbox.com/"\n}, {\n  "title": "Javascript date parsing and formatting, Part 2 - Xaprb",\n  "url": "https://www.xaprb.com/blog/2005/12/20/javascript-date-parsing/"\n}, {\n  "title": "JsonT - Transforming Json",\n  "url": "https://goessner.net/articles/jsont/"\n}, {\n  "title": "Merlyn - Time Miscellany - J R Stockton",\n  "url": "https://www.merlyn.demon.co.uk/misctime.htm"\n}, {\n  "title": "Minikit",\n  "url": "https://candyscript.com/projects/minikit/"\n}, {\n  "title": "NextApp . Welcome",\n  "url": "https://www.nextapp.com/"\n}, {\n  "title": "PhoneGap Bridging the iPhone GAP",\n  "url": "https://phonegap.com/?__vid__=Y29sbGVjdGlvblR5cGU9YWxpYXMBY29sbGVjdGlvbklEPXNjaHZlbmsBc291cmNlPXkuZGVsaWNpb3VzAWNsYXNzPWJvb2ttYXJrAXR5cGU9Ym9va21hcmsBc3VpZD1kNzE2ZGNmNWNmMTBlY2VjNjc5OGQxN2IxOTIzYTU4MA--"\n}, {\n  "title": "Protoscript - Home",\n  "url": "https://protoscript.com/"\n}, {\n  "title": "SIMILE Exhibit 2.0",\n  "url": "https://simile.mit.edu/exhibit/"\n}, {\n  "title": "SIMILE Timeline",\n  "url": "https://simile.mit.edu/timeline/"\n}, {\n  "title": "SoundManager 2 Javascript Sound for the Web",\n  "url": "https://www.schillmania.com/projects/soundmanager2/"\n}, {\n  "title": "Sun Labs Lively Kernel",\n  "url": "https://research.sun.com/projects/lively/"\n}, {\n  "title": "The Decorator Pattern for JavaScript",\n  "url": "https://beppu.lbox.org/articles/2006/08/22/the-decorator-pattern-for-javascript"\n}, {\n  "title": "TrimJunctionCommunity - trimpath - Google Code",\n  "url": "https://code.google.com/p/trimpath/wiki/TrimJunctionCommunity"\n}, {\n  "title": "Truncate A jQuery Plugin",\n  "url": "https://www.reindel.com/truncate/"\n}, {\n  "title": "Windows Media Object Model Reference for Scripting",\n  "url": "https://msdn2.microsoft.com/en-us/library/aa392281.aspx"\n}, {\n  "title": "YUI Loader Script",\n  "url": "https://blog.davglass.com/files/yui/loader/"\n}, {\n  "title": "YouTube Chromeless Player Reference - YouTube APIs and Tools - Google Code",\n  "url": "https://code.google.com/apis/youtube/chromeless_player_reference.html"\n}, {\n  "title": "[haXe.org]",\n  "url": "https://haxe.org/intro"\n}, {\n  "title": "actsAsAspect()",\n  "url": "https://beppu.lbox.org/articles/2006/09/06/actsasaspect"\n}, {\n  "title": "http--www.odessa.net-docs-javascr-DOSFILES-COLORS-CSET.HTM",\n  "url": "https://www.odessa.net/docs/javascr/DOSFILES/COLORS/CSET.HTM"\n}, {\n  "title": "jQuery Sparklines",\n  "url": "https://www.omnipotent.net/jquery.sparkline/?__vid__=Y29sbGVjdGlvblR5cGU9YWxpYXMBY29sbGVjdGlvbklEPWNhbnRvbmliAXNvdXJjZT15LmRlbGljaW91cwFjbGFzcz1ib29rbWFyawF0eXBlPWJvb2ttYXJrAXN1aWQ9ZTZkODhhYzc3NDg5ZDA3YTY5Y2QxOWFkMmZiZmNhMWY-"\n}, {\n  "title": "jsonxml",\n  "url": "https://goessner.net/download/prj/jsonxml/"\n}, {\n  "title": "jspax documentations",\n  "url": "https://www.jspax.org/"\n}, {\n  "title": "moo.fx - size does matter",\n  "url": "https://moofx.mad4milk.net/"\n}, {\n  "title": "oEmbed",\n  "url": "https://www.oembed.com/"\n}, {\n  "title": "qooxdoo » Home",\n  "url": "https://qooxdoo.org/"\n}, {\n  "title": "strftime strftime for Javascript",\n  "url": "https://hacks.bluesmoon.info/strftime/"\n}, {\n  "title": "Online Documentation",\n  "url": "https://www.jackslocum.com/docs/"\n}, {\n  "title": "bartaz/impress.js - GitHub",\n  "url": "https://github.com/bartaz/impress.js"\n}, {\n  "title": "Xmarks Features: Overview",\n  "url": "https://www.xmarks.com/about/features/overview"\n}, {\n  "title": "Bootstrap, from Twitter",\n  "url": "https://twitter.github.com/bootstrap/"\n}, {\n  "title": "slimbox - The ultimate lightweight Lightbox clone - Google Project Hosting",\n  "url": "https://code.google.com/p/slimbox/"\n}, {\n  "title": "blur.js",\n  "url": "https://www.blurjs.com/"\n}, {\n  "title": "Foundation: Rapid Prototyping and Building Framework from ZURB",\n  "url": "https://foundation.zurb.com/docs/index.php"\n}, {\n  "title": "canvg - Javascript SVG parser and renderer on Canvas - Google Project Hosting",\n  "url": "https://code.google.com/p/canvg/"\n}, {\n  "title": "kangax/fabric.js",\n  "url": "https://github.com/kangax/fabric.js"\n}, {\n  "title": "Moment.js - A lightweight javascript date library",\n  "url": "https://momentjs.com/"\n}, {\n  "title": "Esprima",\n  "url": "https://esprima.org/"\n}, {\n  "title": "Constellation/escodegen · GitHub",\n  "url": "https://github.com/Constellation/escodegen"\n}, {\n  "title": "log4javascript - a JavaScript logging framework",\n  "url": "https://log4javascript.org/"\n}, {\n  "title": "dgrid - A New Dojo grid created by SitePen",\n  "url": "https://dojofoundation.org/packages/dgrid/"\n}, {\n  "title": "FuseJS JavaScript Framework",\n  "url": "https://fusejs.com/"\n}, {\n  "title": "bestiejs/maddy",\n  "url": "https://github.com/bestiejs/maddy"\n}, {\n  "title": "GLUEscript | Glueing Libraries Using EcmaScript",\n  "url": "https://gluescript.sourceforge.net/"\n}, {\n  "title": "object.watch polyfill — Gist",\n  "url": "https://gist.github.com/384583"\n}, {\n  "title": "eriwen/javascript-stacktrace",\n  "url": "https://github.com/eriwen/javascript-stacktrace"\n}, {\n  "title": "Vows « Asynchronous BDD for Node",\n  "url": "https://vowsjs.org/"\n}, {\n  "title": "Jasmine: BDD for your JavaScript",\n  "url": "https://pivotal.github.com/jasmine/"\n}, {\n  "title": "JSON-js/json2.js at master · douglascrockford/JSON-js · GitHub",\n  "url": "https://github.com/douglascrockford/JSON-js/blob/master/json2.js"\n}, {\n  "title": "Underscore.string",\n  "url": "https://epeli.github.com/underscore.string/"\n}, {\n  "title": "PEG.js – Parser Generator for JavaScript",\n  "url": "https://pegjs.majda.cz/"\n}, {\n  "title": "Brunch",\n  "url": "https://brunch.io/"\n}, {\n  "title": "chaplinjs/chaplin",\n  "url": "https://github.com/chaplinjs/chaplin"\n}, {\n  "title": "joshaven/string_score",\n  "url": "https://github.com/joshaven/string_score"\n}, {\n  "title": "requestAnimationFrame for smart animating « Paul Irish",\n  "url": "https://paulirish.com/2011/requestanimationframe-for-smart-animating/"\n}, {\n  "title": "Backbone UI",\n  "url": "https://perka.github.com/backbone-ui/"\n}, {\n  "title": "REST API - Evri",\n  "url": "https://www.evri.com/developer/rest"\n}, {\n  "title": "Redactor WYSIWYG editor on jQuery",\n  "url": "https://redactorjs.com/"\n}, {\n  "title": "Wirefy | The Responsive Wireframe Boilerplate",\n  "url": "https://cjdsie.github.com/wirefy/"\n}, {\n  "title": "TaffyDB - The JavaScript Database",\n  "url": "https://www.taffydb.com/"\n}, {\n  "title": "slightlyoff/cassowary-js-refactor",\n  "url": "https://github.com/slightlyoff/cassowary-js-refactor"\n}, {\n  "title": "AppJS",\n  "url": "https://appjs.org/"\n}, {\n  "title": "IndexedDB Polyfill",\n  "url": "https://nparashuram.com/IndexedDBShim/"\n}, {\n  "title": "Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012) - Steve Sanderson’s blog - As seen on YouTube™",\n  "url": "https://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/"\n}, {\n  "title": "AngularJS — Superheroic JavaScript MVW Framework",\n  "url": "https://angularjs.org/"\n}, {\n  "title": "Meteor",\n  "url": "https://www.meteor.com/main"\n}, {\n  "title": "JSCSSP, a CSS parser in JavaScript",\n  "url": "https://www.glazman.org/JSCSSP/"\n}, {\n  "title": "NV/CSSOM",\n  "url": "https://github.com/NV/CSSOM"\n}, {\n  "title": "Jison / Demos",\n  "url": "https://zaach.github.com/jison/demos/"\n}, {\n  "title": "jQuery Zoom",\n  "url": "https://www.jacklmoore.com/zoom"\n}, {\n  "title": "lukaszkorecki/RequestPack",\n  "url": "https://github.com/lukaszkorecki/RequestPack"\n}, {\n  "title": "Jade - Template Engine",\n  "url": "https://jade-lang.com/"\n}, {\n  "title": "evilstreak/markdown-js · GitHub",\n  "url": "https://github.com/evilstreak/markdown-js"\n}, {\n  "title": "Magnific Popup: Responsive jQuery Lightbox Plugin",\n  "url": "https://dimsemenov.com/plugins/magnific-popup/?utm_source=twitter&utm_medium=twitter"\n}, {\n  "title": "Home · kripken/emscripten Wiki · GitHub",\n  "url": "https://github.com/kripken/emscripten/wiki"\n}, {\n  "title": "Adobe® Edge Inspect Getting Started Guide",\n  "url": "chrome-extension://ijoeapleklopieoejahbpdnhkjjgddem/firstrun.html"\n}, {\n  "title": "Two.js",\n  "url": "https://jonobr1.github.io/two.js/"\n}, {\n  "title": "Ratchet",\n  "url": "https://maker.github.io/ratchet/"\n}, {\n  "title": "D3.js - Data-Driven Documents",\n  "url": "https://d3js.org/"\n}, {\n  "title": "ashima/webgl-noise",\n  "url": "https://github.com/ashima/webgl-noise"\n}, {\n  "title": "ashima/webgl-noise",\n  "url": "https://github.com/ashima/webgl-noise/"\n}, {\n  "title": "Experiments with Perlin noise - Blog - Clicktorelease",\n  "url": "https://www.clicktorelease.com/blog/experiments-with-perlin-noise"\n}, {\n  "title": "lunr.js - A bit like Solr, but much smaller and not as bright",\n  "url": "https://lunrjs.com/"\n}, {\n  "title": "Faster UI Animations With Velocity.js | Smashing Magazine",\n  "url": "https://www.smashingmagazine.com/2014/06/18/faster-ui-animations-with-velocity-js/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "PhysicsJS - A modular, extendable, and easy-to-use physics engine for javascript",\n  "url": "https://wellcaffeinated.net/PhysicsJS/"\n}, {\n  "title": "Papa Parse - Powerful CSV parser for Javascript",\n  "url": "https://papaparse.com/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Machina.js - Finite State Machines in JavaScript",\n  "url": "https://machina-js.org/"\n}, {\n  "title": "hello.js - Javascript API for OAuth2 authentication and REST services",\n  "url": "https://adodson.com/hello.js/?utm_source=javascriptweekly&utm_medium=email#core-methods"\n}, {\n  "title": "trueinteractions/tint2 · GitHub",\n  "url": "https://github.com/trueinteractions/tint2?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "☆ sweep.js ☆",\n  "url": "https://rileyjshaw.com/sweep/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "mortzdk/localStorage · GitHub",\n  "url": "https://github.com/mortzdk/localStorage/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "aehlke/tag-it · GitHub",\n  "url": "https://github.com/aehlke/tag-it"\n}, {\n  "title": "jxnblk/fitter-happier-text",\n  "url": "https://github.com/jxnblk/fitter-happier-text"\n}, {\n  "title": "andreaferretti/paths-js",\n  "url": "https://github.com/andreaferretti/paths-js"\n}, {\n  "title": "gifshot - JavaScript library that can create animated GIFs from media streams, videos, or images",\n  "url": "https://yahoo.github.io/gifshot/"\n}, {\n  "title": "Nunjucks",\n  "url": "https://mozilla.github.io/nunjucks/"\n}, {\n  "title": "cthackers/adm-zip",\n  "url": "https://github.com/cthackers/adm-zip"\n}, {\n  "title": "FormatJS",\n  "url": "https://formatjs.io/"\n}, {\n  "title": "nodejitsu/forever",\n  "url": "https://github.com/nodejitsu/forever"\n}, {\n  "title": "JMPerez/spotify-web-api-js",\n  "url": "https://github.com/jmperez/spotify-web-api-js"\n}, {\n  "title": "Firebase - Build Realtime Apps",\n  "url": "https://www.firebase.com/"\n}, {\n  "title": "adobe-webplatform/dropcap.js",\n  "url": "https://github.com/adobe-webplatform/dropcap.js?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "rackt/react-router",\n  "url": "https://github.com/rackt/react-router"\n}, {\n  "title": "Page.js by visionmedia",\n  "url": "https://visionmedia.github.io/page.js/"\n}, {\n  "title": "flatiron/cradle",\n  "url": "https://github.com/flatiron/cradle"\n}, {\n  "title": "Fuse.js | K. Risk - JavaScript Refined",\n  "url": "https://kiro.me/projects/fuse.html"\n}, {\n  "title": "rmm5t/liquidmetal",\n  "url": "https://github.com/rmm5t/liquidmetal"\n}, {\n  "title": "willlma/fuzzyset.js",\n  "url": "https://github.com/willlma/fuzzyset.js"\n}, {\n  "title": "zdyn/jaro-winkler-js",\n  "url": "https://github.com/zdyn/jaro-winkler-js"\n}, {\n  "title": "Web Services v2 Documentation | Climate Data Online (CDO) | National Climatic Data Center (NCDC)",\n  "url": "https://www.ncdc.noaa.gov/cdo-web/webservices/v2#gettingStarted"\n}, {\n  "title": "API | Weather Underground",\n  "url": "https://www.wunderground.com/weather/api/d/pricing.html"\n}, {\n  "title": "API Guide | restify",\n  "url": "https://mcavage.me/node-restify/"\n}, {\n  "title": "seatgeek/react-infinite",\n  "url": "https://github.com/seatgeek/react-infinite"\n}, {\n  "title": "debug",\n  "url": "https://www.npmjs.org/package/debug"\n}, {\n  "title": "notatestuser/gift · GitHub",\n  "url": "https://github.com/notatestuser/gift"\n}, {\n  "title": "kofrasa/mingo · GitHub",\n  "url": "https://github.com/kofrasa/mingo?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Tuxx",\n  "url": "https://www.tuxedojs.org/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "gabelerner/canvg · GitHub",\n  "url": "https://github.com/gabelerner/canvg?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Apache Thrift - Home",\n  "url": "https://thrift.apache.org/"\n}, {\n  "title": "facebook/css-layout",\n  "url": "https://github.com/facebook/css-layout"\n}, {\n  "title": "Hjson, the Human JSON",\n  "url": "https://hjson.org/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "mpowaga/react-slider",\n  "url": "https://github.com/mpowaga/react-slider"\n}, {\n  "title": "TheaterJS, a typing effect mimicking human behavior.",\n  "url": "https://gabinaureche.com/TheaterJS/#"\n}, {\n  "title": "mrdoob/texgen.js",\n  "url": "https://github.com/mrdoob/texgen.js?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Defiant.js",\n  "url": "https://defiantjs.com/"\n}, {\n  "title": "henrikingo/xml2json",\n  "url": "https://github.com/henrikingo/xml2json"\n}, {\n  "title": "Rickshaw: A JavaScript toolkit for creating interactive time-series graphs",\n  "url": "https://code.shutterstock.com/rickshaw/"\n}, {\n  "title": "Immutable.js",\n  "url": "https://facebook.github.io/immutable-js/"\n}, {\n  "title": "Flipboard/react-canvas",\n  "url": "https://github.com/flipboard/react-canvas"\n}, {\n  "title": "PDFKit",\n  "url": "https://pdfkit.org/"\n}, {\n  "title": "yahoo/fluxible",\n  "url": "https://github.com/yahoo/fluxible"\n}, {\n  "title": "vivus.js - svg animation",\n  "url": "https://maxwellito.github.io/vivus/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "parse5 by inikulin",\n  "url": "https://inikulin.github.io/parse5/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "Adding Audio to Web Apps -Telerik Developer Network",\n  "url": "https://developer.telerik.com/featured/adding-audio-to-web-apps/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "Cross-Platform Native Development with Javascript",\n  "url": "https://www.nativescript.org/"\n}, {\n  "title": "Strand Web Components",\n  "url": "https://mediamath.github.io/strand/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "ramjet",\n  "url": "https://www.rich-harris.co.uk/ramjet/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "Manipulating Images on Web Pages with CamanJS",\n  "url": "https://www.sitepoint.com/manipulating-images-web-pages-camanjs/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "ExpandJS",\n  "url": "https://www.expandjs.com/?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "spoike/refluxjs",\n  "url": "https://github.com/spoike/refluxjs"\n}, {\n  "title": "peachananr/onepage-scroll",\n  "url": "https://github.com/peachananr/onepage-scroll"\n}, {\n  "title": "FixedDataTable",\n  "url": "https://facebook.github.io/fixed-data-table/"\n}, {\n  "title": "bling dot js",\n  "url": "https://gist.github.com/paulirish/12fb951a8b893a454b32?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Relay | A JavaScript framework for building data-driven React applications",\n  "url": "https://facebook.github.io/relay/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "cmpolis/smart-table-scroll · GitHub",\n  "url": "https://github.com/cmpolis/smart-table-scroll?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "rackt/redux · GitHub",\n  "url": "https://github.com/rackt/redux"\n}, {\n  "title": "Substance",\n  "url": "https://substance.io/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "json.human.js - Json Formatting for Human Beings",\n  "url": "https://marianoguerra.github.io/json.human.js/"\n}, {\n  "title": "beautify-web/js-beautify · GitHub",\n  "url": "https://github.com/beautify-web/js-beautify"\n}, {\n  "title": "yesmeck/jquery-jsonview · GitHub",\n  "url": "https://github.com/yesmeck/jquery-jsonview"\n}, {\n  "title": "GriddleGriddle/Griddle · GitHub",\n  "url": "https://github.com/GriddleGriddle/Griddle"\n}, {\n  "title": "reactabular - Spectacular tables for React.js",\n  "url": "https://bebraw.github.io/reactabular/"\n}, {\n  "title": "nmn/react-infinity · GitHub",\n  "url": "https://github.com/nmn/react-infinity"\n}, {\n  "title": "pedronauck/react-simpletabs · GitHub",\n  "url": "https://github.com/pedronauck/react-simpletabs"\n}, {\n  "title": "vis.js - A dynamic, browser based visualization library.",\n  "url": "https://visjs.org/"\n}, {\n  "title": "Datavisualization.ch Selected Tools",\n  "url": "https://selection.datavisualization.ch/"\n}, {\n  "title": "flitbit/diff · GitHub",\n  "url": "https://github.com/flitbit/diff"\n}, {\n  "title": "Tixit/odiff",\n  "url": "https://github.com/Tixit/odiff"\n}, {\n  "title": "bripkens/fuzzy.js",\n  "url": "https://github.com/bripkens/fuzzy.js"\n}, {\n  "title": "krisk/Fuse",\n  "url": "https://github.com/krisk/fuse"\n}, {\n  "title": "atom/fuzzaldrin",\n  "url": "https://github.com/atom/fuzzaldrin/"\n}, {\n  "title": "jwagner/smartcrop.js",\n  "url": "https://github.com/jwagner/smartcrop.js?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "mikach/requirejs-babel",\n  "url": "https://github.com/mikach/requirejs-babel"\n}, {\n  "title": "Top Open-Source Static Site Generators - StaticGen",\n  "url": "https://www.staticgen.com/"\n}, {\n  "title": "HTML Cleaner - Word To HTML Converter",\n  "url": "https://www.html-cleaner.com/"\n}, {\n  "title": "marsdb",\n  "url": "https://www.npmjs.com/package/marsdb"\n}, {\n  "title": "STRML/react-grid-layout",\n  "url": "https://github.com/STRML/react-grid-layout"\n}, {\n  "title": "NW.js",\n  "url": "https://nwjs.io/"\n}, {\n  "title": "laktek.github.io/jQuery-Smart-Auto-Complete/demo/qs_score.js",\n  "url": "https://laktek.github.io/jQuery-Smart-Auto-Complete/demo/qs_score.js"\n}, {\n  "title": "Master Complex Redux Workflows with Sagas",\n  "url": "https://konkle.us/master-complex-redux-workflows-with-sagas/?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "GitHub - BlueOakJS/blueoak-server: express.js-based, swagger-matic, server runtime",\n  "url": "https://github.com/BlueOakJS/blueoak-server?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Our Justified Layout Goes Open Source | code.flickr.com",\n  "url": "https://code.flickr.net/2016/04/05/our-justified-layout-goes-open-source/"\n}, {\n  "title": "RethinkDB: the open-source database for the realtime web",\n  "url": "https://www.rethinkdb.com/"\n}, {\n  "title": "GitHub - facundoolano/promise-log: shortcut for console.loggin\' your promises",\n  "url": "https://github.com/facundoolano/promise-log?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Pusher | Leader In Realtime Technologies",\n  "url": "https://pusher.com/"\n}, {\n  "title": "Cleave.js - Format input text content when you are typing",\n  "url": "https://nosir.github.io/cleave.js/"\n}, {\n  "title": "lodash documentation",\n  "url": "https://lodash.com/docs"\n}, {\n  "title": "felixrieseberg/electron-uwp-background: Sample explaining how to use UWP background tasks with Electron apps",\n  "url": "https://github.com/felixrieseberg/electron-uwp-background"\n}, {\n  "title": "GitHub - ebidel/appmetrics.js: A small (1.1kb) library for measuring things in your web app and reporting the results to Google Analytics.",\n  "url": "https://github.com/ebidel/appmetrics.js?utm_source=html5weekly&utm_medium=email"\n}, {\n  "title": "GitHub - fulcrumapp/react-virtual-grid: Virtual Grid for React",\n  "url": "https://github.com/fulcrumapp/react-virtual-grid"\n}, {\n  "title": "Sinon.JS - Documentation",\n  "url": "https://sinonjs.org/docs/"\n}, {\n  "title": "GitHub - nolanlawson/optimize-js: Optimize a JavaScript file for faster initial load by wrapping eagerly-invoked functions",\n  "url": "https://github.com/nolanlawson/optimize-js"\n}, {\n  "title": "GitHub - nolanlawson/marky: High-resolution JavaScript timer based on performance.mark() and measure()",\n  "url": "https://github.com/nolanlawson/marky"\n}, {\n  "title": "Front-end Tools: My Favorite Finds of 2016",\n  "url": "https://www.sitepoint.com/front-end-tools-my-favorite-finds-of-2016/?utm_source=frontendfocus&utm_medium=email"\n}, {\n  "title": "GitHub - styled-components/styled-components: Visual primitives for the component age 💅",\n  "url": "https://github.com/styled-components/styled-components"\n}, {\n  "title": "Rebass",\n  "url": "https://jxnblk.com/rebass/"\n}, {\n  "title": "GitHub - sindresorhus/electron-debug: Adds useful debug features to your Electron app",\n  "url": "https://github.com/sindresorhus/electron-debug"\n}, {\n  "title": "Elemental UI",\n  "url": "https://elemental-ui.com/"\n}, {\n  "title": "GitHub - brillout/awesome-react-components: Catalog of React Components & Libraries",\n  "url": "https://github.com/brillout/awesome-react-components"\n}, {\n  "title": "GitHub - chentsulin/electron-react-boilerplate: Live editing development on desktop app",\n  "url": "https://github.com/chentsulin/electron-react-boilerplate"\n}, {\n  "title": "GitHub - gabrielbull/react-desktop: React UI Components for macOS Sierra and Windows 10",\n  "url": "https://github.com/gabrielbull/react-desktop"\n}, {\n  "title": "reactjs/redux: Predictable state container for JavaScript apps",\n  "url": "https://github.com/reactjs/redux"\n}, {\n  "title": "EmojiOne | The Open Emoji Standard",\n  "url": "https://emojione.com/"\n}, {\n  "title": "twitter/twemoji: Twitter Emoji for Everyone",\n  "url": "https://github.com/twitter/twemoji"\n}, {\n  "title": "kolodny/wavy: use ~ in require and import calls",\n  "url": "https://github.com/kolodny/wavy"\n}, {\n  "title": "Photon · Components",\n  "url": "https://photonkit.com/components/"\n}, {\n  "title": "electron-userland/electron-forge: A complete tool for creating, publishing, and installing modern Electron applications",\n  "url": "https://github.com/electron-userland/electron-forge/"\n}, {\n  "title": "styled-jsx",\n  "url": "https://www.npmjs.com/package/styled-jsx"\n}, {\n  "title": "FormidableLabs/radium: A toolchain for React component styling.",\n  "url": "https://github.com/FormidableLabs/radium"\n}, {\n  "title": "Complementary Tools · facebook/react Wiki",\n  "url": "https://github.com/facebook/react/wiki/Complementary-Tools"\n}, {\n  "title": "developit/preact: ⚛️ Fast 3kb React alternative with the same ES6 API. Components & Virtual DOM.",\n  "url": "https://github.com/developit/preact"\n}, {\n  "title": "Editor · Slate",\n  "url": "https://docs.slatejs.org/#"\n}, {\n  "title": "xyc/react-inspector: Power of Browser DevTools inspectors right inside your React app",\n  "url": "https://github.com/xyc/react-inspector"\n}, {\n  "title": "atom/node-keytar: Native Password Node Module",\n  "url": "https://github.com/atom/node-keytar"\n}, {\n  "title": "Draft.js | Rich Text Editor Framework for React",\n  "url": "https://draftjs.org/"\n}, {\n  "title": "valuelink",\n  "url": "https://www.npmjs.com/package/valuelink"\n}, {\n  "title": "epoberezkin/ajv: The fastest JSON-Schema Validator. Supports draft-04/06",\n  "url": "https://github.com/epoberezkin/ajv"\n}, {\n  "title": "typicode/husky: Git hooks made easy",\n  "url": "https://github.com/typicode/husky"\n}, {\n  "title": "react-tabs/style at master · reactjs/react-tabs",\n  "url": "https://github.com/reactjs/react-tabs/tree/master/style"\n}, {\n  "title": "MUI - Material Design CSS Framework",\n  "url": "https://www.muicss.com/"\n}, {\n  "title": "nakajmg/electron-search-text: electron findInPage wrapper module",\n  "url": "https://github.com/nakajmg/electron-search-text"\n}, {\n  "title": "electron-in-page-search",\n  "url": "https://www.npmjs.com/package/electron-in-page-search"\n}, {\n  "title": "jrowny/react-absolute-grid: An absolutely positioned, animated, filterable, sortable, drag and droppable, ES6 grid for React.",\n  "url": "https://github.com/jrowny/react-absolute-grid"\n}, {\n  "title": "bevacqua/react-dragula: Drag and drop so simple it hurts",\n  "url": "https://github.com/bevacqua/react-dragula"\n}, {\n  "title": "jaredreich/pell: 📝 the simplest and smallest (1kB) WYSIWYG text editor for web, with no dependencies",\n  "url": "https://github.com/jaredreich/pell?utm_source=frontendfocus&utm_medium=email"\n}, {\n  "title": "clauderic/react-sortable-hoc: ✌️ A set of higher-order components to turn any list into an animated, touch-friendly, sortable list.",\n  "url": "https://github.com/clauderic/react-sortable-hoc"\n}, {\n  "title": "react-dnd/react-dnd: Drag and Drop for React",\n  "url": "https://github.com/react-dnd/react-dnd"\n}, {\n  "title": "ianstormtaylor/slate: A completely customizable framework for building rich text editors.",\n  "url": "https://github.com/ianstormtaylor/slate?utm_source=javascriptweekly&utm_medium=email"\n}, {\n  "title": "Diet.js",\n  "url": "https://dietjs.com/"\n}, {\n  "title": "zeit/next.js: Framework for server-rendered React apps",\n  "url": "https://github.com/zeit/next.js"\n}, {\n  "title": "acdlite/recompose: A React utility belt for function components and higher-order components.",\n  "url": "https://github.com/acdlite/recompose"\n}, {\n  "title": "mozilla/webextension-polyfill: A lightweight polyfill library for Promise-based WebExtension APIs in Chrome",\n  "url": "https://github.com/mozilla/webextension-polyfill"\n}, {\n  "title": "bodymovin/bodymovin: after effects to html library",\n  "url": "https://github.com/bodymovin/bodymovin"\n}, {\n  "title": "tfoxy/chrome-promise: Promises for chrome JavaScript APIs used in extensions and apps.",\n  "url": "https://github.com/tfoxy/chrome-promise"\n}, {\n  "title": "pages-themes/minimal: Minimal is a Jekyll theme for GitHub Pages",\n  "url": "https://github.com/pages-themes/minimal"\n}, {\n  "title": "react-chrome-extension-boilerplate",\n  "url": "https://www.npmjs.com/package/react-chrome-extension-boilerplate"\n}, {\n  "title": "JedWatson/classnames: A simple javascript utility for conditionally joining classNames together",\n  "url": "https://github.com/JedWatson/classnames"\n}, {\n  "title": "A library for building cross-platform apps - ReactXP",\n  "url": "https://microsoft.github.io/reactxp/"\n}, {\n  "title": "emoji-mart",\n  "url": "https://www.npmjs.com/package/emoji-mart"\n}, {\n  "title": "atlassian/react-beautiful-dnd: Beautiful, accessible drag and drop for lists with React.js",\n  "url": "https://github.com/atlassian/react-beautiful-dnd?utm_source=reactnl&utm_medium=email#readme"\n}, {\n  "title": "Easy and fast SDK for beautiful apps - Flutter",\n  "url": "https://flutter.io/"\n}, {\n  "title": "Feather – Simply beautiful open source icons",\n  "url": "https://feathericons.com/"\n}, {\n  "title": "Welcome to Workbox",\n  "url": "https://workboxjs.org/"\n}, {\n  "title": "Minio",\n  "url": "https://www.minio.io/"\n}, {\n  "title": "Push v1.0 | Javascript Notification Framework",\n  "url": "https://pushjs.org/"\n}, {\n  "title": "bvaughn/react-virtualized: React components for efficiently rendering large lists and tabular data",\n  "url": "https://github.com/bvaughn/react-virtualized"\n}, {\n  "title": "reshape/reshape: transform html with javascript plugins",\n  "url": "https://github.com/reshape/reshape"\n}, {\n  "title": "PrimeReact",\n  "url": "https://www.primefaces.org/primereact/#/"\n}, {\n  "title": "ayrton/react-key-handler: React component to handle keyboard events",\n  "url": "https://github.com/ayrton/react-key-handler"\n}, {\n  "title": "avocode/react-shortcuts: Manage keyboard shortcuts from one place",\n  "url": "https://github.com/avocode/react-shortcuts"\n}, {\n  "title": "react-shortcuts",\n  "url": "https://www.npmjs.com/package/react-shortcuts"\n}, {\n  "title": "react-keydown",\n  "url": "https://www.npmjs.com/package/react-keydown"\n}, {\n  "title": "lodash CDN by jsDelivr - A CDN for npm and GitHub",\n  "url": "https://www.jsdelivr.com/package/npm/lodash"\n}, {\n  "title": "react-html-document",\n  "url": "https://www.npmjs.com/package/react-html-document"\n}, {\n  "title": "Supplying Images - Google Chrome",\n  "url": "https://developer.chrome.com/webstore/images"\n}, {\n  "title": "electron-userland/electron-webpack: Scripts and configurations to compile Electron applications using webpack",\n  "url": "https://github.com/electron-userland/electron-webpack"\n}, {\n  "title": "workco/marvin: React and Redux, Webpack 2 boilerplate",\n  "url": "https://github.com/workco/marvin"\n}, {\n  "title": "babel/minify: An ES6+ aware minifier based on the Babel toolchain (beta)",\n  "url": "https://github.com/babel/minify"\n}, {\n  "title": "plenluno/promise-mutex: Mutual-exclusion lock for promise chains",\n  "url": "https://github.com/plenluno/promise-mutex"\n}, {\n  "title": "antvis/g2: G2 (The Grammar of Graphics)",\n  "url": "https://github.com/antvis/g2"\n}, {\n  "title": "olov/stringmap: Fast and robust stringmap for JavaScript",\n  "url": "https://github.com/olov/stringmap"\n}, {\n  "title": "freesoftwarefactory/parse-multipart: A javascript/nodejs multipart/form-data parser which operates on raw data.",\n  "url": "https://github.com/freesoftwarefactory/parse-multipart"\n}, {\n  "title": "react-tools/react-form: React Form - Powerful and lightweight forms in React",\n  "url": "https://github.com/react-tools/react-form"\n}, {\n  "title": "Popmotion - A functional JavaScript motion library",\n  "url": "https://popmotion.io/"\n}, {\n  "title": "grunt-remove-logging",\n  "url": "https://www.npmjs.com/package/grunt-remove-logging"\n}, {\n  "title": "IconBros",\n  "url": "https://www.iconbros.com/?ref=producthunt"\n}, {\n  "title": "NUKnightLab/TimelineJS3: TimelineJS v3: A Storytelling Timeline built in JavaScript. https://timeline.knightlab.com",\n  "url": "https://github.com/NUKnightLab/TimelineJS3"\n}, {\n  "title": "timeline - vis.js - A dynamic, browser based visualization library.",\n  "url": "https://visjs.org/docs/timeline/"\n}, {\n  "title": "jamiebuilds/unstated: State so simple, it goes without saying",\n  "url": "https://github.com/jamiebuilds/unstated"\n}, {\n  "title": "Home - Proton Native - React Native for the desktop, cross compatible",\n  "url": "https://proton-native.js.org/#/"\n}, {\n  "title": "xpl/crx-hotreload: Chrome Extension Hot Reloader",\n  "url": "https://github.com/xpl/crx-hotreload"\n}, {\n  "title": "larsenwork/postcss-easing-gradients: PostCSS plugin to create smooth linear-gradients that approximate easing functions.",\n  "url": "https://github.com/larsenwork/postcss-easing-gradients"\n}, {\n  "title": "slick - the last carousel you\'ll ever need",\n  "url": "https://kenwheeler.github.io/slick/"\n}, {\n  "title": "jakesgordon/javascript-state-machine: A javascript finite state machine library",\n  "url": "https://github.com/jakesgordon/javascript-state-machine"\n}, {\n  "title": "atlassian/react-beautiful-dnd: Beautiful, accessible drag and drop for lists with React.js",\n  "url": "https://github.com/atlassian/react-beautiful-dnd"\n}, {\n  "title": "Glide.js | A dependency-free JavaScript ES6 slider and carousel",\n  "url": "https://glidejs.com/"\n}, {\n  "title": "Epic Spinners",\n  "url": "https://epic-spinners.epicmax.co/#/"\n}, {\n  "title": "planttheidea/fast-copy: A blazing fast deep object copier",\n  "url": "https://github.com/planttheidea/fast-copy"\n}, {\n  "title": "klauscfhq/signale: 👋 Hackable console logger",\n  "url": "https://github.com/klauscfhq/signale"\n}, {\n  "title": "jaywcjlove/hotkeys: ➷ A robust Javascript library for capturing keyboard input. It has no dependencies.",\n  "url": "https://github.com/jaywcjlove/hotkeys"\n}, {\n  "title": "Material-UI",\n  "url": "https://material-ui.com/"\n}, {\n  "title": "rubenspgcavalcante/webpack-chrome-extension-reloader: 🔥 Hot reloading while developing Chrome extensions with webpack 🔥",\n  "url": "https://github.com/rubenspgcavalcante/webpack-chrome-extension-reloader"\n}, {\n  "title": "timarney/react-app-rewired: Override create-react-app webpack configs without ejecting",\n  "url": "https://github.com/timarney/react-app-rewired"\n}, {\n  "title": "gajus/write-file-webpack-plugin: Forces webpack-dev-server to write bundle files to the file system.",\n  "url": "https://github.com/gajus/write-file-webpack-plugin"\n}, {\n  "title": "acvetkov/sinon-chrome: Testing chrome extensions with Node.js",\n  "url": "https://github.com/acvetkov/sinon-chrome"\n}, {\n  "title": "adazzle/react-data-grid: Excel-like grid component built with React, with editors, keyboard navigation, copy & paste, and the like https://adazzle.github.io/react-data-grid/",\n  "url": "https://github.com/adazzle/react-data-grid"\n}, {\n  "title": "react-data-grid/Cell.js at master · adazzle/react-data-grid",\n  "url": "https://github.com/adazzle/react-data-grid/blob/master/packages/react-data-grid/src/Cell.js"\n}, {\n  "title": "Scrum/webpack-extension-manifest-plugin: Creates manifest json file based you config",\n  "url": "https://github.com/Scrum/webpack-extension-manifest-plugin"\n}, {\n  "title": "fast-memoize - npm",\n  "url": "https://www.npmjs.com/package/fast-memoize"\n}, {\n  "title": "QuicKey – The quick tab switcher - Chrome Web Store",\n  "url": "https://chrome.google.com/webstore/detail/quickey-%E2%80%93-the-quick-tab-s/ldlghkoiihaelfnggonhjnfiabmaficg"\n}, {\n  "title": "QuicKey | Jump between recent tabs in Chrome via keyboard or menu",\n  "url": "https://fwextensions.github.io/QuicKey/"\n}]);\n;// CONCATENATED MODULE: ./src/data/Bookmarks.js\n\n\nconst ProtocolPattern = /https?:\\/\\/(www\\.)?/;\n\nclass Bookmarks {\n  constructor(items) {\n    this.setItems(items);\n  }\n\n  setItems(items) {\n    this.originalItems = items;\n    this.items = this.processItems(items);\n    this.hash = fnv1a_default()(this.toString());\n  }\n\n  processItems(items) {\n    return items.map(({\n      title,\n      url\n    }) => {\n      let domain = url;\n\n      try {\n        domain = new URL(url).hostname;\n      } catch (e) {}\n\n      return {\n        title,\n        domain,\n        url: url.replace(ProtocolPattern, "")\n      };\n    });\n  }\n\n  toString() {\n    return JSON.stringify(this.originalItems, null, 2);\n  }\n\n}\n\n/* harmony default export */ const data_Bookmarks = (new Bookmarks(bookmarks_data));\n;// CONCATENATED MODULE: ./src/scorers/convert-items.js\nfunction convertQuickScore(keys) {\n  return items => items;\n}\nfunction convertFuse(keys) {\n  return items => items.map(item => {\n    const {\n      score,\n      matches\n    } = item;\n    const matchesHash = {};\n    const matchesByKey = {};\n    const qsScore = 1 - score;\n    const scores = {};\n    const bestMatch = matches[0];\n    const scoreKey = bestMatch && bestMatch.key || "";\n\n    for (const match of matches) {\n      // add 1 to the end of the range so it can be passed to substring()\n      matchesByKey[match.key] = match.indices.map(([start, end]) => [start, end + 1]);\n    }\n\n    for (const key of keys) {\n      scores[key] = key == scoreKey ? qsScore : 0;\n      matchesHash[key] = matchesByKey[key] || [];\n    }\n\n    return {\n      item: item.item,\n      score: qsScore,\n      scoreKey,\n      scores,\n      matches: matchesHash\n    };\n  });\n}\nfunction convertFuzzysort(keys) {\n  return items => items.map(item => {\n    const {\n      obj,\n      score\n    } = item;\n    const scores = {};\n    const matches = {};\n    let scoreKey = "";\n\n    for (let i = 0, len = item.length; i < len; i++) {\n      const itemMatch = item[i];\n      const key = keys[i];\n\n      if (itemMatch) {\n        const indexes = itemMatch.indexes;\n        scores[key] = itemMatch.score;\n        matches[key] = [];\n\n        for (let j = 0, jLen = indexes.length; j < jLen; j++) {\n          const start = indexes[j];\n          let current = start;\n          let next = j + 1;\n\n          while (next < jLen && indexes[next] == current + 1) {\n            current = indexes[next];\n            next++;\n            j++;\n          }\n\n          matches[key].push([start, current + 1]);\n        }\n\n        if (itemMatch.score == score) {\n          scoreKey = key;\n        }\n      } else {\n        matches[key] = [];\n        scores[key] = -Infinity;\n      }\n    }\n\n    return {\n      item: obj,\n      score,\n      scoreKey,\n      scores,\n      matches\n    };\n  });\n}\nfunction convertMatchSorter(keys) {\n  const scores = {};\n  const scoreKey = keys[0];\n  const matches = [];\n  keys.forEach(key => {\n    scores[key] = 0;\n    matches[key] = [];\n  });\n  return items => items.map(item => {\n    return {\n      item,\n      score: 0,\n      scoreKey,\n      scores,\n      matches\n    };\n  });\n}\n;// CONCATENATED MODULE: ./src/scorers/scorers.js\n\n\n\n\n\n\n\n\nconst DefaultItems = data_Bookmarks.items;\nconst DefaultKeys = ["title", "url"];\n\nfunction createQuickScore(items = DefaultItems, keys = DefaultKeys) {\n  return new QuickScore(items, keys);\n}\n\nfunction createQuicksilver(items = DefaultItems, keys = DefaultKeys) {\n  return new QuickScore(items, {\n    keys,\n    config: QuicksilverConfig\n  });\n}\n\nfunction createLiquidMetal(items = DefaultItems, keys = DefaultKeys) {\n  return new QuickScore(items, {\n    keys,\n    scorer: (...args) => liquidmetal_default().score(...args)\n  });\n}\n\nfunction createFuse(items = DefaultItems, keys = DefaultKeys) {\n  return new Fuse(items, {\n    keys,\n    includeMatches: true,\n    includeScore: true,\n    shouldSort: true\n  });\n}\n\nfunction createFuzzySort(items = DefaultItems, keys = DefaultKeys) {\n  return new FuzzySort(items, {\n    keys\n  });\n}\n\nfunction createMatchSorter(items = DefaultItems, keys = DefaultKeys) {\n  return new MatchSorter(items, {\n    keys\n  });\n}\n\nfunction updateQuickScore(items) {\n  this.scorer.setItems(items);\n}\n\n/* harmony default export */ const scorers = ([{\n  name: "QuickScore",\n  scorer: createQuickScore(),\n  update: updateQuickScore,\n  converter: convertQuickScore(DefaultKeys)\n}, {\n  name: "Fuse.js",\n  scorer: createFuse(),\n  update: function (items) {\n    this.scorer = createFuse(items);\n  },\n  converter: convertFuse(DefaultKeys),\n  description: [/*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "QuickScore is generally two or three times faster than Fuse.js when searching items.  Because QuickScore requires all of the characters in the query to appear in order in a result string, it usually produces more focused and relevant results (at the cost of not tolerating typos)."), /*#__PURE__*/react.createElement("p", null, "When the query string is empty, QuickScore returns all the items sorted alphabetically.  Fuse.js doesn\'t return any results in that case, so the list on the right is empty initially."), /*#__PURE__*/react.createElement("p", null, "Fuse.js scores usually go from ", /*#__PURE__*/react.createElement("code", null, "0"), " as the best match to ", /*#__PURE__*/react.createElement("code", null, "1"), " as no match, but the scores in its list have been inverted to match QuickScore\'s range.")), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "The fuzziness of ", /*#__PURE__*/react.createElement("a", {\n    href: "https://fusejs.io/"\n  }, "Fuse.js"), " means it often returns surprising results for a given query, especially when searching through long strings like webpage titles or URLs.  For instance, if you type ", /*#__PURE__*/react.createElement("kbd", null, "real"), " to match page titles that contain the word ", /*#__PURE__*/react.createElement("b", null, "realtime"), ", Fuse.js returns ", /*#__PURE__*/react.createElement("b", null, "Material-UI"), " as the top result, which has the query characters in a different order, while the bookmark titled ", /*#__PURE__*/react.createElement("b", null, "RethinkDB: the open-source database for the realtime web"), " is the 49th result."), /*#__PURE__*/react.createElement("p", null, "Or if you type ", /*#__PURE__*/react.createElement("kbd", null, "revi"), " to pull up the ", /*#__PURE__*/react.createElement("b", null, "react-virtualized"), " bookmark, Fuse.js puts that item on the last page of results.  Or typing ", /*#__PURE__*/react.createElement("kbd", null, "zom"), " to match ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " returns ", /*#__PURE__*/react.createElement("b", null, "Moment.js"), " before it."))]\n}, {\n  name: "liquidmetal",\n  scorer: createLiquidMetal(),\n  update: updateQuickScore,\n  converter: convertQuickScore(DefaultKeys),\n  description: [/*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "liquidmetal is another implementation of the Quicksilver algorithm that often produces identical scores as QuickScore. It\'s about half as fast as QuickScore, though, and suffers from some of the same weaknesses of the original algorithm, like over-emphasizing longer strings and not prioritizing denser matches.")), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "There are sometimes misses with ", /*#__PURE__*/react.createElement("a", {\n    href: "https://www.npmjs.com/package/liquidmetal"\n  }, "liquidmetal"), "\'s results. If you wanted to find the ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " bookmark and typed just ", /*#__PURE__*/react.createElement("kbd", null, "zom"), ", liquidmetal\'s top two results look completely unrelated to the query.  They\'re included because the query letters appear somewhere in the extremely long tracking parameter that happened to be saved with the bookmark. QuickScore sorts ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " to the top with that query, and sorts the ", /*#__PURE__*/react.createElement("b", null, "PhoneGap"), " and", /*#__PURE__*/react.createElement("b", null, "jQuery Sparklines"), " items to the very bottom."), /*#__PURE__*/react.createElement("p", null, "liquidmetal doesn\'t return information about where the query matches each string, so nothing is bolded in this list."))]\n}, {\n  name: "match-sorter",\n  scorer: createMatchSorter(),\n  update: function (items) {\n    this.scorer = createMatchSorter(items);\n  },\n  converter: convertMatchSorter(DefaultKeys),\n  description: [/*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "match-sorter and QuickScore almost always return the same results, though sometimes with differences in the sort order. For instance, if you wanted to find the ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " bookmark and typed just ", /*#__PURE__*/react.createElement("kbd", null, "zom"), ", match-sorter does return the correct result first, though QuickScore is usually about twice as fast.")), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, /*#__PURE__*/react.createElement("a", {\n    href: "https://github.com/kentcdodds/match-sorter"\n  }, "match-sorter"), " doesn\'t prioritize camelCase matches, so if you type ", /*#__PURE__*/react.createElement("kbd", null, "gh"), " to find all the ", /*#__PURE__*/react.createElement("b", null, "GitHub"), " bookmarks, QuickScore sorts the ones starting with ", /*#__PURE__*/react.createElement("b", null, "GitHub"), " to the top, while match-sorter returns them starting about a quarter of the way down the list."), /*#__PURE__*/react.createElement("p", null, "match-sorter doesn\'t return information about where the query matches each string, so nothing is bolded in this list, and it doesn\'t return scores for individual results."))]\n}, {\n  name: "fuzzysort",\n  scorer: createFuzzySort(),\n  update: function (items) {\n    this.scorer = createFuzzySort(items);\n  },\n  converter: convertFuzzysort(DefaultKeys),\n  description: [/*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "fuzzysort is usually faster than QuickScore, thanks to its aggressive caching and pre-processing, and generally produces very similar results.  The scores it returns range from ", /*#__PURE__*/react.createElement("code", null, "-Infinity"), " to ", /*#__PURE__*/react.createElement("code", null, "0"), ", though, which is a bit quirky.")), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "There are occasional misses with ", /*#__PURE__*/react.createElement("a", {\n    href: "https://github.com/farzher/fuzzysort"\n  }, "fuzzysort"), "\'s results. If you wanted to find the ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " bookmark and typed just ", /*#__PURE__*/react.createElement("kbd", null, "zom"), ", fuzzysort\'s top two results look completely unrelated to the query.  They\'re included because the query letters appear somewhere in the extremely long tracking parameter that happened to be saved with the bookmark. QuickScore sorts ", /*#__PURE__*/react.createElement("b", null, "jQuery Zoom"), " to the top with that query, and sorts the ", /*#__PURE__*/react.createElement("b", null, "PhoneGap"), " and", /*#__PURE__*/react.createElement("b", null, "jQuery Sparklines"), " items to the very bottom."))]\n}, {\n  name: "Quicksilver (original algorithm)",\n  scorer: createQuicksilver(),\n  update: updateQuickScore,\n  converter: convertQuickScore(DefaultKeys),\n  description: [/*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "QuickScore tweaks the original Quicksilver algorithm to reduce its higher scoring of long strings, and bumps up matches that are denser (fewer skipped characters in between each matched letter) and that start earlier in the string. This reduces the scores of irrelevant matches on strings like URLs that have long GUIDs or tokens at the end, and which often contain enough letters to match almost any short query."), /*#__PURE__*/react.createElement("p", null, "The precise behavior of the QuickScore algorithm can be tweaked via a ", /*#__PURE__*/react.createElement("code", null, "config"), " parameter to the constructor.")), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, "The Quicksilver config generally produces very similar results to the default QuickScore config, and is a hair faster.  But you can see some differences when typing ", /*#__PURE__*/react.createElement("kbd", null, "libr"), " to match page titles that contain ", /*#__PURE__*/react.createElement("b", null, "library"), ".  The first ten QuickScore results all contain ", /*#__PURE__*/react.createElement("b", null, "library"), ", while there are some less relevant pages mixed in on the Quicksilver side."))]\n}]);\n;// CONCATENATED MODULE: ./src/components/App.js\n\n\n\n\n\n\n\nconst AppContainer = styled_components_browser_esm.div.withConfig({\n  displayName: "App__AppContainer",\n  componentId: "sc-1hqwuln-0"\n})(["border-top:1px solid #aaa;padding:2em 0;"]);\nconst Title = styled_components_browser_esm.h2.withConfig({\n  displayName: "App__Title",\n  componentId: "sc-1hqwuln-1"\n})(["font-size:2em;margin:0 0 1em 0;& ~ p{font-size:1.25em;margin-bottom:2em;}"]);\nconst leftScorerConfig = scorers[0];\nconst scorerConfigs = scorers.slice(1);\nfunction App() {\n  const [query, setQuery] = (0,react.useState)("");\n  const [selectedIndex, setSelectedIndex] = (0,react.useState)(-1);\n  const [rightScorerConfig, setRightScorerConfig] = (0,react.useState)(scorers[1]);\n  const [itemsHash, setItemsHash] = (0,react.useState)(data_Bookmarks.hash);\n  const leftWidgetRef = (0,react.useRef)(null);\n  const rightWidgetRef = (0,react.useRef)(null);\n  const setItems = (0,react.useCallback)(items => {\n    // update the Bookmarks singleton, and then update all of the\n    // scorers, so that when the user switches to a different one, it\'s\n    // got the right items\n    data_Bookmarks.setItems(items);\n    scorers.forEach(scorer => scorer.update(data_Bookmarks.items)); // use a hash of the JSON text, so that the memoized search\n    // function in SearchWidget will return a different value when\n    // the items are changed.  this is faster than making memoize()\n    // run stringify on the whole items array every time.\n\n    setItemsHash(data_Bookmarks.hash);\n  }, [setItemsHash]);\n  const handleScorerChange = (0,react.useCallback)(selectedConfig => {\n    setRightScorerConfig(selectedConfig);\n    setQuery("");\n    leftWidgetRef.current.focus();\n  }, [setQuery, setRightScorerConfig, leftWidgetRef]);\n  const handleKeyDown = (0,react.useCallback)(event => {\n    let cancel = true;\n\n    switch (event.key) {\n      case "Escape":\n        setQuery("");\n        break;\n\n      case "ArrowDown":\n        // since we\'re wrapped in useCallback(), selectedIndex will\n        // be stale, so use a function to get the current index and\n        // calculate the new one\n        setSelectedIndex(selectedIndex => Math.min(selectedIndex + 1, data_Bookmarks.items.length));\n        break;\n\n      case "ArrowUp":\n        setSelectedIndex(selectedIndex => Math.max(selectedIndex - 1, 0));\n        break;\n\n      case "PageDown":\n        leftWidgetRef.current.scrollByPage("down");\n        rightWidgetRef.current.scrollByPage("down");\n        break;\n\n      case "PageUp":\n        leftWidgetRef.current.scrollByPage("up");\n        rightWidgetRef.current.scrollByPage("up");\n        break;\n\n      default:\n        cancel = false;\n        break;\n    }\n\n    if (cancel) {\n      // don\'t scroll the page when the user is paging up/down\n      event.preventDefault();\n    }\n  }, [setSelectedIndex, leftWidgetRef, rightWidgetRef]);\n  const handleQueryChange = (0,react.useCallback)(({\n    target: {\n      value\n    }\n  }) => {\n    setQuery(value);\n    setSelectedIndex(0); // reset the scroll to show the first match\n\n    leftWidgetRef.current.scrollToRow(0);\n    rightWidgetRef.current.scrollToRow(0);\n  }, [setQuery, setSelectedIndex, leftWidgetRef, rightWidgetRef]);\n  const handleKbdClick = (0,react.useCallback)(({\n    target\n  }) => {\n    if (target.tagName == "KBD") {\n      leftWidgetRef.current.focus();\n      handleQueryChange({\n        target: {\n          value: target.textContent\n        }\n      });\n    }\n  }, [leftWidgetRef]);\n  return /*#__PURE__*/react.createElement(AppContainer, null, /*#__PURE__*/react.createElement(Title, {\n    id: "demo"\n  }, "Demo"), /*#__PURE__*/react.createElement("p", null, "Type a query in either search box below to use QuickScore to match and sort bookmarks on the left, and choose among other scoring algorithms on the right.  Your typed query will be matched against the title and URL of about 300 bookmarks. Click text formatted as ", /*#__PURE__*/react.createElement("kbd", null, "keycaps"), " to quickly set the query to that string.  Edit the bookmarks ", /*#__PURE__*/react.createElement("a", {\n    href: "#editor"\n  }, "below"), "."), /*#__PURE__*/react.createElement(ScorerSelector, {\n    scorers: scorerConfigs,\n    onChange: handleScorerChange,\n    onKbdClick: handleKbdClick\n  }), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(SearchWidget, {\n    ref: leftWidgetRef,\n    itemsHash: itemsHash,\n    query: query,\n    scorerConfig: leftScorerConfig,\n    selectedIndex: selectedIndex,\n    setSelectedIndex: setSelectedIndex,\n    onQueryChange: handleQueryChange,\n    onKeyDown: handleKeyDown\n  }), /*#__PURE__*/react.createElement(SearchWidget, {\n    ref: rightWidgetRef,\n    itemsHash: itemsHash,\n    query: query,\n    scorerConfig: rightScorerConfig,\n    selectedIndex: selectedIndex,\n    setSelectedIndex: setSelectedIndex,\n    onQueryChange: handleQueryChange,\n    onKeyDown: handleKeyDown\n  })), /*#__PURE__*/react.createElement(ItemsEditor, {\n    itemsJSON: data_Bookmarks.toString(),\n    setItems: setItems\n  }));\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n(0,react_dom.render)( /*#__PURE__*/react.createElement(App, null), document.getElementById("root"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///622\n')},316:module=>{eval("//\n// Main\n//\n\nfunction memoize (fn, options) {\n  var cache = options && options.cache\n    ? options.cache\n    : cacheDefault\n\n  var serializer = options && options.serializer\n    ? options.serializer\n    : serializerDefault\n\n  var strategy = options && options.strategy\n    ? options.strategy\n    : strategyDefault\n\n  return strategy(fn, {\n    cache: cache,\n    serializer: serializer\n  })\n}\n\n//\n// Strategy\n//\n\nfunction isPrimitive (value) {\n  return value == null || typeof value === 'number' || typeof value === 'boolean' // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic (fn, cache, serializer, arg) {\n  var cacheKey = isPrimitive(arg) ? arg : serializer(arg)\n\n  var computedValue = cache.get(cacheKey)\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.call(this, arg)\n    cache.set(cacheKey, computedValue)\n  }\n\n  return computedValue\n}\n\nfunction variadic (fn, cache, serializer) {\n  var args = Array.prototype.slice.call(arguments, 3)\n  var cacheKey = serializer(args)\n\n  var computedValue = cache.get(cacheKey)\n  if (typeof computedValue === 'undefined') {\n    computedValue = fn.apply(this, args)\n    cache.set(cacheKey, computedValue)\n  }\n\n  return computedValue\n}\n\nfunction assemble (fn, context, strategy, cache, serialize) {\n  return strategy.bind(\n    context,\n    fn,\n    cache,\n    serialize\n  )\n}\n\nfunction strategyDefault (fn, options) {\n  var strategy = fn.length === 1 ? monadic : variadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\nfunction strategyVariadic (fn, options) {\n  var strategy = variadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\nfunction strategyMonadic (fn, options) {\n  var strategy = monadic\n\n  return assemble(\n    fn,\n    this,\n    strategy,\n    options.cache.create(),\n    options.serializer\n  )\n}\n\n//\n// Serializer\n//\n\nfunction serializerDefault () {\n  return JSON.stringify(arguments)\n}\n\n//\n// Cache\n//\n\nfunction ObjectWithoutPrototypeCache () {\n  this.cache = Object.create(null)\n}\n\nObjectWithoutPrototypeCache.prototype.has = function (key) {\n  return (key in this.cache)\n}\n\nObjectWithoutPrototypeCache.prototype.get = function (key) {\n  return this.cache[key]\n}\n\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n  this.cache[key] = value\n}\n\nvar cacheDefault = {\n  create: function create () {\n    return new ObjectWithoutPrototypeCache()\n  }\n}\n\n//\n// API\n//\n\nmodule.exports = memoize\nmodule.exports.strategies = {\n  variadic: strategyVariadic,\n  monadic: strategyMonadic\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE2LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpY2stc2NvcmUtZGVtby8uL25vZGVfbW9kdWxlcy9mYXN0LW1lbW9pemUvc3JjL2luZGV4LmpzP2VmOWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIE1haW5cbi8vXG5cbmZ1bmN0aW9uIG1lbW9pemUgKGZuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jYWNoZVxuICAgID8gb3B0aW9ucy5jYWNoZVxuICAgIDogY2FjaGVEZWZhdWx0XG5cbiAgdmFyIHNlcmlhbGl6ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplclxuICAgID8gb3B0aW9ucy5zZXJpYWxpemVyXG4gICAgOiBzZXJpYWxpemVyRGVmYXVsdFxuXG4gIHZhciBzdHJhdGVneSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJhdGVneVxuICAgID8gb3B0aW9ucy5zdHJhdGVneVxuICAgIDogc3RyYXRlZ3lEZWZhdWx0XG5cbiAgcmV0dXJuIHN0cmF0ZWd5KGZuLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZXI6IHNlcmlhbGl6ZXJcbiAgfSlcbn1cblxuLy9cbi8vIFN0cmF0ZWd5XG4vL1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAvLyB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJ3Vuc2FmZScgcHJpbWl0aXZlIGZvciBvdXIgbmVlZHNcbn1cblxuZnVuY3Rpb24gbW9uYWRpYyAoZm4sIGNhY2hlLCBzZXJpYWxpemVyLCBhcmcpIHtcbiAgdmFyIGNhY2hlS2V5ID0gaXNQcmltaXRpdmUoYXJnKSA/IGFyZyA6IHNlcmlhbGl6ZXIoYXJnKVxuXG4gIHZhciBjb21wdXRlZFZhbHVlID0gY2FjaGUuZ2V0KGNhY2hlS2V5KVxuICBpZiAodHlwZW9mIGNvbXB1dGVkVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29tcHV0ZWRWYWx1ZSA9IGZuLmNhbGwodGhpcywgYXJnKVxuICAgIGNhY2hlLnNldChjYWNoZUtleSwgY29tcHV0ZWRWYWx1ZSlcbiAgfVxuXG4gIHJldHVybiBjb21wdXRlZFZhbHVlXG59XG5cbmZ1bmN0aW9uIHZhcmlhZGljIChmbiwgY2FjaGUsIHNlcmlhbGl6ZXIpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpXG4gIHZhciBjYWNoZUtleSA9IHNlcmlhbGl6ZXIoYXJncylcblxuICB2YXIgY29tcHV0ZWRWYWx1ZSA9IGNhY2hlLmdldChjYWNoZUtleSlcbiAgaWYgKHR5cGVvZiBjb21wdXRlZFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbXB1dGVkVmFsdWUgPSBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICAgIGNhY2hlLnNldChjYWNoZUtleSwgY29tcHV0ZWRWYWx1ZSlcbiAgfVxuXG4gIHJldHVybiBjb21wdXRlZFZhbHVlXG59XG5cbmZ1bmN0aW9uIGFzc2VtYmxlIChmbiwgY29udGV4dCwgc3RyYXRlZ3ksIGNhY2hlLCBzZXJpYWxpemUpIHtcbiAgcmV0dXJuIHN0cmF0ZWd5LmJpbmQoXG4gICAgY29udGV4dCxcbiAgICBmbixcbiAgICBjYWNoZSxcbiAgICBzZXJpYWxpemVcbiAgKVxufVxuXG5mdW5jdGlvbiBzdHJhdGVneURlZmF1bHQgKGZuLCBvcHRpb25zKSB7XG4gIHZhciBzdHJhdGVneSA9IGZuLmxlbmd0aCA9PT0gMSA/IG1vbmFkaWMgOiB2YXJpYWRpY1xuXG4gIHJldHVybiBhc3NlbWJsZShcbiAgICBmbixcbiAgICB0aGlzLFxuICAgIHN0cmF0ZWd5LFxuICAgIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksXG4gICAgb3B0aW9ucy5zZXJpYWxpemVyXG4gIClcbn1cblxuZnVuY3Rpb24gc3RyYXRlZ3lWYXJpYWRpYyAoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIHN0cmF0ZWd5ID0gdmFyaWFkaWNcblxuICByZXR1cm4gYXNzZW1ibGUoXG4gICAgZm4sXG4gICAgdGhpcyxcbiAgICBzdHJhdGVneSxcbiAgICBvcHRpb25zLmNhY2hlLmNyZWF0ZSgpLFxuICAgIG9wdGlvbnMuc2VyaWFsaXplclxuICApXG59XG5cbmZ1bmN0aW9uIHN0cmF0ZWd5TW9uYWRpYyAoZm4sIG9wdGlvbnMpIHtcbiAgdmFyIHN0cmF0ZWd5ID0gbW9uYWRpY1xuXG4gIHJldHVybiBhc3NlbWJsZShcbiAgICBmbixcbiAgICB0aGlzLFxuICAgIHN0cmF0ZWd5LFxuICAgIG9wdGlvbnMuY2FjaGUuY3JlYXRlKCksXG4gICAgb3B0aW9ucy5zZXJpYWxpemVyXG4gIClcbn1cblxuLy9cbi8vIFNlcmlhbGl6ZXJcbi8vXG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZXJEZWZhdWx0ICgpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3VtZW50cylcbn1cblxuLy9cbi8vIENhY2hlXG4vL1xuXG5mdW5jdGlvbiBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUgKCkge1xuICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxufVxuXG5PYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIChrZXkgaW4gdGhpcy5jYWNoZSlcbn1cblxuT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiB0aGlzLmNhY2hlW2tleV1cbn1cblxuT2JqZWN0V2l0aG91dFByb3RvdHlwZUNhY2hlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0aGlzLmNhY2hlW2tleV0gPSB2YWx1ZVxufVxuXG52YXIgY2FjaGVEZWZhdWx0ID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RXaXRob3V0UHJvdG90eXBlQ2FjaGUoKVxuICB9XG59XG5cbi8vXG4vLyBBUElcbi8vXG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVxubW9kdWxlLmV4cG9ydHMuc3RyYXRlZ2llcyA9IHtcbiAgdmFyaWFkaWM6IHN0cmF0ZWd5VmFyaWFkaWMsXG4gIG1vbmFkaWM6IHN0cmF0ZWd5TW9uYWRpY1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///316\n")},360:function(module,exports){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\r\nWHAT: SublimeText-like Fuzzy Search\r\n\r\nUSAGE:\r\n  fuzzysort.single('fs', 'Fuzzy Search') // {score: -16}\r\n  fuzzysort.single('test', 'test') // {score: 0}\r\n  fuzzysort.single('doesnt exist', 'target') // null\r\n\r\n  fuzzysort.go('mr', ['Monitor.cpp', 'MeshRenderer.cpp'])\r\n  // [{score: -18, target: \"MeshRenderer.cpp\"}, {score: -6009, target: \"Monitor.cpp\"}]\r\n\r\n  fuzzysort.highlight(fuzzysort.single('fs', 'Fuzzy Search'), '<b>', '</b>')\r\n  // <b>F</b>uzzy <b>S</b>earch\r\n*/\r\n\r\n// UMD (Universal Module Definition) for fuzzysort\r\n;(function(root, UMD) {\r\n  if(true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (UMD),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n  else {}\r\n})(this, function UMD() { function fuzzysortNew(instanceOptions) {\r\n\r\n  var fuzzysort = {\r\n\r\n    single: function(search, target, options) {\r\n      if(!search) return null\r\n      if(!isObj(search)) search = fuzzysort.getPreparedSearch(search)\r\n\r\n      if(!target) return null\r\n      if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n      var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo\r\n        : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo\r\n        : true\r\n      var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo\r\n      return algorithm(search, target, search[0])\r\n      // var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991\r\n      // var result = algorithm(search, target, search[0])\r\n      // if(result === null) return null\r\n      // if(result.score < threshold) return null\r\n      // return result\r\n    },\r\n\r\n    go: function(search, targets, options) {\r\n      if(!search) return noResults\r\n      search = fuzzysort.prepareSearch(search)\r\n      var searchLowerCode = search[0]\r\n\r\n      var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991\r\n      var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991\r\n      var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo\r\n        : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo\r\n        : true\r\n      var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo\r\n      var resultsLen = 0; var limitedCount = 0\r\n      var targetsLen = targets.length\r\n\r\n      // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]\r\n\r\n      // options.keys\r\n      if(options && options.keys) {\r\n        var scoreFn = options.scoreFn || defaultScoreFn\r\n        var keys = options.keys\r\n        var keysLen = keys.length\r\n        for(var i = targetsLen - 1; i >= 0; --i) { var obj = targets[i]\r\n          var objResults = new Array(keysLen)\r\n          for (var keyI = keysLen - 1; keyI >= 0; --keyI) {\r\n            var key = keys[keyI]\r\n            var target = getValue(obj, key)\r\n            if(!target) { objResults[keyI] = null; continue }\r\n            if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n            objResults[keyI] = algorithm(search, target, searchLowerCode)\r\n          }\r\n          objResults.obj = obj // before scoreFn so scoreFn can use it\r\n          var score = scoreFn(objResults)\r\n          if(score === null) continue\r\n          if(score < threshold) continue\r\n          objResults.score = score\r\n          if(resultsLen < limit) { q.add(objResults); ++resultsLen }\r\n          else {\r\n            ++limitedCount\r\n            if(score > q.peek().score) q.replaceTop(objResults)\r\n          }\r\n        }\r\n\r\n      // options.key\r\n      } else if(options && options.key) {\r\n        var key = options.key\r\n        for(var i = targetsLen - 1; i >= 0; --i) { var obj = targets[i]\r\n          var target = getValue(obj, key)\r\n          if(!target) continue\r\n          if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n          var result = algorithm(search, target, searchLowerCode)\r\n          if(result === null) continue\r\n          if(result.score < threshold) continue\r\n\r\n          // have to clone result so duplicate targets from different obj can each reference the correct obj\r\n          result = {target:result.target, _targetLowerCodes:null, _nextBeginningIndexes:null, score:result.score, indexes:result.indexes, obj:obj} // hidden\r\n\r\n          if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n          else {\r\n            ++limitedCount\r\n            if(result.score > q.peek().score) q.replaceTop(result)\r\n          }\r\n        }\r\n\r\n      // no keys\r\n      } else {\r\n        for(var i = targetsLen - 1; i >= 0; --i) { var target = targets[i]\r\n          if(!target) continue\r\n          if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n          var result = algorithm(search, target, searchLowerCode)\r\n          if(result === null) continue\r\n          if(result.score < threshold) continue\r\n          if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n          else {\r\n            ++limitedCount\r\n            if(result.score > q.peek().score) q.replaceTop(result)\r\n          }\r\n        }\r\n      }\r\n\r\n      if(resultsLen === 0) return noResults\r\n      var results = new Array(resultsLen)\r\n      for(var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll()\r\n      results.total = resultsLen + limitedCount\r\n      return results\r\n    },\r\n\r\n    goAsync: function(search, targets, options) {\r\n      var canceled = false\r\n      var p = new Promise(function(resolve, reject) {\r\n        if(!search) return resolve(noResults)\r\n        search = fuzzysort.prepareSearch(search)\r\n        var searchLowerCode = search[0]\r\n\r\n        var q = fastpriorityqueue()\r\n        var iCurrent = targets.length - 1\r\n        var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991\r\n        var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991\r\n        var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo\r\n          : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo\r\n          : true\r\n        var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo\r\n        var resultsLen = 0; var limitedCount = 0\r\n        function step() {\r\n          if(canceled) return reject('canceled')\r\n\r\n          var startMs = Date.now()\r\n\r\n          // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]\r\n\r\n          // options.keys\r\n          if(options && options.keys) {\r\n            var scoreFn = options.scoreFn || defaultScoreFn\r\n            var keys = options.keys\r\n            var keysLen = keys.length\r\n            for(; iCurrent >= 0; --iCurrent) { var obj = targets[iCurrent]\r\n              var objResults = new Array(keysLen)\r\n              for (var keyI = keysLen - 1; keyI >= 0; --keyI) {\r\n                var key = keys[keyI]\r\n                var target = getValue(obj, key)\r\n                if(!target) { objResults[keyI] = null; continue }\r\n                if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n                objResults[keyI] = algorithm(search, target, searchLowerCode)\r\n              }\r\n              objResults.obj = obj // before scoreFn so scoreFn can use it\r\n              var score = scoreFn(objResults)\r\n              if(score === null) continue\r\n              if(score < threshold) continue\r\n              objResults.score = score\r\n              if(resultsLen < limit) { q.add(objResults); ++resultsLen }\r\n              else {\r\n                ++limitedCount\r\n                if(score > q.peek().score) q.replaceTop(objResults)\r\n              }\r\n\r\n              if(iCurrent%1000/*itemsPerCheck*/ === 0) {\r\n                if(Date.now() - startMs >= 10/*asyncInterval*/) {\r\n                  isNode?setImmediate(step):setTimeout(step)\r\n                  return\r\n                }\r\n              }\r\n            }\r\n\r\n          // options.key\r\n          } else if(options && options.key) {\r\n            var key = options.key\r\n            for(; iCurrent >= 0; --iCurrent) { var obj = targets[iCurrent]\r\n              var target = getValue(obj, key)\r\n              if(!target) continue\r\n              if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n              var result = algorithm(search, target, searchLowerCode)\r\n              if(result === null) continue\r\n              if(result.score < threshold) continue\r\n\r\n              // have to clone result so duplicate targets from different obj can each reference the correct obj\r\n              result = {target:result.target, _targetLowerCodes:null, _nextBeginningIndexes:null, score:result.score, indexes:result.indexes, obj:obj} // hidden\r\n\r\n              if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n              else {\r\n                ++limitedCount\r\n                if(result.score > q.peek().score) q.replaceTop(result)\r\n              }\r\n\r\n              if(iCurrent%1000/*itemsPerCheck*/ === 0) {\r\n                if(Date.now() - startMs >= 10/*asyncInterval*/) {\r\n                  isNode?setImmediate(step):setTimeout(step)\r\n                  return\r\n                }\r\n              }\r\n            }\r\n\r\n          // no keys\r\n          } else {\r\n            for(; iCurrent >= 0; --iCurrent) { var target = targets[iCurrent]\r\n              if(!target) continue\r\n              if(!isObj(target)) target = fuzzysort.getPrepared(target)\r\n\r\n              var result = algorithm(search, target, searchLowerCode)\r\n              if(result === null) continue\r\n              if(result.score < threshold) continue\r\n              if(resultsLen < limit) { q.add(result); ++resultsLen }\r\n              else {\r\n                ++limitedCount\r\n                if(result.score > q.peek().score) q.replaceTop(result)\r\n              }\r\n\r\n              if(iCurrent%1000/*itemsPerCheck*/ === 0) {\r\n                if(Date.now() - startMs >= 10/*asyncInterval*/) {\r\n                  isNode?setImmediate(step):setTimeout(step)\r\n                  return\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          if(resultsLen === 0) return resolve(noResults)\r\n          var results = new Array(resultsLen)\r\n          for(var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll()\r\n          results.total = resultsLen + limitedCount\r\n          resolve(results)\r\n        }\r\n\r\n        isNode?setImmediate(step):step()\r\n      })\r\n      p.cancel = function() { canceled = true }\r\n      return p\r\n    },\r\n\r\n    highlight: function(result, hOpen, hClose) {\r\n      if(result === null) return null\r\n      if(hOpen === undefined) hOpen = '<b>'\r\n      if(hClose === undefined) hClose = '</b>'\r\n      var highlighted = ''\r\n      var matchesIndex = 0\r\n      var opened = false\r\n      var target = result.target\r\n      var targetLen = target.length\r\n      var matchesBest = result.indexes\r\n      for(var i = 0; i < targetLen; ++i) { var char = target[i]\r\n        if(matchesBest[matchesIndex] === i) {\r\n          ++matchesIndex\r\n          if(!opened) { opened = true\r\n            highlighted += hOpen\r\n          }\r\n\r\n          if(matchesIndex === matchesBest.length) {\r\n            highlighted += char + hClose + target.substr(i+1)\r\n            break\r\n          }\r\n        } else {\r\n          if(opened) { opened = false\r\n            highlighted += hClose\r\n          }\r\n        }\r\n        highlighted += char\r\n      }\r\n\r\n      return highlighted\r\n    },\r\n\r\n    prepare: function(target) {\r\n      if(!target) return\r\n      return {target:target, _targetLowerCodes:fuzzysort.prepareLowerCodes(target), _nextBeginningIndexes:null, score:null, indexes:null, obj:null} // hidden\r\n    },\r\n    prepareSlow: function(target) {\r\n      if(!target) return\r\n      return {target:target, _targetLowerCodes:fuzzysort.prepareLowerCodes(target), _nextBeginningIndexes:fuzzysort.prepareNextBeginningIndexes(target), score:null, indexes:null, obj:null} // hidden\r\n    },\r\n    prepareSearch: function(search) {\r\n      if(!search) return\r\n      return fuzzysort.prepareLowerCodes(search)\r\n    },\r\n\r\n\r\n\r\n    // Below this point is only internal code\r\n    // Below this point is only internal code\r\n    // Below this point is only internal code\r\n    // Below this point is only internal code\r\n\r\n\r\n\r\n    getPrepared: function(target) {\r\n      if(target.length > 999) return fuzzysort.prepare(target) // don't cache huge targets\r\n      var targetPrepared = preparedCache.get(target)\r\n      if(targetPrepared !== undefined) return targetPrepared\r\n      targetPrepared = fuzzysort.prepare(target)\r\n      preparedCache.set(target, targetPrepared)\r\n      return targetPrepared\r\n    },\r\n    getPreparedSearch: function(search) {\r\n      if(search.length > 999) return fuzzysort.prepareSearch(search) // don't cache huge searches\r\n      var searchPrepared = preparedSearchCache.get(search)\r\n      if(searchPrepared !== undefined) return searchPrepared\r\n      searchPrepared = fuzzysort.prepareSearch(search)\r\n      preparedSearchCache.set(search, searchPrepared)\r\n      return searchPrepared\r\n    },\r\n\r\n    algorithm: function(searchLowerCodes, prepared, searchLowerCode) {\r\n      var targetLowerCodes = prepared._targetLowerCodes\r\n      var searchLen = searchLowerCodes.length\r\n      var targetLen = targetLowerCodes.length\r\n      var searchI = 0 // where we at\r\n      var targetI = 0 // where you at\r\n      var typoSimpleI = 0\r\n      var matchesSimpleLen = 0\r\n\r\n      // very basic fuzzy match; to remove non-matching targets ASAP!\r\n      // walk through target. find sequential matches.\r\n      // if all chars aren't found then exit\r\n      for(;;) {\r\n        var isMatch = searchLowerCode === targetLowerCodes[targetI]\r\n        if(isMatch) {\r\n          matchesSimple[matchesSimpleLen++] = targetI\r\n          ++searchI; if(searchI === searchLen) break\r\n          searchLowerCode = searchLowerCodes[typoSimpleI===0?searchI : (typoSimpleI===searchI?searchI+1 : (typoSimpleI===searchI-1?searchI-1 : searchI))]\r\n        }\r\n\r\n        ++targetI; if(targetI >= targetLen) { // Failed to find searchI\r\n          // Check for typo or exit\r\n          // we go as far as possible before trying to transpose\r\n          // then we transpose backwards until we reach the beginning\r\n          for(;;) {\r\n            if(searchI <= 1) return null // not allowed to transpose first char\r\n            if(typoSimpleI === 0) { // we haven't tried to transpose yet\r\n              --searchI\r\n              var searchLowerCodeNew = searchLowerCodes[searchI]\r\n              if(searchLowerCode === searchLowerCodeNew) continue // doesn't make sense to transpose a repeat char\r\n              typoSimpleI = searchI\r\n            } else {\r\n              if(typoSimpleI === 1) return null // reached the end of the line for transposing\r\n              --typoSimpleI\r\n              searchI = typoSimpleI\r\n              searchLowerCode = searchLowerCodes[searchI + 1]\r\n              var searchLowerCodeNew = searchLowerCodes[searchI]\r\n              if(searchLowerCode === searchLowerCodeNew) continue // doesn't make sense to transpose a repeat char\r\n            }\r\n            matchesSimpleLen = searchI\r\n            targetI = matchesSimple[matchesSimpleLen - 1] + 1\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      var searchI = 0\r\n      var typoStrictI = 0\r\n      var successStrict = false\r\n      var matchesStrictLen = 0\r\n\r\n      var nextBeginningIndexes = prepared._nextBeginningIndexes\r\n      if(nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target)\r\n      var firstPossibleI = targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1]\r\n\r\n      // Our target string successfully matched all characters in sequence!\r\n      // Let's try a more advanced and strict test to improve the score\r\n      // only count it as a match if it's consecutive or a beginning character!\r\n      if(targetI !== targetLen) for(;;) {\r\n        if(targetI >= targetLen) {\r\n          // We failed to find a good spot for this search char, go back to the previous search char and force it forward\r\n          if(searchI <= 0) { // We failed to push chars forward for a better match\r\n            // transpose, starting from the beginning\r\n            ++typoStrictI; if(typoStrictI > searchLen-2) break\r\n            if(searchLowerCodes[typoStrictI] === searchLowerCodes[typoStrictI+1]) continue // doesn't make sense to transpose a repeat char\r\n            targetI = firstPossibleI\r\n            continue\r\n          }\r\n\r\n          --searchI\r\n          var lastMatch = matchesStrict[--matchesStrictLen]\r\n          targetI = nextBeginningIndexes[lastMatch]\r\n\r\n        } else {\r\n          var isMatch = searchLowerCodes[typoStrictI===0?searchI : (typoStrictI===searchI?searchI+1 : (typoStrictI===searchI-1?searchI-1 : searchI))] === targetLowerCodes[targetI]\r\n          if(isMatch) {\r\n            matchesStrict[matchesStrictLen++] = targetI\r\n            ++searchI; if(searchI === searchLen) { successStrict = true; break }\r\n            ++targetI\r\n          } else {\r\n            targetI = nextBeginningIndexes[targetI]\r\n          }\r\n        }\r\n      }\r\n\r\n      { // tally up the score & keep track of matches for highlighting later\r\n        if(successStrict) { var matchesBest = matchesStrict; var matchesBestLen = matchesStrictLen }\r\n        else { var matchesBest = matchesSimple; var matchesBestLen = matchesSimpleLen }\r\n        var score = 0\r\n        var lastTargetI = -1\r\n        for(var i = 0; i < searchLen; ++i) { var targetI = matchesBest[i]\r\n          // score only goes down if they're not consecutive\r\n          if(lastTargetI !== targetI - 1) score -= targetI\r\n          lastTargetI = targetI\r\n        }\r\n        if(!successStrict) {\r\n          score *= 1000\r\n          if(typoSimpleI !== 0) score += -20/*typoPenalty*/\r\n        } else {\r\n          if(typoStrictI !== 0) score += -20/*typoPenalty*/\r\n        }\r\n        score -= targetLen - searchLen\r\n        prepared.score = score\r\n        prepared.indexes = new Array(matchesBestLen); for(var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i]\r\n\r\n        return prepared\r\n      }\r\n    },\r\n\r\n    algorithmNoTypo: function(searchLowerCodes, prepared, searchLowerCode) {\r\n      var targetLowerCodes = prepared._targetLowerCodes\r\n      var searchLen = searchLowerCodes.length\r\n      var targetLen = targetLowerCodes.length\r\n      var searchI = 0 // where we at\r\n      var targetI = 0 // where you at\r\n      var matchesSimpleLen = 0\r\n\r\n      // very basic fuzzy match; to remove non-matching targets ASAP!\r\n      // walk through target. find sequential matches.\r\n      // if all chars aren't found then exit\r\n      for(;;) {\r\n        var isMatch = searchLowerCode === targetLowerCodes[targetI]\r\n        if(isMatch) {\r\n          matchesSimple[matchesSimpleLen++] = targetI\r\n          ++searchI; if(searchI === searchLen) break\r\n          searchLowerCode = searchLowerCodes[searchI]\r\n        }\r\n        ++targetI; if(targetI >= targetLen) return null // Failed to find searchI\r\n      }\r\n\r\n      var searchI = 0\r\n      var successStrict = false\r\n      var matchesStrictLen = 0\r\n\r\n      var nextBeginningIndexes = prepared._nextBeginningIndexes\r\n      if(nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target)\r\n      var firstPossibleI = targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1]\r\n\r\n      // Our target string successfully matched all characters in sequence!\r\n      // Let's try a more advanced and strict test to improve the score\r\n      // only count it as a match if it's consecutive or a beginning character!\r\n      if(targetI !== targetLen) for(;;) {\r\n        if(targetI >= targetLen) {\r\n          // We failed to find a good spot for this search char, go back to the previous search char and force it forward\r\n          if(searchI <= 0) break // We failed to push chars forward for a better match\r\n\r\n          --searchI\r\n          var lastMatch = matchesStrict[--matchesStrictLen]\r\n          targetI = nextBeginningIndexes[lastMatch]\r\n\r\n        } else {\r\n          var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI]\r\n          if(isMatch) {\r\n            matchesStrict[matchesStrictLen++] = targetI\r\n            ++searchI; if(searchI === searchLen) { successStrict = true; break }\r\n            ++targetI\r\n          } else {\r\n            targetI = nextBeginningIndexes[targetI]\r\n          }\r\n        }\r\n      }\r\n\r\n      { // tally up the score & keep track of matches for highlighting later\r\n        if(successStrict) { var matchesBest = matchesStrict; var matchesBestLen = matchesStrictLen }\r\n        else { var matchesBest = matchesSimple; var matchesBestLen = matchesSimpleLen }\r\n        var score = 0\r\n        var lastTargetI = -1\r\n        for(var i = 0; i < searchLen; ++i) { var targetI = matchesBest[i]\r\n          // score only goes down if they're not consecutive\r\n          if(lastTargetI !== targetI - 1) score -= targetI\r\n          lastTargetI = targetI\r\n        }\r\n        if(!successStrict) score *= 1000\r\n        score -= targetLen - searchLen\r\n        prepared.score = score\r\n        prepared.indexes = new Array(matchesBestLen); for(var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i]\r\n\r\n        return prepared\r\n      }\r\n    },\r\n\r\n    prepareLowerCodes: function(str) {\r\n      var strLen = str.length\r\n      var lowerCodes = [] // new Array(strLen)    sparse array is too slow\r\n      var lower = str.toLowerCase()\r\n      for(var i = 0; i < strLen; ++i) lowerCodes[i] = lower.charCodeAt(i)\r\n      return lowerCodes\r\n    },\r\n    prepareBeginningIndexes: function(target) {\r\n      var targetLen = target.length\r\n      var beginningIndexes = []; var beginningIndexesLen = 0\r\n      var wasUpper = false\r\n      var wasAlphanum = false\r\n      for(var i = 0; i < targetLen; ++i) {\r\n        var targetCode = target.charCodeAt(i)\r\n        var isUpper = targetCode>=65&&targetCode<=90\r\n        var isAlphanum = isUpper || targetCode>=97&&targetCode<=122 || targetCode>=48&&targetCode<=57\r\n        var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum\r\n        wasUpper = isUpper\r\n        wasAlphanum = isAlphanum\r\n        if(isBeginning) beginningIndexes[beginningIndexesLen++] = i\r\n      }\r\n      return beginningIndexes\r\n    },\r\n    prepareNextBeginningIndexes: function(target) {\r\n      var targetLen = target.length\r\n      var beginningIndexes = fuzzysort.prepareBeginningIndexes(target)\r\n      var nextBeginningIndexes = [] // new Array(targetLen)     sparse array is too slow\r\n      var lastIsBeginning = beginningIndexes[0]\r\n      var lastIsBeginningI = 0\r\n      for(var i = 0; i < targetLen; ++i) {\r\n        if(lastIsBeginning > i) {\r\n          nextBeginningIndexes[i] = lastIsBeginning\r\n        } else {\r\n          lastIsBeginning = beginningIndexes[++lastIsBeginningI]\r\n          nextBeginningIndexes[i] = lastIsBeginning===undefined ? targetLen : lastIsBeginning\r\n        }\r\n      }\r\n      return nextBeginningIndexes\r\n    },\r\n\r\n    cleanup: cleanup,\r\n    new: fuzzysortNew,\r\n  }\r\n  return fuzzysort\r\n} // fuzzysortNew\r\n\r\n// This stuff is outside fuzzysortNew, because it's shared with instances of fuzzysort.new()\r\nvar isNode =  true && typeof window === 'undefined'\r\n// var MAX_INT = Number.MAX_SAFE_INTEGER\r\n// var MIN_INT = Number.MIN_VALUE\r\nvar preparedCache = new Map()\r\nvar preparedSearchCache = new Map()\r\nvar noResults = []; noResults.total = 0\r\nvar matchesSimple = []; var matchesStrict = []\r\nfunction cleanup() { preparedCache.clear(); preparedSearchCache.clear(); matchesSimple = []; matchesStrict = [] }\r\nfunction defaultScoreFn(a) {\r\n  var max = -9007199254740991\r\n  for (var i = a.length - 1; i >= 0; --i) {\r\n    var result = a[i]; if(result === null) continue\r\n    var score = result.score\r\n    if(score > max) max = score\r\n  }\r\n  if(max === -9007199254740991) return null\r\n  return max\r\n}\r\n\r\n// prop = 'key'              2.5ms optimized for this case, seems to be about as fast as direct obj[prop]\r\n// prop = 'key1.key2'        10ms\r\n// prop = ['key1', 'key2']   27ms\r\nfunction getValue(obj, prop) {\r\n  var tmp = obj[prop]; if(tmp !== undefined) return tmp\r\n  var segs = prop\r\n  if(!Array.isArray(prop)) segs = prop.split('.')\r\n  var len = segs.length\r\n  var i = -1\r\n  while (obj && (++i < len)) obj = obj[segs[i]]\r\n  return obj\r\n}\r\n\r\nfunction isObj(x) { return typeof x === 'object' } // faster as a function\r\n\r\n// Hacked version of https://github.com/lemire/FastPriorityQueue.js\r\nvar fastpriorityqueue=function(){var r=[],o=0,e={};function n(){for(var e=0,n=r[e],c=1;c<o;){var f=c+1;e=c,f<o&&r[f].score<r[c].score&&(e=f),r[e-1>>1]=r[e],c=1+(e<<1)}for(var a=e-1>>1;e>0&&n.score<r[a].score;a=(e=a)-1>>1)r[e]=r[a];r[e]=n}return e.add=function(e){var n=o;r[o++]=e;for(var c=n-1>>1;n>0&&e.score<r[c].score;c=(n=c)-1>>1)r[n]=r[c];r[n]=e},e.poll=function(){if(0!==o){var e=r[0];return r[0]=r[--o],n(),e}},e.peek=function(e){if(0!==o)return r[0]},e.replaceTop=function(o){r[0]=o,n()},e};\r\nvar q = fastpriorityqueue() // reuse this, except for async, it needs to make its own\r\n\r\nreturn fuzzysortNew()\r\n}) // UMD\r\n\r\n// TODO: (performance) wasm version!?\r\n\r\n// TODO: (performance) layout memory in an optimal way to go fast by avoiding cache misses\r\n\r\n// TODO: (performance) preparedCache is a memory leak\r\n\r\n// TODO: (like sublime) backslash === forwardslash\r\n\r\n// TODO: (performance) i have no idea how well optizmied the allowing typos algorithm is\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQSxPQUFPLHVDQUF1QyxHQUFHLG9DQUFvQztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsS0FBSyxJQUEwQyxFQUFFLGlDQUFPLEVBQUUsb0NBQUUsR0FBRztBQUFBO0FBQUE7QUFBQSxrR0FBQztBQUNoRSxPQUFPLEVBQ3NCO0FBQzdCLENBQUMseUJBQXlCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLE9BQU87QUFDbkQ7QUFDQSx1Q0FBdUMsV0FBVztBQUNsRDtBQUNBO0FBQ0EsMEJBQTBCLHlCQUF5QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsbUJBQW1CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0Esb0NBQW9DLFFBQVEsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsK0hBQStIO0FBQ25KO0FBQ0EsbUNBQW1DLGVBQWU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isb0NBQW9DLFFBQVEsT0FBTztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZUFBZTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixlQUFlLGNBQWM7QUFDL0M7QUFDQSwyQ0FBMkMsV0FBVztBQUN0RDtBQUNBO0FBQ0EsOEJBQThCLHlCQUF5QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsbUJBQW1CO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxrQkFBa0IsZUFBZSxjQUFjO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrSEFBK0g7QUFDdko7QUFDQSx1Q0FBdUMsZUFBZTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLGtCQUFrQixlQUFlLGNBQWM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGVBQWU7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLDhCQUE4QjtBQUM5QjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGVBQWUsT0FBTztBQUMzQztBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNJQUFzSTtBQUNwSixLQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQWMsK0tBQStLO0FBQzdMLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMkJBQTJCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0QkFBNEIsc0JBQXNCO0FBQ3pFO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsNEJBQTRCLGlDQUFpQztBQUM3RCxlQUFlLGlDQUFpQztBQUNoRDtBQUNBO0FBQ0EsdUJBQXVCLGVBQWUsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBZ0MsUUFBUTtBQUM5RjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNEJBQTRCLHNCQUFzQjtBQUN6RTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDRCQUE0QixpQ0FBaUM7QUFDN0QsZUFBZSxpQ0FBaUM7QUFDaEQ7QUFDQTtBQUNBLHVCQUF1QixlQUFlLE9BQU87QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQWdDLFFBQVE7QUFDOUY7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsWUFBWTtBQUNqQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLGFBQWEsS0FBOEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHFCQUFxQix1QkFBdUIsNkJBQTZCLG9CQUFvQjtBQUM3RjtBQUNBO0FBQ0EsNkJBQTZCLFFBQVE7QUFDckMsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwrQkFBK0I7QUFDbkQ7QUFDQTtBQUNBLGlDQUFpQyxrQkFBa0IsYUFBYSx1QkFBdUIsSUFBSSxFQUFFLFVBQVUsZ0VBQWdFLGlCQUFpQix3QkFBd0IsdUJBQXVCLE9BQU8seUJBQXlCLFFBQVEsU0FBUyxpQkFBaUIsd0JBQXdCLHVCQUF1QixPQUFPLG1CQUFtQixVQUFVLFdBQVcsMEJBQTBCLG9CQUFvQixxQkFBcUIsMEJBQTBCLFdBQVc7QUFDL2U7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpY2stc2NvcmUtZGVtby8uL25vZGVfbW9kdWxlcy9mdXp6eXNvcnQvZnV6enlzb3J0LmpzP2JiZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuV0hBVDogU3VibGltZVRleHQtbGlrZSBGdXp6eSBTZWFyY2hcclxuXHJcblVTQUdFOlxyXG4gIGZ1enp5c29ydC5zaW5nbGUoJ2ZzJywgJ0Z1enp5IFNlYXJjaCcpIC8vIHtzY29yZTogLTE2fVxyXG4gIGZ1enp5c29ydC5zaW5nbGUoJ3Rlc3QnLCAndGVzdCcpIC8vIHtzY29yZTogMH1cclxuICBmdXp6eXNvcnQuc2luZ2xlKCdkb2VzbnQgZXhpc3QnLCAndGFyZ2V0JykgLy8gbnVsbFxyXG5cclxuICBmdXp6eXNvcnQuZ28oJ21yJywgWydNb25pdG9yLmNwcCcsICdNZXNoUmVuZGVyZXIuY3BwJ10pXHJcbiAgLy8gW3tzY29yZTogLTE4LCB0YXJnZXQ6IFwiTWVzaFJlbmRlcmVyLmNwcFwifSwge3Njb3JlOiAtNjAwOSwgdGFyZ2V0OiBcIk1vbml0b3IuY3BwXCJ9XVxyXG5cclxuICBmdXp6eXNvcnQuaGlnaGxpZ2h0KGZ1enp5c29ydC5zaW5nbGUoJ2ZzJywgJ0Z1enp5IFNlYXJjaCcpLCAnPGI+JywgJzwvYj4nKVxyXG4gIC8vIDxiPkY8L2I+dXp6eSA8Yj5TPC9iPmVhcmNoXHJcbiovXHJcblxyXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbikgZm9yIGZ1enp5c29ydFxyXG47KGZ1bmN0aW9uKHJvb3QsIFVNRCkge1xyXG4gIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFtdLCBVTUQpXHJcbiAgZWxzZSBpZih0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBVTUQoKVxyXG4gIGVsc2Ugcm9vdC5mdXp6eXNvcnQgPSBVTUQoKVxyXG59KSh0aGlzLCBmdW5jdGlvbiBVTUQoKSB7IGZ1bmN0aW9uIGZ1enp5c29ydE5ldyhpbnN0YW5jZU9wdGlvbnMpIHtcclxuXHJcbiAgdmFyIGZ1enp5c29ydCA9IHtcclxuXHJcbiAgICBzaW5nbGU6IGZ1bmN0aW9uKHNlYXJjaCwgdGFyZ2V0LCBvcHRpb25zKSB7XHJcbiAgICAgIGlmKCFzZWFyY2gpIHJldHVybiBudWxsXHJcbiAgICAgIGlmKCFpc09iaihzZWFyY2gpKSBzZWFyY2ggPSBmdXp6eXNvcnQuZ2V0UHJlcGFyZWRTZWFyY2goc2VhcmNoKVxyXG5cclxuICAgICAgaWYoIXRhcmdldCkgcmV0dXJuIG51bGxcclxuICAgICAgaWYoIWlzT2JqKHRhcmdldCkpIHRhcmdldCA9IGZ1enp5c29ydC5nZXRQcmVwYXJlZCh0YXJnZXQpXHJcblxyXG4gICAgICB2YXIgYWxsb3dUeXBvID0gb3B0aW9ucyAmJiBvcHRpb25zLmFsbG93VHlwbyE9PXVuZGVmaW5lZCA/IG9wdGlvbnMuYWxsb3dUeXBvXHJcbiAgICAgICAgOiBpbnN0YW5jZU9wdGlvbnMgJiYgaW5zdGFuY2VPcHRpb25zLmFsbG93VHlwbyE9PXVuZGVmaW5lZCA/IGluc3RhbmNlT3B0aW9ucy5hbGxvd1R5cG9cclxuICAgICAgICA6IHRydWVcclxuICAgICAgdmFyIGFsZ29yaXRobSA9IGFsbG93VHlwbyA/IGZ1enp5c29ydC5hbGdvcml0aG0gOiBmdXp6eXNvcnQuYWxnb3JpdGhtTm9UeXBvXHJcbiAgICAgIHJldHVybiBhbGdvcml0aG0oc2VhcmNoLCB0YXJnZXQsIHNlYXJjaFswXSlcclxuICAgICAgLy8gdmFyIHRocmVzaG9sZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aHJlc2hvbGQgfHwgaW5zdGFuY2VPcHRpb25zICYmIGluc3RhbmNlT3B0aW9ucy50aHJlc2hvbGQgfHwgLTkwMDcxOTkyNTQ3NDA5OTFcclxuICAgICAgLy8gdmFyIHJlc3VsdCA9IGFsZ29yaXRobShzZWFyY2gsIHRhcmdldCwgc2VhcmNoWzBdKVxyXG4gICAgICAvLyBpZihyZXN1bHQgPT09IG51bGwpIHJldHVybiBudWxsXHJcbiAgICAgIC8vIGlmKHJlc3VsdC5zY29yZSA8IHRocmVzaG9sZCkgcmV0dXJuIG51bGxcclxuICAgICAgLy8gcmV0dXJuIHJlc3VsdFxyXG4gICAgfSxcclxuXHJcbiAgICBnbzogZnVuY3Rpb24oc2VhcmNoLCB0YXJnZXRzLCBvcHRpb25zKSB7XHJcbiAgICAgIGlmKCFzZWFyY2gpIHJldHVybiBub1Jlc3VsdHNcclxuICAgICAgc2VhcmNoID0gZnV6enlzb3J0LnByZXBhcmVTZWFyY2goc2VhcmNoKVxyXG4gICAgICB2YXIgc2VhcmNoTG93ZXJDb2RlID0gc2VhcmNoWzBdXHJcblxyXG4gICAgICB2YXIgdGhyZXNob2xkID0gb3B0aW9ucyAmJiBvcHRpb25zLnRocmVzaG9sZCB8fCBpbnN0YW5jZU9wdGlvbnMgJiYgaW5zdGFuY2VPcHRpb25zLnRocmVzaG9sZCB8fCAtOTAwNzE5OTI1NDc0MDk5MVxyXG4gICAgICB2YXIgbGltaXQgPSBvcHRpb25zICYmIG9wdGlvbnMubGltaXQgfHwgaW5zdGFuY2VPcHRpb25zICYmIGluc3RhbmNlT3B0aW9ucy5saW1pdCB8fCA5MDA3MTk5MjU0NzQwOTkxXHJcbiAgICAgIHZhciBhbGxvd1R5cG8gPSBvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dUeXBvIT09dW5kZWZpbmVkID8gb3B0aW9ucy5hbGxvd1R5cG9cclxuICAgICAgICA6IGluc3RhbmNlT3B0aW9ucyAmJiBpbnN0YW5jZU9wdGlvbnMuYWxsb3dUeXBvIT09dW5kZWZpbmVkID8gaW5zdGFuY2VPcHRpb25zLmFsbG93VHlwb1xyXG4gICAgICAgIDogdHJ1ZVxyXG4gICAgICB2YXIgYWxnb3JpdGhtID0gYWxsb3dUeXBvID8gZnV6enlzb3J0LmFsZ29yaXRobSA6IGZ1enp5c29ydC5hbGdvcml0aG1Ob1R5cG9cclxuICAgICAgdmFyIHJlc3VsdHNMZW4gPSAwOyB2YXIgbGltaXRlZENvdW50ID0gMFxyXG4gICAgICB2YXIgdGFyZ2V0c0xlbiA9IHRhcmdldHMubGVuZ3RoXHJcblxyXG4gICAgICAvLyBUaGlzIGNvZGUgaXMgY29weS9wYXN0ZWQgMyB0aW1lcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBbb3B0aW9ucy5rZXlzLCBvcHRpb25zLmtleSwgbm8ga2V5c11cclxuXHJcbiAgICAgIC8vIG9wdGlvbnMua2V5c1xyXG4gICAgICBpZihvcHRpb25zICYmIG9wdGlvbnMua2V5cykge1xyXG4gICAgICAgIHZhciBzY29yZUZuID0gb3B0aW9ucy5zY29yZUZuIHx8IGRlZmF1bHRTY29yZUZuXHJcbiAgICAgICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXNcclxuICAgICAgICB2YXIga2V5c0xlbiA9IGtleXMubGVuZ3RoXHJcbiAgICAgICAgZm9yKHZhciBpID0gdGFyZ2V0c0xlbiAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciBvYmogPSB0YXJnZXRzW2ldXHJcbiAgICAgICAgICB2YXIgb2JqUmVzdWx0cyA9IG5ldyBBcnJheShrZXlzTGVuKVxyXG4gICAgICAgICAgZm9yICh2YXIga2V5SSA9IGtleXNMZW4gLSAxOyBrZXlJID49IDA7IC0ta2V5SSkge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1trZXlJXVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0VmFsdWUob2JqLCBrZXkpXHJcbiAgICAgICAgICAgIGlmKCF0YXJnZXQpIHsgb2JqUmVzdWx0c1trZXlJXSA9IG51bGw7IGNvbnRpbnVlIH1cclxuICAgICAgICAgICAgaWYoIWlzT2JqKHRhcmdldCkpIHRhcmdldCA9IGZ1enp5c29ydC5nZXRQcmVwYXJlZCh0YXJnZXQpXHJcblxyXG4gICAgICAgICAgICBvYmpSZXN1bHRzW2tleUldID0gYWxnb3JpdGhtKHNlYXJjaCwgdGFyZ2V0LCBzZWFyY2hMb3dlckNvZGUpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBvYmpSZXN1bHRzLm9iaiA9IG9iaiAvLyBiZWZvcmUgc2NvcmVGbiBzbyBzY29yZUZuIGNhbiB1c2UgaXRcclxuICAgICAgICAgIHZhciBzY29yZSA9IHNjb3JlRm4ob2JqUmVzdWx0cylcclxuICAgICAgICAgIGlmKHNjb3JlID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgICAgICAgaWYoc2NvcmUgPCB0aHJlc2hvbGQpIGNvbnRpbnVlXHJcbiAgICAgICAgICBvYmpSZXN1bHRzLnNjb3JlID0gc2NvcmVcclxuICAgICAgICAgIGlmKHJlc3VsdHNMZW4gPCBsaW1pdCkgeyBxLmFkZChvYmpSZXN1bHRzKTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICArK2xpbWl0ZWRDb3VudFxyXG4gICAgICAgICAgICBpZihzY29yZSA+IHEucGVlaygpLnNjb3JlKSBxLnJlcGxhY2VUb3Aob2JqUmVzdWx0cylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAvLyBvcHRpb25zLmtleVxyXG4gICAgICB9IGVsc2UgaWYob3B0aW9ucyAmJiBvcHRpb25zLmtleSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBvcHRpb25zLmtleVxyXG4gICAgICAgIGZvcih2YXIgaSA9IHRhcmdldHNMZW4gLSAxOyBpID49IDA7IC0taSkgeyB2YXIgb2JqID0gdGFyZ2V0c1tpXVxyXG4gICAgICAgICAgdmFyIHRhcmdldCA9IGdldFZhbHVlKG9iaiwga2V5KVxyXG4gICAgICAgICAgaWYoIXRhcmdldCkgY29udGludWVcclxuICAgICAgICAgIGlmKCFpc09iaih0YXJnZXQpKSB0YXJnZXQgPSBmdXp6eXNvcnQuZ2V0UHJlcGFyZWQodGFyZ2V0KVxyXG5cclxuICAgICAgICAgIHZhciByZXN1bHQgPSBhbGdvcml0aG0oc2VhcmNoLCB0YXJnZXQsIHNlYXJjaExvd2VyQ29kZSlcclxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gbnVsbCkgY29udGludWVcclxuICAgICAgICAgIGlmKHJlc3VsdC5zY29yZSA8IHRocmVzaG9sZCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAvLyBoYXZlIHRvIGNsb25lIHJlc3VsdCBzbyBkdXBsaWNhdGUgdGFyZ2V0cyBmcm9tIGRpZmZlcmVudCBvYmogY2FuIGVhY2ggcmVmZXJlbmNlIHRoZSBjb3JyZWN0IG9ialxyXG4gICAgICAgICAgcmVzdWx0ID0ge3RhcmdldDpyZXN1bHQudGFyZ2V0LCBfdGFyZ2V0TG93ZXJDb2RlczpudWxsLCBfbmV4dEJlZ2lubmluZ0luZGV4ZXM6bnVsbCwgc2NvcmU6cmVzdWx0LnNjb3JlLCBpbmRleGVzOnJlc3VsdC5pbmRleGVzLCBvYmo6b2JqfSAvLyBoaWRkZW5cclxuXHJcbiAgICAgICAgICBpZihyZXN1bHRzTGVuIDwgbGltaXQpIHsgcS5hZGQocmVzdWx0KTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICArK2xpbWl0ZWRDb3VudFxyXG4gICAgICAgICAgICBpZihyZXN1bHQuc2NvcmUgPiBxLnBlZWsoKS5zY29yZSkgcS5yZXBsYWNlVG9wKHJlc3VsdClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAvLyBubyBrZXlzXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yKHZhciBpID0gdGFyZ2V0c0xlbiAtIDE7IGkgPj0gMDsgLS1pKSB7IHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldXHJcbiAgICAgICAgICBpZighdGFyZ2V0KSBjb250aW51ZVxyXG4gICAgICAgICAgaWYoIWlzT2JqKHRhcmdldCkpIHRhcmdldCA9IGZ1enp5c29ydC5nZXRQcmVwYXJlZCh0YXJnZXQpXHJcblxyXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGFsZ29yaXRobShzZWFyY2gsIHRhcmdldCwgc2VhcmNoTG93ZXJDb2RlKVxyXG4gICAgICAgICAgaWYocmVzdWx0ID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgICAgICAgaWYocmVzdWx0LnNjb3JlIDwgdGhyZXNob2xkKSBjb250aW51ZVxyXG4gICAgICAgICAgaWYocmVzdWx0c0xlbiA8IGxpbWl0KSB7IHEuYWRkKHJlc3VsdCk7ICsrcmVzdWx0c0xlbiB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgKytsaW1pdGVkQ291bnRcclxuICAgICAgICAgICAgaWYocmVzdWx0LnNjb3JlID4gcS5wZWVrKCkuc2NvcmUpIHEucmVwbGFjZVRvcChyZXN1bHQpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZihyZXN1bHRzTGVuID09PSAwKSByZXR1cm4gbm9SZXN1bHRzXHJcbiAgICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KHJlc3VsdHNMZW4pXHJcbiAgICAgIGZvcih2YXIgaSA9IHJlc3VsdHNMZW4gLSAxOyBpID49IDA7IC0taSkgcmVzdWx0c1tpXSA9IHEucG9sbCgpXHJcbiAgICAgIHJlc3VsdHMudG90YWwgPSByZXN1bHRzTGVuICsgbGltaXRlZENvdW50XHJcbiAgICAgIHJldHVybiByZXN1bHRzXHJcbiAgICB9LFxyXG5cclxuICAgIGdvQXN5bmM6IGZ1bmN0aW9uKHNlYXJjaCwgdGFyZ2V0cywgb3B0aW9ucykge1xyXG4gICAgICB2YXIgY2FuY2VsZWQgPSBmYWxzZVxyXG4gICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGlmKCFzZWFyY2gpIHJldHVybiByZXNvbHZlKG5vUmVzdWx0cylcclxuICAgICAgICBzZWFyY2ggPSBmdXp6eXNvcnQucHJlcGFyZVNlYXJjaChzZWFyY2gpXHJcbiAgICAgICAgdmFyIHNlYXJjaExvd2VyQ29kZSA9IHNlYXJjaFswXVxyXG5cclxuICAgICAgICB2YXIgcSA9IGZhc3Rwcmlvcml0eXF1ZXVlKClcclxuICAgICAgICB2YXIgaUN1cnJlbnQgPSB0YXJnZXRzLmxlbmd0aCAtIDFcclxuICAgICAgICB2YXIgdGhyZXNob2xkID0gb3B0aW9ucyAmJiBvcHRpb25zLnRocmVzaG9sZCB8fCBpbnN0YW5jZU9wdGlvbnMgJiYgaW5zdGFuY2VPcHRpb25zLnRocmVzaG9sZCB8fCAtOTAwNzE5OTI1NDc0MDk5MVxyXG4gICAgICAgIHZhciBsaW1pdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5saW1pdCB8fCBpbnN0YW5jZU9wdGlvbnMgJiYgaW5zdGFuY2VPcHRpb25zLmxpbWl0IHx8IDkwMDcxOTkyNTQ3NDA5OTFcclxuICAgICAgICB2YXIgYWxsb3dUeXBvID0gb3B0aW9ucyAmJiBvcHRpb25zLmFsbG93VHlwbyE9PXVuZGVmaW5lZCA/IG9wdGlvbnMuYWxsb3dUeXBvXHJcbiAgICAgICAgICA6IGluc3RhbmNlT3B0aW9ucyAmJiBpbnN0YW5jZU9wdGlvbnMuYWxsb3dUeXBvIT09dW5kZWZpbmVkID8gaW5zdGFuY2VPcHRpb25zLmFsbG93VHlwb1xyXG4gICAgICAgICAgOiB0cnVlXHJcbiAgICAgICAgdmFyIGFsZ29yaXRobSA9IGFsbG93VHlwbyA/IGZ1enp5c29ydC5hbGdvcml0aG0gOiBmdXp6eXNvcnQuYWxnb3JpdGhtTm9UeXBvXHJcbiAgICAgICAgdmFyIHJlc3VsdHNMZW4gPSAwOyB2YXIgbGltaXRlZENvdW50ID0gMFxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAoKSB7XHJcbiAgICAgICAgICBpZihjYW5jZWxlZCkgcmV0dXJuIHJlamVjdCgnY2FuY2VsZWQnKVxyXG5cclxuICAgICAgICAgIHZhciBzdGFydE1zID0gRGF0ZS5ub3coKVxyXG5cclxuICAgICAgICAgIC8vIFRoaXMgY29kZSBpcyBjb3B5L3Bhc3RlZCAzIHRpbWVzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zIFtvcHRpb25zLmtleXMsIG9wdGlvbnMua2V5LCBubyBrZXlzXVxyXG5cclxuICAgICAgICAgIC8vIG9wdGlvbnMua2V5c1xyXG4gICAgICAgICAgaWYob3B0aW9ucyAmJiBvcHRpb25zLmtleXMpIHtcclxuICAgICAgICAgICAgdmFyIHNjb3JlRm4gPSBvcHRpb25zLnNjb3JlRm4gfHwgZGVmYXVsdFNjb3JlRm5cclxuICAgICAgICAgICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXNcclxuICAgICAgICAgICAgdmFyIGtleXNMZW4gPSBrZXlzLmxlbmd0aFxyXG4gICAgICAgICAgICBmb3IoOyBpQ3VycmVudCA+PSAwOyAtLWlDdXJyZW50KSB7IHZhciBvYmogPSB0YXJnZXRzW2lDdXJyZW50XVxyXG4gICAgICAgICAgICAgIHZhciBvYmpSZXN1bHRzID0gbmV3IEFycmF5KGtleXNMZW4pXHJcbiAgICAgICAgICAgICAgZm9yICh2YXIga2V5SSA9IGtleXNMZW4gLSAxOyBrZXlJID49IDA7IC0ta2V5SSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNba2V5SV1cclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBnZXRWYWx1ZShvYmosIGtleSlcclxuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQpIHsgb2JqUmVzdWx0c1trZXlJXSA9IG51bGw7IGNvbnRpbnVlIH1cclxuICAgICAgICAgICAgICAgIGlmKCFpc09iaih0YXJnZXQpKSB0YXJnZXQgPSBmdXp6eXNvcnQuZ2V0UHJlcGFyZWQodGFyZ2V0KVxyXG5cclxuICAgICAgICAgICAgICAgIG9ialJlc3VsdHNba2V5SV0gPSBhbGdvcml0aG0oc2VhcmNoLCB0YXJnZXQsIHNlYXJjaExvd2VyQ29kZSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgb2JqUmVzdWx0cy5vYmogPSBvYmogLy8gYmVmb3JlIHNjb3JlRm4gc28gc2NvcmVGbiBjYW4gdXNlIGl0XHJcbiAgICAgICAgICAgICAgdmFyIHNjb3JlID0gc2NvcmVGbihvYmpSZXN1bHRzKVxyXG4gICAgICAgICAgICAgIGlmKHNjb3JlID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIGlmKHNjb3JlIDwgdGhyZXNob2xkKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIG9ialJlc3VsdHMuc2NvcmUgPSBzY29yZVxyXG4gICAgICAgICAgICAgIGlmKHJlc3VsdHNMZW4gPCBsaW1pdCkgeyBxLmFkZChvYmpSZXN1bHRzKTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICsrbGltaXRlZENvdW50XHJcbiAgICAgICAgICAgICAgICBpZihzY29yZSA+IHEucGVlaygpLnNjb3JlKSBxLnJlcGxhY2VUb3Aob2JqUmVzdWx0cylcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmKGlDdXJyZW50JTEwMDAvKml0ZW1zUGVyQ2hlY2sqLyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYoRGF0ZS5ub3coKSAtIHN0YXJ0TXMgPj0gMTAvKmFzeW5jSW50ZXJ2YWwqLykge1xyXG4gICAgICAgICAgICAgICAgICBpc05vZGU/c2V0SW1tZWRpYXRlKHN0ZXApOnNldFRpbWVvdXQoc3RlcClcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gb3B0aW9ucy5rZXlcclxuICAgICAgICAgIH0gZWxzZSBpZihvcHRpb25zICYmIG9wdGlvbnMua2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSBvcHRpb25zLmtleVxyXG4gICAgICAgICAgICBmb3IoOyBpQ3VycmVudCA+PSAwOyAtLWlDdXJyZW50KSB7IHZhciBvYmogPSB0YXJnZXRzW2lDdXJyZW50XVxyXG4gICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBnZXRWYWx1ZShvYmosIGtleSlcclxuICAgICAgICAgICAgICBpZighdGFyZ2V0KSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIGlmKCFpc09iaih0YXJnZXQpKSB0YXJnZXQgPSBmdXp6eXNvcnQuZ2V0UHJlcGFyZWQodGFyZ2V0KVxyXG5cclxuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWxnb3JpdGhtKHNlYXJjaCwgdGFyZ2V0LCBzZWFyY2hMb3dlckNvZGUpXHJcbiAgICAgICAgICAgICAgaWYocmVzdWx0ID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIGlmKHJlc3VsdC5zY29yZSA8IHRocmVzaG9sZCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgLy8gaGF2ZSB0byBjbG9uZSByZXN1bHQgc28gZHVwbGljYXRlIHRhcmdldHMgZnJvbSBkaWZmZXJlbnQgb2JqIGNhbiBlYWNoIHJlZmVyZW5jZSB0aGUgY29ycmVjdCBvYmpcclxuICAgICAgICAgICAgICByZXN1bHQgPSB7dGFyZ2V0OnJlc3VsdC50YXJnZXQsIF90YXJnZXRMb3dlckNvZGVzOm51bGwsIF9uZXh0QmVnaW5uaW5nSW5kZXhlczpudWxsLCBzY29yZTpyZXN1bHQuc2NvcmUsIGluZGV4ZXM6cmVzdWx0LmluZGV4ZXMsIG9iajpvYmp9IC8vIGhpZGRlblxyXG5cclxuICAgICAgICAgICAgICBpZihyZXN1bHRzTGVuIDwgbGltaXQpIHsgcS5hZGQocmVzdWx0KTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICsrbGltaXRlZENvdW50XHJcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQuc2NvcmUgPiBxLnBlZWsoKS5zY29yZSkgcS5yZXBsYWNlVG9wKHJlc3VsdClcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmKGlDdXJyZW50JTEwMDAvKml0ZW1zUGVyQ2hlY2sqLyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYoRGF0ZS5ub3coKSAtIHN0YXJ0TXMgPj0gMTAvKmFzeW5jSW50ZXJ2YWwqLykge1xyXG4gICAgICAgICAgICAgICAgICBpc05vZGU/c2V0SW1tZWRpYXRlKHN0ZXApOnNldFRpbWVvdXQoc3RlcClcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gbm8ga2V5c1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yKDsgaUN1cnJlbnQgPj0gMDsgLS1pQ3VycmVudCkgeyB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1tpQ3VycmVudF1cclxuICAgICAgICAgICAgICBpZighdGFyZ2V0KSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIGlmKCFpc09iaih0YXJnZXQpKSB0YXJnZXQgPSBmdXp6eXNvcnQuZ2V0UHJlcGFyZWQodGFyZ2V0KVxyXG5cclxuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYWxnb3JpdGhtKHNlYXJjaCwgdGFyZ2V0LCBzZWFyY2hMb3dlckNvZGUpXHJcbiAgICAgICAgICAgICAgaWYocmVzdWx0ID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgIGlmKHJlc3VsdC5zY29yZSA8IHRocmVzaG9sZCkgY29udGludWVcclxuICAgICAgICAgICAgICBpZihyZXN1bHRzTGVuIDwgbGltaXQpIHsgcS5hZGQocmVzdWx0KTsgKytyZXN1bHRzTGVuIH1cclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICsrbGltaXRlZENvdW50XHJcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQuc2NvcmUgPiBxLnBlZWsoKS5zY29yZSkgcS5yZXBsYWNlVG9wKHJlc3VsdClcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmKGlDdXJyZW50JTEwMDAvKml0ZW1zUGVyQ2hlY2sqLyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYoRGF0ZS5ub3coKSAtIHN0YXJ0TXMgPj0gMTAvKmFzeW5jSW50ZXJ2YWwqLykge1xyXG4gICAgICAgICAgICAgICAgICBpc05vZGU/c2V0SW1tZWRpYXRlKHN0ZXApOnNldFRpbWVvdXQoc3RlcClcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYocmVzdWx0c0xlbiA9PT0gMCkgcmV0dXJuIHJlc29sdmUobm9SZXN1bHRzKVxyXG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkocmVzdWx0c0xlbilcclxuICAgICAgICAgIGZvcih2YXIgaSA9IHJlc3VsdHNMZW4gLSAxOyBpID49IDA7IC0taSkgcmVzdWx0c1tpXSA9IHEucG9sbCgpXHJcbiAgICAgICAgICByZXN1bHRzLnRvdGFsID0gcmVzdWx0c0xlbiArIGxpbWl0ZWRDb3VudFxyXG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNOb2RlP3NldEltbWVkaWF0ZShzdGVwKTpzdGVwKClcclxuICAgICAgfSlcclxuICAgICAgcC5jYW5jZWwgPSBmdW5jdGlvbigpIHsgY2FuY2VsZWQgPSB0cnVlIH1cclxuICAgICAgcmV0dXJuIHBcclxuICAgIH0sXHJcblxyXG4gICAgaGlnaGxpZ2h0OiBmdW5jdGlvbihyZXN1bHQsIGhPcGVuLCBoQ2xvc2UpIHtcclxuICAgICAgaWYocmVzdWx0ID09PSBudWxsKSByZXR1cm4gbnVsbFxyXG4gICAgICBpZihoT3BlbiA9PT0gdW5kZWZpbmVkKSBoT3BlbiA9ICc8Yj4nXHJcbiAgICAgIGlmKGhDbG9zZSA9PT0gdW5kZWZpbmVkKSBoQ2xvc2UgPSAnPC9iPidcclxuICAgICAgdmFyIGhpZ2hsaWdodGVkID0gJydcclxuICAgICAgdmFyIG1hdGNoZXNJbmRleCA9IDBcclxuICAgICAgdmFyIG9wZW5lZCA9IGZhbHNlXHJcbiAgICAgIHZhciB0YXJnZXQgPSByZXN1bHQudGFyZ2V0XHJcbiAgICAgIHZhciB0YXJnZXRMZW4gPSB0YXJnZXQubGVuZ3RoXHJcbiAgICAgIHZhciBtYXRjaGVzQmVzdCA9IHJlc3VsdC5pbmRleGVzXHJcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0YXJnZXRMZW47ICsraSkgeyB2YXIgY2hhciA9IHRhcmdldFtpXVxyXG4gICAgICAgIGlmKG1hdGNoZXNCZXN0W21hdGNoZXNJbmRleF0gPT09IGkpIHtcclxuICAgICAgICAgICsrbWF0Y2hlc0luZGV4XHJcbiAgICAgICAgICBpZighb3BlbmVkKSB7IG9wZW5lZCA9IHRydWVcclxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWQgKz0gaE9wZW5cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZihtYXRjaGVzSW5kZXggPT09IG1hdGNoZXNCZXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBoaWdobGlnaHRlZCArPSBjaGFyICsgaENsb3NlICsgdGFyZ2V0LnN1YnN0cihpKzEpXHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmKG9wZW5lZCkgeyBvcGVuZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICBoaWdobGlnaHRlZCArPSBoQ2xvc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaGlnaGxpZ2h0ZWQgKz0gY2hhclxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gaGlnaGxpZ2h0ZWRcclxuICAgIH0sXHJcblxyXG4gICAgcHJlcGFyZTogZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgIGlmKCF0YXJnZXQpIHJldHVyblxyXG4gICAgICByZXR1cm4ge3RhcmdldDp0YXJnZXQsIF90YXJnZXRMb3dlckNvZGVzOmZ1enp5c29ydC5wcmVwYXJlTG93ZXJDb2Rlcyh0YXJnZXQpLCBfbmV4dEJlZ2lubmluZ0luZGV4ZXM6bnVsbCwgc2NvcmU6bnVsbCwgaW5kZXhlczpudWxsLCBvYmo6bnVsbH0gLy8gaGlkZGVuXHJcbiAgICB9LFxyXG4gICAgcHJlcGFyZVNsb3c6IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICBpZighdGFyZ2V0KSByZXR1cm5cclxuICAgICAgcmV0dXJuIHt0YXJnZXQ6dGFyZ2V0LCBfdGFyZ2V0TG93ZXJDb2RlczpmdXp6eXNvcnQucHJlcGFyZUxvd2VyQ29kZXModGFyZ2V0KSwgX25leHRCZWdpbm5pbmdJbmRleGVzOmZ1enp5c29ydC5wcmVwYXJlTmV4dEJlZ2lubmluZ0luZGV4ZXModGFyZ2V0KSwgc2NvcmU6bnVsbCwgaW5kZXhlczpudWxsLCBvYmo6bnVsbH0gLy8gaGlkZGVuXHJcbiAgICB9LFxyXG4gICAgcHJlcGFyZVNlYXJjaDogZnVuY3Rpb24oc2VhcmNoKSB7XHJcbiAgICAgIGlmKCFzZWFyY2gpIHJldHVyblxyXG4gICAgICByZXR1cm4gZnV6enlzb3J0LnByZXBhcmVMb3dlckNvZGVzKHNlYXJjaClcclxuICAgIH0sXHJcblxyXG5cclxuXHJcbiAgICAvLyBCZWxvdyB0aGlzIHBvaW50IGlzIG9ubHkgaW50ZXJuYWwgY29kZVxyXG4gICAgLy8gQmVsb3cgdGhpcyBwb2ludCBpcyBvbmx5IGludGVybmFsIGNvZGVcclxuICAgIC8vIEJlbG93IHRoaXMgcG9pbnQgaXMgb25seSBpbnRlcm5hbCBjb2RlXHJcbiAgICAvLyBCZWxvdyB0aGlzIHBvaW50IGlzIG9ubHkgaW50ZXJuYWwgY29kZVxyXG5cclxuXHJcblxyXG4gICAgZ2V0UHJlcGFyZWQ6IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICBpZih0YXJnZXQubGVuZ3RoID4gOTk5KSByZXR1cm4gZnV6enlzb3J0LnByZXBhcmUodGFyZ2V0KSAvLyBkb24ndCBjYWNoZSBodWdlIHRhcmdldHNcclxuICAgICAgdmFyIHRhcmdldFByZXBhcmVkID0gcHJlcGFyZWRDYWNoZS5nZXQodGFyZ2V0KVxyXG4gICAgICBpZih0YXJnZXRQcmVwYXJlZCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdGFyZ2V0UHJlcGFyZWRcclxuICAgICAgdGFyZ2V0UHJlcGFyZWQgPSBmdXp6eXNvcnQucHJlcGFyZSh0YXJnZXQpXHJcbiAgICAgIHByZXBhcmVkQ2FjaGUuc2V0KHRhcmdldCwgdGFyZ2V0UHJlcGFyZWQpXHJcbiAgICAgIHJldHVybiB0YXJnZXRQcmVwYXJlZFxyXG4gICAgfSxcclxuICAgIGdldFByZXBhcmVkU2VhcmNoOiBmdW5jdGlvbihzZWFyY2gpIHtcclxuICAgICAgaWYoc2VhcmNoLmxlbmd0aCA+IDk5OSkgcmV0dXJuIGZ1enp5c29ydC5wcmVwYXJlU2VhcmNoKHNlYXJjaCkgLy8gZG9uJ3QgY2FjaGUgaHVnZSBzZWFyY2hlc1xyXG4gICAgICB2YXIgc2VhcmNoUHJlcGFyZWQgPSBwcmVwYXJlZFNlYXJjaENhY2hlLmdldChzZWFyY2gpXHJcbiAgICAgIGlmKHNlYXJjaFByZXBhcmVkICE9PSB1bmRlZmluZWQpIHJldHVybiBzZWFyY2hQcmVwYXJlZFxyXG4gICAgICBzZWFyY2hQcmVwYXJlZCA9IGZ1enp5c29ydC5wcmVwYXJlU2VhcmNoKHNlYXJjaClcclxuICAgICAgcHJlcGFyZWRTZWFyY2hDYWNoZS5zZXQoc2VhcmNoLCBzZWFyY2hQcmVwYXJlZClcclxuICAgICAgcmV0dXJuIHNlYXJjaFByZXBhcmVkXHJcbiAgICB9LFxyXG5cclxuICAgIGFsZ29yaXRobTogZnVuY3Rpb24oc2VhcmNoTG93ZXJDb2RlcywgcHJlcGFyZWQsIHNlYXJjaExvd2VyQ29kZSkge1xyXG4gICAgICB2YXIgdGFyZ2V0TG93ZXJDb2RlcyA9IHByZXBhcmVkLl90YXJnZXRMb3dlckNvZGVzXHJcbiAgICAgIHZhciBzZWFyY2hMZW4gPSBzZWFyY2hMb3dlckNvZGVzLmxlbmd0aFxyXG4gICAgICB2YXIgdGFyZ2V0TGVuID0gdGFyZ2V0TG93ZXJDb2Rlcy5sZW5ndGhcclxuICAgICAgdmFyIHNlYXJjaEkgPSAwIC8vIHdoZXJlIHdlIGF0XHJcbiAgICAgIHZhciB0YXJnZXRJID0gMCAvLyB3aGVyZSB5b3UgYXRcclxuICAgICAgdmFyIHR5cG9TaW1wbGVJID0gMFxyXG4gICAgICB2YXIgbWF0Y2hlc1NpbXBsZUxlbiA9IDBcclxuXHJcbiAgICAgIC8vIHZlcnkgYmFzaWMgZnV6enkgbWF0Y2g7IHRvIHJlbW92ZSBub24tbWF0Y2hpbmcgdGFyZ2V0cyBBU0FQIVxyXG4gICAgICAvLyB3YWxrIHRocm91Z2ggdGFyZ2V0LiBmaW5kIHNlcXVlbnRpYWwgbWF0Y2hlcy5cclxuICAgICAgLy8gaWYgYWxsIGNoYXJzIGFyZW4ndCBmb3VuZCB0aGVuIGV4aXRcclxuICAgICAgZm9yKDs7KSB7XHJcbiAgICAgICAgdmFyIGlzTWF0Y2ggPSBzZWFyY2hMb3dlckNvZGUgPT09IHRhcmdldExvd2VyQ29kZXNbdGFyZ2V0SV1cclxuICAgICAgICBpZihpc01hdGNoKSB7XHJcbiAgICAgICAgICBtYXRjaGVzU2ltcGxlW21hdGNoZXNTaW1wbGVMZW4rK10gPSB0YXJnZXRJXHJcbiAgICAgICAgICArK3NlYXJjaEk7IGlmKHNlYXJjaEkgPT09IHNlYXJjaExlbikgYnJlYWtcclxuICAgICAgICAgIHNlYXJjaExvd2VyQ29kZSA9IHNlYXJjaExvd2VyQ29kZXNbdHlwb1NpbXBsZUk9PT0wP3NlYXJjaEkgOiAodHlwb1NpbXBsZUk9PT1zZWFyY2hJP3NlYXJjaEkrMSA6ICh0eXBvU2ltcGxlST09PXNlYXJjaEktMT9zZWFyY2hJLTEgOiBzZWFyY2hJKSldXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICArK3RhcmdldEk7IGlmKHRhcmdldEkgPj0gdGFyZ2V0TGVuKSB7IC8vIEZhaWxlZCB0byBmaW5kIHNlYXJjaElcclxuICAgICAgICAgIC8vIENoZWNrIGZvciB0eXBvIG9yIGV4aXRcclxuICAgICAgICAgIC8vIHdlIGdvIGFzIGZhciBhcyBwb3NzaWJsZSBiZWZvcmUgdHJ5aW5nIHRvIHRyYW5zcG9zZVxyXG4gICAgICAgICAgLy8gdGhlbiB3ZSB0cmFuc3Bvc2UgYmFja3dhcmRzIHVudGlsIHdlIHJlYWNoIHRoZSBiZWdpbm5pbmdcclxuICAgICAgICAgIGZvcig7Oykge1xyXG4gICAgICAgICAgICBpZihzZWFyY2hJIDw9IDEpIHJldHVybiBudWxsIC8vIG5vdCBhbGxvd2VkIHRvIHRyYW5zcG9zZSBmaXJzdCBjaGFyXHJcbiAgICAgICAgICAgIGlmKHR5cG9TaW1wbGVJID09PSAwKSB7IC8vIHdlIGhhdmVuJ3QgdHJpZWQgdG8gdHJhbnNwb3NlIHlldFxyXG4gICAgICAgICAgICAgIC0tc2VhcmNoSVxyXG4gICAgICAgICAgICAgIHZhciBzZWFyY2hMb3dlckNvZGVOZXcgPSBzZWFyY2hMb3dlckNvZGVzW3NlYXJjaEldXHJcbiAgICAgICAgICAgICAgaWYoc2VhcmNoTG93ZXJDb2RlID09PSBzZWFyY2hMb3dlckNvZGVOZXcpIGNvbnRpbnVlIC8vIGRvZXNuJ3QgbWFrZSBzZW5zZSB0byB0cmFuc3Bvc2UgYSByZXBlYXQgY2hhclxyXG4gICAgICAgICAgICAgIHR5cG9TaW1wbGVJID0gc2VhcmNoSVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmKHR5cG9TaW1wbGVJID09PSAxKSByZXR1cm4gbnVsbCAvLyByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGxpbmUgZm9yIHRyYW5zcG9zaW5nXHJcbiAgICAgICAgICAgICAgLS10eXBvU2ltcGxlSVxyXG4gICAgICAgICAgICAgIHNlYXJjaEkgPSB0eXBvU2ltcGxlSVxyXG4gICAgICAgICAgICAgIHNlYXJjaExvd2VyQ29kZSA9IHNlYXJjaExvd2VyQ29kZXNbc2VhcmNoSSArIDFdXHJcbiAgICAgICAgICAgICAgdmFyIHNlYXJjaExvd2VyQ29kZU5ldyA9IHNlYXJjaExvd2VyQ29kZXNbc2VhcmNoSV1cclxuICAgICAgICAgICAgICBpZihzZWFyY2hMb3dlckNvZGUgPT09IHNlYXJjaExvd2VyQ29kZU5ldykgY29udGludWUgLy8gZG9lc24ndCBtYWtlIHNlbnNlIHRvIHRyYW5zcG9zZSBhIHJlcGVhdCBjaGFyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF0Y2hlc1NpbXBsZUxlbiA9IHNlYXJjaElcclxuICAgICAgICAgICAgdGFyZ2V0SSA9IG1hdGNoZXNTaW1wbGVbbWF0Y2hlc1NpbXBsZUxlbiAtIDFdICsgMVxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNlYXJjaEkgPSAwXHJcbiAgICAgIHZhciB0eXBvU3RyaWN0SSA9IDBcclxuICAgICAgdmFyIHN1Y2Nlc3NTdHJpY3QgPSBmYWxzZVxyXG4gICAgICB2YXIgbWF0Y2hlc1N0cmljdExlbiA9IDBcclxuXHJcbiAgICAgIHZhciBuZXh0QmVnaW5uaW5nSW5kZXhlcyA9IHByZXBhcmVkLl9uZXh0QmVnaW5uaW5nSW5kZXhlc1xyXG4gICAgICBpZihuZXh0QmVnaW5uaW5nSW5kZXhlcyA9PT0gbnVsbCkgbmV4dEJlZ2lubmluZ0luZGV4ZXMgPSBwcmVwYXJlZC5fbmV4dEJlZ2lubmluZ0luZGV4ZXMgPSBmdXp6eXNvcnQucHJlcGFyZU5leHRCZWdpbm5pbmdJbmRleGVzKHByZXBhcmVkLnRhcmdldClcclxuICAgICAgdmFyIGZpcnN0UG9zc2libGVJID0gdGFyZ2V0SSA9IG1hdGNoZXNTaW1wbGVbMF09PT0wID8gMCA6IG5leHRCZWdpbm5pbmdJbmRleGVzW21hdGNoZXNTaW1wbGVbMF0tMV1cclxuXHJcbiAgICAgIC8vIE91ciB0YXJnZXQgc3RyaW5nIHN1Y2Nlc3NmdWxseSBtYXRjaGVkIGFsbCBjaGFyYWN0ZXJzIGluIHNlcXVlbmNlIVxyXG4gICAgICAvLyBMZXQncyB0cnkgYSBtb3JlIGFkdmFuY2VkIGFuZCBzdHJpY3QgdGVzdCB0byBpbXByb3ZlIHRoZSBzY29yZVxyXG4gICAgICAvLyBvbmx5IGNvdW50IGl0IGFzIGEgbWF0Y2ggaWYgaXQncyBjb25zZWN1dGl2ZSBvciBhIGJlZ2lubmluZyBjaGFyYWN0ZXIhXHJcbiAgICAgIGlmKHRhcmdldEkgIT09IHRhcmdldExlbikgZm9yKDs7KSB7XHJcbiAgICAgICAgaWYodGFyZ2V0SSA+PSB0YXJnZXRMZW4pIHtcclxuICAgICAgICAgIC8vIFdlIGZhaWxlZCB0byBmaW5kIGEgZ29vZCBzcG90IGZvciB0aGlzIHNlYXJjaCBjaGFyLCBnbyBiYWNrIHRvIHRoZSBwcmV2aW91cyBzZWFyY2ggY2hhciBhbmQgZm9yY2UgaXQgZm9yd2FyZFxyXG4gICAgICAgICAgaWYoc2VhcmNoSSA8PSAwKSB7IC8vIFdlIGZhaWxlZCB0byBwdXNoIGNoYXJzIGZvcndhcmQgZm9yIGEgYmV0dGVyIG1hdGNoXHJcbiAgICAgICAgICAgIC8vIHRyYW5zcG9zZSwgc3RhcnRpbmcgZnJvbSB0aGUgYmVnaW5uaW5nXHJcbiAgICAgICAgICAgICsrdHlwb1N0cmljdEk7IGlmKHR5cG9TdHJpY3RJID4gc2VhcmNoTGVuLTIpIGJyZWFrXHJcbiAgICAgICAgICAgIGlmKHNlYXJjaExvd2VyQ29kZXNbdHlwb1N0cmljdEldID09PSBzZWFyY2hMb3dlckNvZGVzW3R5cG9TdHJpY3RJKzFdKSBjb250aW51ZSAvLyBkb2Vzbid0IG1ha2Ugc2Vuc2UgdG8gdHJhbnNwb3NlIGEgcmVwZWF0IGNoYXJcclxuICAgICAgICAgICAgdGFyZ2V0SSA9IGZpcnN0UG9zc2libGVJXHJcbiAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLS1zZWFyY2hJXHJcbiAgICAgICAgICB2YXIgbGFzdE1hdGNoID0gbWF0Y2hlc1N0cmljdFstLW1hdGNoZXNTdHJpY3RMZW5dXHJcbiAgICAgICAgICB0YXJnZXRJID0gbmV4dEJlZ2lubmluZ0luZGV4ZXNbbGFzdE1hdGNoXVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFyIGlzTWF0Y2ggPSBzZWFyY2hMb3dlckNvZGVzW3R5cG9TdHJpY3RJPT09MD9zZWFyY2hJIDogKHR5cG9TdHJpY3RJPT09c2VhcmNoST9zZWFyY2hJKzEgOiAodHlwb1N0cmljdEk9PT1zZWFyY2hJLTE/c2VhcmNoSS0xIDogc2VhcmNoSSkpXSA9PT0gdGFyZ2V0TG93ZXJDb2Rlc1t0YXJnZXRJXVxyXG4gICAgICAgICAgaWYoaXNNYXRjaCkge1xyXG4gICAgICAgICAgICBtYXRjaGVzU3RyaWN0W21hdGNoZXNTdHJpY3RMZW4rK10gPSB0YXJnZXRJXHJcbiAgICAgICAgICAgICsrc2VhcmNoSTsgaWYoc2VhcmNoSSA9PT0gc2VhcmNoTGVuKSB7IHN1Y2Nlc3NTdHJpY3QgPSB0cnVlOyBicmVhayB9XHJcbiAgICAgICAgICAgICsrdGFyZ2V0SVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0SSA9IG5leHRCZWdpbm5pbmdJbmRleGVzW3RhcmdldEldXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB7IC8vIHRhbGx5IHVwIHRoZSBzY29yZSAmIGtlZXAgdHJhY2sgb2YgbWF0Y2hlcyBmb3IgaGlnaGxpZ2h0aW5nIGxhdGVyXHJcbiAgICAgICAgaWYoc3VjY2Vzc1N0cmljdCkgeyB2YXIgbWF0Y2hlc0Jlc3QgPSBtYXRjaGVzU3RyaWN0OyB2YXIgbWF0Y2hlc0Jlc3RMZW4gPSBtYXRjaGVzU3RyaWN0TGVuIH1cclxuICAgICAgICBlbHNlIHsgdmFyIG1hdGNoZXNCZXN0ID0gbWF0Y2hlc1NpbXBsZTsgdmFyIG1hdGNoZXNCZXN0TGVuID0gbWF0Y2hlc1NpbXBsZUxlbiB9XHJcbiAgICAgICAgdmFyIHNjb3JlID0gMFxyXG4gICAgICAgIHZhciBsYXN0VGFyZ2V0SSA9IC0xXHJcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHNlYXJjaExlbjsgKytpKSB7IHZhciB0YXJnZXRJID0gbWF0Y2hlc0Jlc3RbaV1cclxuICAgICAgICAgIC8vIHNjb3JlIG9ubHkgZ29lcyBkb3duIGlmIHRoZXkncmUgbm90IGNvbnNlY3V0aXZlXHJcbiAgICAgICAgICBpZihsYXN0VGFyZ2V0SSAhPT0gdGFyZ2V0SSAtIDEpIHNjb3JlIC09IHRhcmdldElcclxuICAgICAgICAgIGxhc3RUYXJnZXRJID0gdGFyZ2V0SVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZighc3VjY2Vzc1N0cmljdCkge1xyXG4gICAgICAgICAgc2NvcmUgKj0gMTAwMFxyXG4gICAgICAgICAgaWYodHlwb1NpbXBsZUkgIT09IDApIHNjb3JlICs9IC0yMC8qdHlwb1BlbmFsdHkqL1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZih0eXBvU3RyaWN0SSAhPT0gMCkgc2NvcmUgKz0gLTIwLyp0eXBvUGVuYWx0eSovXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjb3JlIC09IHRhcmdldExlbiAtIHNlYXJjaExlblxyXG4gICAgICAgIHByZXBhcmVkLnNjb3JlID0gc2NvcmVcclxuICAgICAgICBwcmVwYXJlZC5pbmRleGVzID0gbmV3IEFycmF5KG1hdGNoZXNCZXN0TGVuKTsgZm9yKHZhciBpID0gbWF0Y2hlc0Jlc3RMZW4gLSAxOyBpID49IDA7IC0taSkgcHJlcGFyZWQuaW5kZXhlc1tpXSA9IG1hdGNoZXNCZXN0W2ldXHJcblxyXG4gICAgICAgIHJldHVybiBwcmVwYXJlZFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFsZ29yaXRobU5vVHlwbzogZnVuY3Rpb24oc2VhcmNoTG93ZXJDb2RlcywgcHJlcGFyZWQsIHNlYXJjaExvd2VyQ29kZSkge1xyXG4gICAgICB2YXIgdGFyZ2V0TG93ZXJDb2RlcyA9IHByZXBhcmVkLl90YXJnZXRMb3dlckNvZGVzXHJcbiAgICAgIHZhciBzZWFyY2hMZW4gPSBzZWFyY2hMb3dlckNvZGVzLmxlbmd0aFxyXG4gICAgICB2YXIgdGFyZ2V0TGVuID0gdGFyZ2V0TG93ZXJDb2Rlcy5sZW5ndGhcclxuICAgICAgdmFyIHNlYXJjaEkgPSAwIC8vIHdoZXJlIHdlIGF0XHJcbiAgICAgIHZhciB0YXJnZXRJID0gMCAvLyB3aGVyZSB5b3UgYXRcclxuICAgICAgdmFyIG1hdGNoZXNTaW1wbGVMZW4gPSAwXHJcblxyXG4gICAgICAvLyB2ZXJ5IGJhc2ljIGZ1enp5IG1hdGNoOyB0byByZW1vdmUgbm9uLW1hdGNoaW5nIHRhcmdldHMgQVNBUCFcclxuICAgICAgLy8gd2FsayB0aHJvdWdoIHRhcmdldC4gZmluZCBzZXF1ZW50aWFsIG1hdGNoZXMuXHJcbiAgICAgIC8vIGlmIGFsbCBjaGFycyBhcmVuJ3QgZm91bmQgdGhlbiBleGl0XHJcbiAgICAgIGZvcig7Oykge1xyXG4gICAgICAgIHZhciBpc01hdGNoID0gc2VhcmNoTG93ZXJDb2RlID09PSB0YXJnZXRMb3dlckNvZGVzW3RhcmdldEldXHJcbiAgICAgICAgaWYoaXNNYXRjaCkge1xyXG4gICAgICAgICAgbWF0Y2hlc1NpbXBsZVttYXRjaGVzU2ltcGxlTGVuKytdID0gdGFyZ2V0SVxyXG4gICAgICAgICAgKytzZWFyY2hJOyBpZihzZWFyY2hJID09PSBzZWFyY2hMZW4pIGJyZWFrXHJcbiAgICAgICAgICBzZWFyY2hMb3dlckNvZGUgPSBzZWFyY2hMb3dlckNvZGVzW3NlYXJjaEldXHJcbiAgICAgICAgfVxyXG4gICAgICAgICsrdGFyZ2V0STsgaWYodGFyZ2V0SSA+PSB0YXJnZXRMZW4pIHJldHVybiBudWxsIC8vIEZhaWxlZCB0byBmaW5kIHNlYXJjaElcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHNlYXJjaEkgPSAwXHJcbiAgICAgIHZhciBzdWNjZXNzU3RyaWN0ID0gZmFsc2VcclxuICAgICAgdmFyIG1hdGNoZXNTdHJpY3RMZW4gPSAwXHJcblxyXG4gICAgICB2YXIgbmV4dEJlZ2lubmluZ0luZGV4ZXMgPSBwcmVwYXJlZC5fbmV4dEJlZ2lubmluZ0luZGV4ZXNcclxuICAgICAgaWYobmV4dEJlZ2lubmluZ0luZGV4ZXMgPT09IG51bGwpIG5leHRCZWdpbm5pbmdJbmRleGVzID0gcHJlcGFyZWQuX25leHRCZWdpbm5pbmdJbmRleGVzID0gZnV6enlzb3J0LnByZXBhcmVOZXh0QmVnaW5uaW5nSW5kZXhlcyhwcmVwYXJlZC50YXJnZXQpXHJcbiAgICAgIHZhciBmaXJzdFBvc3NpYmxlSSA9IHRhcmdldEkgPSBtYXRjaGVzU2ltcGxlWzBdPT09MCA/IDAgOiBuZXh0QmVnaW5uaW5nSW5kZXhlc1ttYXRjaGVzU2ltcGxlWzBdLTFdXHJcblxyXG4gICAgICAvLyBPdXIgdGFyZ2V0IHN0cmluZyBzdWNjZXNzZnVsbHkgbWF0Y2hlZCBhbGwgY2hhcmFjdGVycyBpbiBzZXF1ZW5jZSFcclxuICAgICAgLy8gTGV0J3MgdHJ5IGEgbW9yZSBhZHZhbmNlZCBhbmQgc3RyaWN0IHRlc3QgdG8gaW1wcm92ZSB0aGUgc2NvcmVcclxuICAgICAgLy8gb25seSBjb3VudCBpdCBhcyBhIG1hdGNoIGlmIGl0J3MgY29uc2VjdXRpdmUgb3IgYSBiZWdpbm5pbmcgY2hhcmFjdGVyIVxyXG4gICAgICBpZih0YXJnZXRJICE9PSB0YXJnZXRMZW4pIGZvcig7Oykge1xyXG4gICAgICAgIGlmKHRhcmdldEkgPj0gdGFyZ2V0TGVuKSB7XHJcbiAgICAgICAgICAvLyBXZSBmYWlsZWQgdG8gZmluZCBhIGdvb2Qgc3BvdCBmb3IgdGhpcyBzZWFyY2ggY2hhciwgZ28gYmFjayB0byB0aGUgcHJldmlvdXMgc2VhcmNoIGNoYXIgYW5kIGZvcmNlIGl0IGZvcndhcmRcclxuICAgICAgICAgIGlmKHNlYXJjaEkgPD0gMCkgYnJlYWsgLy8gV2UgZmFpbGVkIHRvIHB1c2ggY2hhcnMgZm9yd2FyZCBmb3IgYSBiZXR0ZXIgbWF0Y2hcclxuXHJcbiAgICAgICAgICAtLXNlYXJjaElcclxuICAgICAgICAgIHZhciBsYXN0TWF0Y2ggPSBtYXRjaGVzU3RyaWN0Wy0tbWF0Y2hlc1N0cmljdExlbl1cclxuICAgICAgICAgIHRhcmdldEkgPSBuZXh0QmVnaW5uaW5nSW5kZXhlc1tsYXN0TWF0Y2hdXHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgaXNNYXRjaCA9IHNlYXJjaExvd2VyQ29kZXNbc2VhcmNoSV0gPT09IHRhcmdldExvd2VyQ29kZXNbdGFyZ2V0SV1cclxuICAgICAgICAgIGlmKGlzTWF0Y2gpIHtcclxuICAgICAgICAgICAgbWF0Y2hlc1N0cmljdFttYXRjaGVzU3RyaWN0TGVuKytdID0gdGFyZ2V0SVxyXG4gICAgICAgICAgICArK3NlYXJjaEk7IGlmKHNlYXJjaEkgPT09IHNlYXJjaExlbikgeyBzdWNjZXNzU3RyaWN0ID0gdHJ1ZTsgYnJlYWsgfVxyXG4gICAgICAgICAgICArK3RhcmdldElcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldEkgPSBuZXh0QmVnaW5uaW5nSW5kZXhlc1t0YXJnZXRJXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgeyAvLyB0YWxseSB1cCB0aGUgc2NvcmUgJiBrZWVwIHRyYWNrIG9mIG1hdGNoZXMgZm9yIGhpZ2hsaWdodGluZyBsYXRlclxyXG4gICAgICAgIGlmKHN1Y2Nlc3NTdHJpY3QpIHsgdmFyIG1hdGNoZXNCZXN0ID0gbWF0Y2hlc1N0cmljdDsgdmFyIG1hdGNoZXNCZXN0TGVuID0gbWF0Y2hlc1N0cmljdExlbiB9XHJcbiAgICAgICAgZWxzZSB7IHZhciBtYXRjaGVzQmVzdCA9IG1hdGNoZXNTaW1wbGU7IHZhciBtYXRjaGVzQmVzdExlbiA9IG1hdGNoZXNTaW1wbGVMZW4gfVxyXG4gICAgICAgIHZhciBzY29yZSA9IDBcclxuICAgICAgICB2YXIgbGFzdFRhcmdldEkgPSAtMVxyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzZWFyY2hMZW47ICsraSkgeyB2YXIgdGFyZ2V0SSA9IG1hdGNoZXNCZXN0W2ldXHJcbiAgICAgICAgICAvLyBzY29yZSBvbmx5IGdvZXMgZG93biBpZiB0aGV5J3JlIG5vdCBjb25zZWN1dGl2ZVxyXG4gICAgICAgICAgaWYobGFzdFRhcmdldEkgIT09IHRhcmdldEkgLSAxKSBzY29yZSAtPSB0YXJnZXRJXHJcbiAgICAgICAgICBsYXN0VGFyZ2V0SSA9IHRhcmdldElcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXN1Y2Nlc3NTdHJpY3QpIHNjb3JlICo9IDEwMDBcclxuICAgICAgICBzY29yZSAtPSB0YXJnZXRMZW4gLSBzZWFyY2hMZW5cclxuICAgICAgICBwcmVwYXJlZC5zY29yZSA9IHNjb3JlXHJcbiAgICAgICAgcHJlcGFyZWQuaW5kZXhlcyA9IG5ldyBBcnJheShtYXRjaGVzQmVzdExlbik7IGZvcih2YXIgaSA9IG1hdGNoZXNCZXN0TGVuIC0gMTsgaSA+PSAwOyAtLWkpIHByZXBhcmVkLmluZGV4ZXNbaV0gPSBtYXRjaGVzQmVzdFtpXVxyXG5cclxuICAgICAgICByZXR1cm4gcHJlcGFyZWRcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwcmVwYXJlTG93ZXJDb2RlczogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgIHZhciBzdHJMZW4gPSBzdHIubGVuZ3RoXHJcbiAgICAgIHZhciBsb3dlckNvZGVzID0gW10gLy8gbmV3IEFycmF5KHN0ckxlbikgICAgc3BhcnNlIGFycmF5IGlzIHRvbyBzbG93XHJcbiAgICAgIHZhciBsb3dlciA9IHN0ci50b0xvd2VyQ2FzZSgpXHJcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdHJMZW47ICsraSkgbG93ZXJDb2Rlc1tpXSA9IGxvd2VyLmNoYXJDb2RlQXQoaSlcclxuICAgICAgcmV0dXJuIGxvd2VyQ29kZXNcclxuICAgIH0sXHJcbiAgICBwcmVwYXJlQmVnaW5uaW5nSW5kZXhlczogZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgIHZhciB0YXJnZXRMZW4gPSB0YXJnZXQubGVuZ3RoXHJcbiAgICAgIHZhciBiZWdpbm5pbmdJbmRleGVzID0gW107IHZhciBiZWdpbm5pbmdJbmRleGVzTGVuID0gMFxyXG4gICAgICB2YXIgd2FzVXBwZXIgPSBmYWxzZVxyXG4gICAgICB2YXIgd2FzQWxwaGFudW0gPSBmYWxzZVxyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGFyZ2V0TGVuOyArK2kpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0Q29kZSA9IHRhcmdldC5jaGFyQ29kZUF0KGkpXHJcbiAgICAgICAgdmFyIGlzVXBwZXIgPSB0YXJnZXRDb2RlPj02NSYmdGFyZ2V0Q29kZTw9OTBcclxuICAgICAgICB2YXIgaXNBbHBoYW51bSA9IGlzVXBwZXIgfHwgdGFyZ2V0Q29kZT49OTcmJnRhcmdldENvZGU8PTEyMiB8fCB0YXJnZXRDb2RlPj00OCYmdGFyZ2V0Q29kZTw9NTdcclxuICAgICAgICB2YXIgaXNCZWdpbm5pbmcgPSBpc1VwcGVyICYmICF3YXNVcHBlciB8fCAhd2FzQWxwaGFudW0gfHwgIWlzQWxwaGFudW1cclxuICAgICAgICB3YXNVcHBlciA9IGlzVXBwZXJcclxuICAgICAgICB3YXNBbHBoYW51bSA9IGlzQWxwaGFudW1cclxuICAgICAgICBpZihpc0JlZ2lubmluZykgYmVnaW5uaW5nSW5kZXhlc1tiZWdpbm5pbmdJbmRleGVzTGVuKytdID0gaVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBiZWdpbm5pbmdJbmRleGVzXHJcbiAgICB9LFxyXG4gICAgcHJlcGFyZU5leHRCZWdpbm5pbmdJbmRleGVzOiBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgdmFyIHRhcmdldExlbiA9IHRhcmdldC5sZW5ndGhcclxuICAgICAgdmFyIGJlZ2lubmluZ0luZGV4ZXMgPSBmdXp6eXNvcnQucHJlcGFyZUJlZ2lubmluZ0luZGV4ZXModGFyZ2V0KVxyXG4gICAgICB2YXIgbmV4dEJlZ2lubmluZ0luZGV4ZXMgPSBbXSAvLyBuZXcgQXJyYXkodGFyZ2V0TGVuKSAgICAgc3BhcnNlIGFycmF5IGlzIHRvbyBzbG93XHJcbiAgICAgIHZhciBsYXN0SXNCZWdpbm5pbmcgPSBiZWdpbm5pbmdJbmRleGVzWzBdXHJcbiAgICAgIHZhciBsYXN0SXNCZWdpbm5pbmdJID0gMFxyXG4gICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGFyZ2V0TGVuOyArK2kpIHtcclxuICAgICAgICBpZihsYXN0SXNCZWdpbm5pbmcgPiBpKSB7XHJcbiAgICAgICAgICBuZXh0QmVnaW5uaW5nSW5kZXhlc1tpXSA9IGxhc3RJc0JlZ2lubmluZ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsYXN0SXNCZWdpbm5pbmcgPSBiZWdpbm5pbmdJbmRleGVzWysrbGFzdElzQmVnaW5uaW5nSV1cclxuICAgICAgICAgIG5leHRCZWdpbm5pbmdJbmRleGVzW2ldID0gbGFzdElzQmVnaW5uaW5nPT09dW5kZWZpbmVkID8gdGFyZ2V0TGVuIDogbGFzdElzQmVnaW5uaW5nXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBuZXh0QmVnaW5uaW5nSW5kZXhlc1xyXG4gICAgfSxcclxuXHJcbiAgICBjbGVhbnVwOiBjbGVhbnVwLFxyXG4gICAgbmV3OiBmdXp6eXNvcnROZXcsXHJcbiAgfVxyXG4gIHJldHVybiBmdXp6eXNvcnRcclxufSAvLyBmdXp6eXNvcnROZXdcclxuXHJcbi8vIFRoaXMgc3R1ZmYgaXMgb3V0c2lkZSBmdXp6eXNvcnROZXcsIGJlY2F1c2UgaXQncyBzaGFyZWQgd2l0aCBpbnN0YW5jZXMgb2YgZnV6enlzb3J0Lm5ldygpXHJcbnZhciBpc05vZGUgPSB0eXBlb2YgcmVxdWlyZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCdcclxuLy8gdmFyIE1BWF9JTlQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxyXG4vLyB2YXIgTUlOX0lOVCA9IE51bWJlci5NSU5fVkFMVUVcclxudmFyIHByZXBhcmVkQ2FjaGUgPSBuZXcgTWFwKClcclxudmFyIHByZXBhcmVkU2VhcmNoQ2FjaGUgPSBuZXcgTWFwKClcclxudmFyIG5vUmVzdWx0cyA9IFtdOyBub1Jlc3VsdHMudG90YWwgPSAwXHJcbnZhciBtYXRjaGVzU2ltcGxlID0gW107IHZhciBtYXRjaGVzU3RyaWN0ID0gW11cclxuZnVuY3Rpb24gY2xlYW51cCgpIHsgcHJlcGFyZWRDYWNoZS5jbGVhcigpOyBwcmVwYXJlZFNlYXJjaENhY2hlLmNsZWFyKCk7IG1hdGNoZXNTaW1wbGUgPSBbXTsgbWF0Y2hlc1N0cmljdCA9IFtdIH1cclxuZnVuY3Rpb24gZGVmYXVsdFNjb3JlRm4oYSkge1xyXG4gIHZhciBtYXggPSAtOTAwNzE5OTI1NDc0MDk5MVxyXG4gIGZvciAodmFyIGkgPSBhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gYVtpXTsgaWYocmVzdWx0ID09PSBudWxsKSBjb250aW51ZVxyXG4gICAgdmFyIHNjb3JlID0gcmVzdWx0LnNjb3JlXHJcbiAgICBpZihzY29yZSA+IG1heCkgbWF4ID0gc2NvcmVcclxuICB9XHJcbiAgaWYobWF4ID09PSAtOTAwNzE5OTI1NDc0MDk5MSkgcmV0dXJuIG51bGxcclxuICByZXR1cm4gbWF4XHJcbn1cclxuXHJcbi8vIHByb3AgPSAna2V5JyAgICAgICAgICAgICAgMi41bXMgb3B0aW1pemVkIGZvciB0aGlzIGNhc2UsIHNlZW1zIHRvIGJlIGFib3V0IGFzIGZhc3QgYXMgZGlyZWN0IG9ialtwcm9wXVxyXG4vLyBwcm9wID0gJ2tleTEua2V5MicgICAgICAgIDEwbXNcclxuLy8gcHJvcCA9IFsna2V5MScsICdrZXkyJ10gICAyN21zXHJcbmZ1bmN0aW9uIGdldFZhbHVlKG9iaiwgcHJvcCkge1xyXG4gIHZhciB0bXAgPSBvYmpbcHJvcF07IGlmKHRtcCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdG1wXHJcbiAgdmFyIHNlZ3MgPSBwcm9wXHJcbiAgaWYoIUFycmF5LmlzQXJyYXkocHJvcCkpIHNlZ3MgPSBwcm9wLnNwbGl0KCcuJylcclxuICB2YXIgbGVuID0gc2Vncy5sZW5ndGhcclxuICB2YXIgaSA9IC0xXHJcbiAgd2hpbGUgKG9iaiAmJiAoKytpIDwgbGVuKSkgb2JqID0gb2JqW3NlZ3NbaV1dXHJcbiAgcmV0dXJuIG9ialxyXG59XHJcblxyXG5mdW5jdGlvbiBpc09iaih4KSB7IHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgfSAvLyBmYXN0ZXIgYXMgYSBmdW5jdGlvblxyXG5cclxuLy8gSGFja2VkIHZlcnNpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2xlbWlyZS9GYXN0UHJpb3JpdHlRdWV1ZS5qc1xyXG52YXIgZmFzdHByaW9yaXR5cXVldWU9ZnVuY3Rpb24oKXt2YXIgcj1bXSxvPTAsZT17fTtmdW5jdGlvbiBuKCl7Zm9yKHZhciBlPTAsbj1yW2VdLGM9MTtjPG87KXt2YXIgZj1jKzE7ZT1jLGY8byYmcltmXS5zY29yZTxyW2NdLnNjb3JlJiYoZT1mKSxyW2UtMT4+MV09cltlXSxjPTErKGU8PDEpfWZvcih2YXIgYT1lLTE+PjE7ZT4wJiZuLnNjb3JlPHJbYV0uc2NvcmU7YT0oZT1hKS0xPj4xKXJbZV09clthXTtyW2VdPW59cmV0dXJuIGUuYWRkPWZ1bmN0aW9uKGUpe3ZhciBuPW87cltvKytdPWU7Zm9yKHZhciBjPW4tMT4+MTtuPjAmJmUuc2NvcmU8cltjXS5zY29yZTtjPShuPWMpLTE+PjEpcltuXT1yW2NdO3Jbbl09ZX0sZS5wb2xsPWZ1bmN0aW9uKCl7aWYoMCE9PW8pe3ZhciBlPXJbMF07cmV0dXJuIHJbMF09clstLW9dLG4oKSxlfX0sZS5wZWVrPWZ1bmN0aW9uKGUpe2lmKDAhPT1vKXJldHVybiByWzBdfSxlLnJlcGxhY2VUb3A9ZnVuY3Rpb24obyl7clswXT1vLG4oKX0sZX07XHJcbnZhciBxID0gZmFzdHByaW9yaXR5cXVldWUoKSAvLyByZXVzZSB0aGlzLCBleGNlcHQgZm9yIGFzeW5jLCBpdCBuZWVkcyB0byBtYWtlIGl0cyBvd25cclxuXHJcbnJldHVybiBmdXp6eXNvcnROZXcoKVxyXG59KSAvLyBVTURcclxuXHJcbi8vIFRPRE86IChwZXJmb3JtYW5jZSkgd2FzbSB2ZXJzaW9uIT9cclxuXHJcbi8vIFRPRE86IChwZXJmb3JtYW5jZSkgbGF5b3V0IG1lbW9yeSBpbiBhbiBvcHRpbWFsIHdheSB0byBnbyBmYXN0IGJ5IGF2b2lkaW5nIGNhY2hlIG1pc3Nlc1xyXG5cclxuLy8gVE9ETzogKHBlcmZvcm1hbmNlKSBwcmVwYXJlZENhY2hlIGlzIGEgbWVtb3J5IGxlYWtcclxuXHJcbi8vIFRPRE86IChsaWtlIHN1YmxpbWUpIGJhY2tzbGFzaCA9PT0gZm9yd2FyZHNsYXNoXHJcblxyXG4vLyBUT0RPOiAocGVyZm9ybWFuY2UpIGkgaGF2ZSBubyBpZGVhIGhvdyB3ZWxsIG9wdGl6bWllZCB0aGUgYWxsb3dpbmcgdHlwb3MgYWxnb3JpdGhtIGlzXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///360\n")},679:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar reactIs = __webpack_require__(296);\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsbUJBQU8sQ0FBQyxHQUFVOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixpQkFBaUI7QUFDckM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzP2RhNmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///679\n")},103:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?\nSymbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;\nfunction z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBLGNBQWMsa0NBQWtDLGlCQUFpQixVQUFVLDBCQUEwQixtREFBbUQsa0NBQWtDLDRDQUE0QyxrQkFBa0Isa0JBQWtCLGNBQWMsZ0JBQWdCLGlCQUFpQixHQUFHLHNCQUFzQixHQUFHLHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLGVBQWUsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxZQUFZLEdBQUcsWUFBWSxHQUFHLGNBQWM7QUFDL2UsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsZ0JBQWdCLEdBQUcsbUJBQW1CLGFBQWEsdUJBQXVCLHdCQUF3QixHQUFHLHlCQUF5QixhQUFhLGlCQUFpQix5QkFBeUIsYUFBYSxpQkFBaUIsaUJBQWlCLGFBQWEscURBQXFELG9CQUFvQixhQUFhLGlCQUFpQixrQkFBa0IsYUFBYSxpQkFBaUIsY0FBYyxhQUFhO0FBQzNjLGNBQWMsYUFBYSxpQkFBaUIsZ0JBQWdCLGFBQWEsaUJBQWlCLGtCQUFrQixhQUFhLGlCQUFpQixvQkFBb0IsYUFBYSxpQkFBaUIsa0JBQWtCLGFBQWE7QUFDM04sMEJBQTBCLGFBQWEsNlFBQTZRLGNBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanM/MGE4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///103\n')},296:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(103);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBNEQ7QUFDOUQsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcz9hZjdlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///296\n")},820:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * LiquidMetal, version: 1.3.0 (2014-08-19)\n *\n * A mimetic poly-alloy of Quicksilver\'s scoring algorithm, essentially\n * LiquidMetal.\n *\n * For usage and examples, visit:\n * http://github.com/rmm5t/liquidmetal\n *\n * Licensed under the MIT:\n * http://www.opensource.org/licenses/mit-license.php\n *\n * Copyright (c) 2009-2014, Ryan McGeary (ryan -[at]- mcgeary [*dot*] org)\n */\n(function(global) {\n  var SCORE_NO_MATCH = 0.0;\n  var SCORE_MATCH = 1.0;\n  var SCORE_TRAILING = 0.8;\n  var SCORE_TRAILING_BUT_STARTED = 0.9;\n  var SCORE_BUFFER = 0.85;\n  var WORD_SEPARATORS = " \\t_-";\n\n  var LiquidMetal = {\n    lastScore: null,\n    lastScoreArray: null,\n\n    score: function(string, abbrev) {\n      // short circuits\n      if (abbrev.length === 0) return SCORE_TRAILING;\n      if (abbrev.length > string.length) return SCORE_NO_MATCH;\n\n      // match & score all\n      var allScores = [];\n      var search = string.toLowerCase();\n      abbrev = abbrev.toLowerCase();\n      this._scoreAll(string, search, abbrev, -1, 0, [], allScores);\n\n      // complete miss\n      if (allScores.length == 0) return 0;\n\n      // sum per-character scores into overall scores,\n      // selecting the maximum score\n      var maxScore = 0.0, maxArray = [];\n      for (var i = 0; i < allScores.length; i++) {\n        var scores = allScores[i];\n        var scoreSum = 0.0;\n        for (var j = 0; j < string.length; j++) { scoreSum += scores[j]; }\n        if (scoreSum > maxScore) {\n          maxScore = scoreSum;\n          maxArray = scores;\n        }\n      }\n\n      // normalize max score by string length\n      // s. t. the perfect match score = 1\n      maxScore /= string.length;\n\n      // record maximum score & score array, return\n      this.lastScore = maxScore;\n      this.lastScoreArray = maxArray;\n      return maxScore;\n    },\n\n    _scoreAll: function(string, search, abbrev, searchIndex, abbrIndex, scores, allScores) {\n      // save completed match scores at end of search\n      if (abbrIndex == abbrev.length) {\n        // add trailing score for the remainder of the match\n        var started = (search.charAt(0) == abbrev.charAt(0));\n        var trailScore = started ? SCORE_TRAILING_BUT_STARTED : SCORE_TRAILING;\n        fillArray(scores, trailScore, scores.length, string.length);\n        // save score clone (since reference is persisted in scores)\n        allScores.push(scores.slice(0));\n        return;\n      }\n\n      // consume current char to match\n      var c = abbrev.charAt(abbrIndex);\n      abbrIndex++;\n\n      // cancel match if a character is missing\n      var index = search.indexOf(c, searchIndex);\n      if (index == -1) return;\n\n      // match all instances of the abbreviaton char\n      var scoreIndex = searchIndex; // score section to update\n      while ((index = search.indexOf(c, searchIndex+1)) != -1) {\n        // score this match according to context\n        if (isNewWord(string, index)) {\n          scores[index-1] = 1;\n          fillArray(scores, SCORE_BUFFER, scoreIndex+1, index-1);\n        }\n        else if (isUpperCase(string, index)) {\n          fillArray(scores, SCORE_BUFFER, scoreIndex+1, index);\n        }\n        else {\n          fillArray(scores, SCORE_NO_MATCH, scoreIndex+1, index);\n        }\n        scores[index] = SCORE_MATCH;\n\n        // consume matched string and continue search\n        searchIndex = index;\n        this._scoreAll(string, search, abbrev, searchIndex, abbrIndex, scores, allScores);\n      }\n    }\n  };\n\n  function isUpperCase(string, index) {\n    var c = string.charAt(index);\n    return ("A" <= c && c <= "Z");\n  }\n\n   function isNewWord(string, index) {\n    var c = string.charAt(index-1);\n    return (WORD_SEPARATORS.indexOf(c) != -1);\n  }\n\n  function fillArray(array, value, from, to) {\n    for (var i = from; i < to; i++) { array[i] = value; }\n    return array;\n  }\n\n  // Export as AMD...\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return LiquidMetal; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // ...or as a node module\n  else {}\n})(typeof window !== \'undefined\' ? window : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUIsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixRQUFRLE9BQU87QUFDdEM7QUFDQTs7QUFFQTtBQUNBLE1BQU0sSUFBMEM7QUFDaEQsSUFBSSxtQ0FBTyxjQUFjLHFCQUFxQjtBQUFBLGtHQUFDO0FBQy9DOztBQUVBO0FBQ0EsT0FBTyxFQU1KO0FBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWNrLXNjb3JlLWRlbW8vLi9ub2RlX21vZHVsZXMvbGlxdWlkbWV0YWwvbGlxdWlkbWV0YWwuanM/ZGQ3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpcXVpZE1ldGFsLCB2ZXJzaW9uOiAxLjMuMCAoMjAxNC0wOC0xOSlcbiAqXG4gKiBBIG1pbWV0aWMgcG9seS1hbGxveSBvZiBRdWlja3NpbHZlcidzIHNjb3JpbmcgYWxnb3JpdGhtLCBlc3NlbnRpYWxseVxuICogTGlxdWlkTWV0YWwuXG4gKlxuICogRm9yIHVzYWdlIGFuZCBleGFtcGxlcywgdmlzaXQ6XG4gKiBodHRwOi8vZ2l0aHViLmNvbS9ybW01dC9saXF1aWRtZXRhbFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQ6XG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICpcbiAqIENvcHlyaWdodCAoYykgMjAwOS0yMDE0LCBSeWFuIE1jR2VhcnkgKHJ5YW4gLVthdF0tIG1jZ2VhcnkgWypkb3QqXSBvcmcpXG4gKi9cbihmdW5jdGlvbihnbG9iYWwpIHtcbiAgdmFyIFNDT1JFX05PX01BVENIID0gMC4wO1xuICB2YXIgU0NPUkVfTUFUQ0ggPSAxLjA7XG4gIHZhciBTQ09SRV9UUkFJTElORyA9IDAuODtcbiAgdmFyIFNDT1JFX1RSQUlMSU5HX0JVVF9TVEFSVEVEID0gMC45O1xuICB2YXIgU0NPUkVfQlVGRkVSID0gMC44NTtcbiAgdmFyIFdPUkRfU0VQQVJBVE9SUyA9IFwiIFxcdF8tXCI7XG5cbiAgdmFyIExpcXVpZE1ldGFsID0ge1xuICAgIGxhc3RTY29yZTogbnVsbCxcbiAgICBsYXN0U2NvcmVBcnJheTogbnVsbCxcblxuICAgIHNjb3JlOiBmdW5jdGlvbihzdHJpbmcsIGFiYnJldikge1xuICAgICAgLy8gc2hvcnQgY2lyY3VpdHNcbiAgICAgIGlmIChhYmJyZXYubGVuZ3RoID09PSAwKSByZXR1cm4gU0NPUkVfVFJBSUxJTkc7XG4gICAgICBpZiAoYWJicmV2Lmxlbmd0aCA+IHN0cmluZy5sZW5ndGgpIHJldHVybiBTQ09SRV9OT19NQVRDSDtcblxuICAgICAgLy8gbWF0Y2ggJiBzY29yZSBhbGxcbiAgICAgIHZhciBhbGxTY29yZXMgPSBbXTtcbiAgICAgIHZhciBzZWFyY2ggPSBzdHJpbmcudG9Mb3dlckNhc2UoKTtcbiAgICAgIGFiYnJldiA9IGFiYnJldi50b0xvd2VyQ2FzZSgpO1xuICAgICAgdGhpcy5fc2NvcmVBbGwoc3RyaW5nLCBzZWFyY2gsIGFiYnJldiwgLTEsIDAsIFtdLCBhbGxTY29yZXMpO1xuXG4gICAgICAvLyBjb21wbGV0ZSBtaXNzXG4gICAgICBpZiAoYWxsU2NvcmVzLmxlbmd0aCA9PSAwKSByZXR1cm4gMDtcblxuICAgICAgLy8gc3VtIHBlci1jaGFyYWN0ZXIgc2NvcmVzIGludG8gb3ZlcmFsbCBzY29yZXMsXG4gICAgICAvLyBzZWxlY3RpbmcgdGhlIG1heGltdW0gc2NvcmVcbiAgICAgIHZhciBtYXhTY29yZSA9IDAuMCwgbWF4QXJyYXkgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsU2NvcmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzY29yZXMgPSBhbGxTY29yZXNbaV07XG4gICAgICAgIHZhciBzY29yZVN1bSA9IDAuMDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdHJpbmcubGVuZ3RoOyBqKyspIHsgc2NvcmVTdW0gKz0gc2NvcmVzW2pdOyB9XG4gICAgICAgIGlmIChzY29yZVN1bSA+IG1heFNjb3JlKSB7XG4gICAgICAgICAgbWF4U2NvcmUgPSBzY29yZVN1bTtcbiAgICAgICAgICBtYXhBcnJheSA9IHNjb3JlcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBub3JtYWxpemUgbWF4IHNjb3JlIGJ5IHN0cmluZyBsZW5ndGhcbiAgICAgIC8vIHMuIHQuIHRoZSBwZXJmZWN0IG1hdGNoIHNjb3JlID0gMVxuICAgICAgbWF4U2NvcmUgLz0gc3RyaW5nLmxlbmd0aDtcblxuICAgICAgLy8gcmVjb3JkIG1heGltdW0gc2NvcmUgJiBzY29yZSBhcnJheSwgcmV0dXJuXG4gICAgICB0aGlzLmxhc3RTY29yZSA9IG1heFNjb3JlO1xuICAgICAgdGhpcy5sYXN0U2NvcmVBcnJheSA9IG1heEFycmF5O1xuICAgICAgcmV0dXJuIG1heFNjb3JlO1xuICAgIH0sXG5cbiAgICBfc2NvcmVBbGw6IGZ1bmN0aW9uKHN0cmluZywgc2VhcmNoLCBhYmJyZXYsIHNlYXJjaEluZGV4LCBhYmJySW5kZXgsIHNjb3JlcywgYWxsU2NvcmVzKSB7XG4gICAgICAvLyBzYXZlIGNvbXBsZXRlZCBtYXRjaCBzY29yZXMgYXQgZW5kIG9mIHNlYXJjaFxuICAgICAgaWYgKGFiYnJJbmRleCA9PSBhYmJyZXYubGVuZ3RoKSB7XG4gICAgICAgIC8vIGFkZCB0cmFpbGluZyBzY29yZSBmb3IgdGhlIHJlbWFpbmRlciBvZiB0aGUgbWF0Y2hcbiAgICAgICAgdmFyIHN0YXJ0ZWQgPSAoc2VhcmNoLmNoYXJBdCgwKSA9PSBhYmJyZXYuY2hhckF0KDApKTtcbiAgICAgICAgdmFyIHRyYWlsU2NvcmUgPSBzdGFydGVkID8gU0NPUkVfVFJBSUxJTkdfQlVUX1NUQVJURUQgOiBTQ09SRV9UUkFJTElORztcbiAgICAgICAgZmlsbEFycmF5KHNjb3JlcywgdHJhaWxTY29yZSwgc2NvcmVzLmxlbmd0aCwgc3RyaW5nLmxlbmd0aCk7XG4gICAgICAgIC8vIHNhdmUgc2NvcmUgY2xvbmUgKHNpbmNlIHJlZmVyZW5jZSBpcyBwZXJzaXN0ZWQgaW4gc2NvcmVzKVxuICAgICAgICBhbGxTY29yZXMucHVzaChzY29yZXMuc2xpY2UoMCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGNvbnN1bWUgY3VycmVudCBjaGFyIHRvIG1hdGNoXG4gICAgICB2YXIgYyA9IGFiYnJldi5jaGFyQXQoYWJickluZGV4KTtcbiAgICAgIGFiYnJJbmRleCsrO1xuXG4gICAgICAvLyBjYW5jZWwgbWF0Y2ggaWYgYSBjaGFyYWN0ZXIgaXMgbWlzc2luZ1xuICAgICAgdmFyIGluZGV4ID0gc2VhcmNoLmluZGV4T2YoYywgc2VhcmNoSW5kZXgpO1xuICAgICAgaWYgKGluZGV4ID09IC0xKSByZXR1cm47XG5cbiAgICAgIC8vIG1hdGNoIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGFiYnJldmlhdG9uIGNoYXJcbiAgICAgIHZhciBzY29yZUluZGV4ID0gc2VhcmNoSW5kZXg7IC8vIHNjb3JlIHNlY3Rpb24gdG8gdXBkYXRlXG4gICAgICB3aGlsZSAoKGluZGV4ID0gc2VhcmNoLmluZGV4T2YoYywgc2VhcmNoSW5kZXgrMSkpICE9IC0xKSB7XG4gICAgICAgIC8vIHNjb3JlIHRoaXMgbWF0Y2ggYWNjb3JkaW5nIHRvIGNvbnRleHRcbiAgICAgICAgaWYgKGlzTmV3V29yZChzdHJpbmcsIGluZGV4KSkge1xuICAgICAgICAgIHNjb3Jlc1tpbmRleC0xXSA9IDE7XG4gICAgICAgICAgZmlsbEFycmF5KHNjb3JlcywgU0NPUkVfQlVGRkVSLCBzY29yZUluZGV4KzEsIGluZGV4LTEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVXBwZXJDYXNlKHN0cmluZywgaW5kZXgpKSB7XG4gICAgICAgICAgZmlsbEFycmF5KHNjb3JlcywgU0NPUkVfQlVGRkVSLCBzY29yZUluZGV4KzEsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmaWxsQXJyYXkoc2NvcmVzLCBTQ09SRV9OT19NQVRDSCwgc2NvcmVJbmRleCsxLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgc2NvcmVzW2luZGV4XSA9IFNDT1JFX01BVENIO1xuXG4gICAgICAgIC8vIGNvbnN1bWUgbWF0Y2hlZCBzdHJpbmcgYW5kIGNvbnRpbnVlIHNlYXJjaFxuICAgICAgICBzZWFyY2hJbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLl9zY29yZUFsbChzdHJpbmcsIHNlYXJjaCwgYWJicmV2LCBzZWFyY2hJbmRleCwgYWJickluZGV4LCBzY29yZXMsIGFsbFNjb3Jlcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzVXBwZXJDYXNlKHN0cmluZywgaW5kZXgpIHtcbiAgICB2YXIgYyA9IHN0cmluZy5jaGFyQXQoaW5kZXgpO1xuICAgIHJldHVybiAoXCJBXCIgPD0gYyAmJiBjIDw9IFwiWlwiKTtcbiAgfVxuXG4gICBmdW5jdGlvbiBpc05ld1dvcmQoc3RyaW5nLCBpbmRleCkge1xuICAgIHZhciBjID0gc3RyaW5nLmNoYXJBdChpbmRleC0xKTtcbiAgICByZXR1cm4gKFdPUkRfU0VQQVJBVE9SUy5pbmRleE9mKGMpICE9IC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbGxBcnJheShhcnJheSwgdmFsdWUsIGZyb20sIHRvKSB7XG4gICAgZm9yICh2YXIgaSA9IGZyb207IGkgPCB0bzsgaSsrKSB7IGFycmF5W2ldID0gdmFsdWU7IH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvLyBFeHBvcnQgYXMgQU1ELi4uXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gTGlxdWlkTWV0YWw7IH0pO1xuICB9XG5cbiAgLy8gLi4ub3IgYXMgYSBub2RlIG1vZHVsZVxuICBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gTGlxdWlkTWV0YWw7XG4gIH1cblxuICBlbHNlIHtcbiAgICBnbG9iYWwuTGlxdWlkTWV0YWwgPSBMaXF1aWRNZXRhbDtcbiAgfVxufSkodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///820\n')},418:module=>{"use strict";eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixRQUFRO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWNrLXNjb3JlLWRlbW8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcz8zMjBjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///418\n")},448:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('var __webpack_unused_export__;\n/** @license React v17.0.2\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(294),m=__webpack_require__(418),r=__webpack_require__(840);function y(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(y(227));var ba=new Set,ca={};function da(a,b){ea(a,b);ea(a+"Capture",b)}\nfunction ea(a,b){ca[a]=b;for(a=0;a<b.length;a++)ba.add(b[a])}\nvar fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,ia=Object.prototype.hasOwnProperty,\nja={},ka={};function la(a){if(ia.call(ka,a))return!0;if(ia.call(ja,a))return!1;if(ha.test(a))return ka[a]=!0;ja[a]=!0;return!1}function ma(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}\nfunction na(a,b,c,d){if(null===b||"undefined"===typeof b||ma(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function B(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var D={};\n"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D[a]=new B(a,0,!1,a,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D[b]=new B(b,1,!1,a[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D[a]=new B(a,2,!1,a.toLowerCase(),null,!1,!1)});\n["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D[a]=new B(a,2,!1,a,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D[a]=new B(a,3,!1,a.toLowerCase(),null,!1,!1)});\n["checked","multiple","muted","selected"].forEach(function(a){D[a]=new B(a,3,!0,a,null,!1,!1)});["capture","download"].forEach(function(a){D[a]=new B(a,4,!1,a,null,!1,!1)});["cols","rows","size","span"].forEach(function(a){D[a]=new B(a,6,!1,a,null,!1,!1)});["rowSpan","start"].forEach(function(a){D[a]=new B(a,5,!1,a.toLowerCase(),null,!1,!1)});var oa=/[\\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}\n"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,\npa);D[b]=new B(b,1,!1,a,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D[b]=new B(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!1,!1)});\nD.xlinkHref=new B("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D[a]=new B(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction qa(a,b,c,d){var e=D.hasOwnProperty(b)?D[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}\nvar ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;\nif("function"===typeof Symbol&&Symbol.for){var E=Symbol.for;sa=E("react.element");ta=E("react.portal");ua=E("react.fragment");wa=E("react.strict_mode");xa=E("react.profiler");ya=E("react.provider");za=E("react.context");Aa=E("react.forward_ref");Ba=E("react.suspense");Ca=E("react.suspense_list");Da=E("react.memo");Ea=E("react.lazy");Fa=E("react.block");E("react.scope");Ga=E("react.opaque.id");Ha=E("react.debug_trace_mode");Ia=E("react.offscreen");Ja=E("react.legacy_hidden")}\nvar Ka="function"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||"object"!==typeof a)return null;a=Ka&&a[Ka]||a["@@iterator"];return"function"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);Ma=b&&b[1]||""}return"\\n"+Ma+a}var Oa=!1;\nfunction Pa(a,b){if(!a||Oa)return"";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(k){var d=k}Reflect.construct(a,[],b)}else{try{b.call()}catch(k){d=k}a.call(b.prototype)}else{try{throw Error();}catch(k){d=k}a()}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\\n"),\nf=d.stack.split("\\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return"\\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:"")?Na(a):""}\nfunction Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na("Lazy");case 13:return Na("Suspense");case 19:return Na("SuspenseList");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return""}}\nfunction Ra(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua:return"Fragment";case ta:return"Portal";case xa:return"Profiler";case wa:return"StrictMode";case Ba:return"Suspense";case Ca:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za:return(a.displayName||"Context")+".Consumer";case ya:return(a._context.displayName||"Context")+".Provider";case Aa:var b=a.render;b=b.displayName||b.name||"";\nreturn a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function Ta(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}\nfunction Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return m({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function $a(a,b){b=b.checked;null!=b&&qa(a,"checked",b,!1)}\nfunction ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction cb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}\nfunction bb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function db(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function eb(a,b){a=m({children:void 0},b);if(b=db(b.children))a.children=b;return a}\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y(91));return m({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};\nfunction lb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function mb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}\nvar nb,ob=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else{nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,\nfloodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a]})});function sb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(""+b).trim():b+"px"}\nfunction tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var ub=m({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y(62));}}\nfunction wb(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(y(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb()}\nfunction Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb()}}\nfunction Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==\ntypeof c)throw Error(y(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb)}catch(a){Pb=!1}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(n){this.onError(n)}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments)}\nfunction Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null}else throw Error(y(198));Ub||(Ub=!0,Vb=l)}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y(188));}\nfunction bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling}throw Error(y(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(y(189));}}if(c.alternate!==d)throw Error(y(190));}if(3!==c.tag)throw Error(y(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}\nfunction dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return!0;b=b.return}return!1}var ec,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");\nfunction rc(a,b,c,d,e){return{blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case "focusin":case "focusout":kc=null;break;case "dragenter":case "dragleave":lc=null;break;case "mouseover":case "mouseout":mc=null;break;case "pointerover":case "pointerout":nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc.delete(b.pointerId)}}\nfunction tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction uc(a,b,c,d,e){switch(b){case "focusin":return kc=tc(kc,a,b,c,d,e),!0;case "dragenter":return lc=tc(lc,a,b,c,d,e),!0;case "mouseover":return mc=tc(mc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r.unstable_runWithPriority(a.priority,function(){gc(c)})});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift()}return!0}function zc(a,b,c){xc(a)&&c.delete(b)}\nfunction Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift()}null===a.blockedOn&&jc.shift()}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc)}\nfunction Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Ac)))}\nfunction Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift()}\nfunction Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};\nfa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}\nvar Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",\n"lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da(e,[d])}}var Qc=r.unstable_now;Qc();var F=8;\nfunction Rc(a){if(0!==(1&a))return F=15,1;if(0!==(2&a))return F=14,2;if(0!==(4&a))return F=13,4;var b=24&a;if(0!==b)return F=12,b;if(0!==(a&32))return F=11,32;b=192&a;if(0!==b)return F=10,b;if(0!==(a&256))return F=9,256;b=3584&a;if(0!==b)return F=8,b;if(0!==(a&4096))return F=7,4096;b=4186112&a;if(0!==b)return F=6,b;b=62914560&a;if(0!==b)return F=5,b;if(a&67108864)return F=4,67108864;if(0!==(a&134217728))return F=3,134217728;b=805306368&a;if(0!==b)return F=2,b;if(0!==(1073741824&a))return F=1,1073741824;\nF=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y(358,a));}}\nfunction Uc(a,b){var c=a.pendingLanes;if(0===c)return F=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F):(h&=f,0!==h&&(d=Rc(h),e=F))}else f=c&~g,0!==f?(d=Rc(f),e=F):0!==h&&(d=Rc(h),e=F);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F)return b;F=e}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d)}finally{(Kb=f)||Mb()}}function id(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d))}\nfunction hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else{var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else{if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d)}jd(a,b,d,null,c)}}}}\nfunction yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else{var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null}else f!==e&&(e=null)}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;\nfunction nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in\na)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return"movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m({},sd,{clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",\nSpacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",\n119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=m({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return"keypress"===a.type?od(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===\na.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m({},Ad,{deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&"CompositionEvent"in window,be=null;fa&&"documentMode"in document&&(be=document.documentMode);var ce=fa&&"TextEvent"in window&&!be,de=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case "keyup":return-1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return!0;default:return!1}}function he(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return"compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if("change"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null)}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else{Kb=!0;try{Gb(a,b)}finally{Kb=!1,Mb()}}}}\nfunction Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae()}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;\nfunction Je(a,b){if(He(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return!1;return!0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Ke(c)}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}\nvar Pe=fa&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nPc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),\n0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);\nea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da("onBeforeInput",["compositionend","keypress","textInput","paste"]);da("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));\nda("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));\nfunction Ze(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}\nfunction G(a,b){var c=$e(b),d=a+"__bubble";c.has(d)||(af(b,a,2,!1),c.add(d))}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null)}))}\nfunction df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if("scroll"!==a)return;e|=2;f=d}var g=$e(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af(f,a,e,b),g.add(h))}\nfunction af(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id;break;default:e=hd}c=e.bind(null,b,c,a);e=void 0;!Pb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Nb(function(){var d=f,e=xb(c),g=[];\na:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":x="focus";k=Fd;break;case "focusout":x="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=\nDd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==\nt;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}))}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==\nx&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null}else k=null,x=d;if(k!==x){w=Bd;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=\ngf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u)}w=null}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else{J=De;var K=Ce}else(k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&\nK.controlled&&"number"===h.type&&bb(h,"number",h.value)}K=d?ue(d):window;switch(a){case "focusin":if(me(K)||"true"===K.contentEditable)Qe=K,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e)}var Q;if(ae)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;\ncase "compositionupdate":L="onCompositionUpdate";break b}L=void 0}else ie?ge(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie&&(Q=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),0<d.length&&(e=new Ld("onBeforeInput",\n"beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q)}se(g,b)})}function ef(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}\nfunction nf(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""))}\nfunction rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--}else"/$"===c&&b++}a=a.previousSibling}return null}var tf=0;function uf(a){return{$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;\nfunction wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[wf]||a[ff];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y(33));}function Db(a){return a[xf]||null}\nfunction $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return{current:a}}function H(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--)}function I(a,b){Af++;zf[Af]=a.current;a.current=b}var Cf={},M=Bf(Cf),N=Bf(!1),Df=Cf;\nfunction Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H(N);H(M)}function Hf(a,b,c){if(M.current!==Cf)throw Error(y(168));I(M,b);I(N,c)}\nfunction If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y(108,Ra(b)||"Unknown",e));return m({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M.current;I(M,a);I(N,N.current);return!0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H(N),H(M),I(M,a)):H(N);I(N,c)}\nvar Lf=null,Mf=null,Nf=r.unstable_runWithPriority,Of=r.unstable_scheduleCallback,Pf=r.unstable_cancelCallback,Qf=r.unstable_shouldYield,Rf=r.unstable_requestPaint,Sf=r.unstable_now,Tf=r.unstable_getCurrentPriorityLevel,Uf=r.unstable_ImmediatePriority,Vf=r.unstable_UserBlockingPriority,Wf=r.unstable_NormalPriority,Xf=r.unstable_LowPriority,Yf=r.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O=1E4>dg?Sf:function(){return Sf()-dg};\nfunction eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a)}jg()}\nfunction jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null}\nfunction rg(a){var b=mg.current;H(mg);a.type._context._currentValue=b}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null)}\nfunction vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null}}else og=og.next=b}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}\nfunction yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function zg(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}\nfunction Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k)}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,\nnext:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m({},A,h);break a;case 2:wg=!0}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f))}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===\nf)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y(191,e));e.call(d)}}}var Fg=(new aa.Component).refs;\nfunction Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Kg={isMounted:function(a){return(a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d)},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=\nb);Ag(a,e);Jg(a,d,c)}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}\nfunction Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null)}\nfunction Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||\n(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4)}var Pg=Array.isArray;\nfunction Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y(309));var d=c.stateNode}if(!d)throw Error(y(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y(284));if(!c._owner)throw Error(y(290,a));}return a}\nfunction Rg(a,b){if("textarea"!==a.type)throw Error(y(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}\nfunction Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,\nc):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=\nWg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,\na.mode,c,null),b.return=a,b;Rg(a,b)}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c)}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||\nnull,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d)}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===\nn.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if("function"!==typeof l)throw Error(y(150));h=l.call(h);if(null==\nh)throw Error(y(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&\nu.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);\nd=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h)}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=\nWg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y(152,Ra(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);\nfunction dh(a){if(a===$g)throw Error(y(174));return a}function eh(a,b){I(ch,b);I(bh,a);I(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a)}H(ah);I(ah,b)}function fh(){H(ah);H(bh);H(ch)}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I(bh,a),I(ah,c))}function hh(a){bh.current===a&&(H(ah),H(bh))}var P=Bf(0);\nfunction ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var jh=null,kh=null,lh=!1;\nfunction mh(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}\nfunction ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh(jh,c)}jh=a;kh=rf(b.firstChild)}else a.flags=a.flags&-1025|2,lh=!1,jh=a}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a}\nfunction rh(a){if(a!==jh)return!1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--}else"$"!==c&&"$!"!==c&&"$?"!==c||b++}a=a.nextSibling}kh=null}}else kh=jh?rf(a.stateNode.nextSibling):null;return!0}\nfunction sh(){kh=jh=null;lh=!1}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R=null,S=null,T=null,yh=!1,zh=!1;function Ah(){throw Error(y(321));}function Bh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Ch(a,b,c,d,e,f){xh=f;R=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh){f=0;do{zh=!1;if(!(25>f))throw Error(y(301));f+=1;T=S=null;b.updateQueue=null;vh.current=Fh;a=c(d,e)}while(zh)}vh.current=Gh;b=null!==S&&null!==S.next;xh=0;T=S=R=null;yh=!1;if(b)throw Error(y(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R.memoizedState=T=a:T=T.next=a;return T}\nfunction Ih(){if(null===S){var a=R.alternate;a=null!==a?a.memoizedState:null}else a=S.next;var b=null===T?R.memoizedState:T.next;if(null!==b)T=b,S=a;else{if(null===a)throw Error(y(310));S=a;a={memoizedState:S.memoizedState,baseState:S.baseState,baseQueue:S.baseQueue,queue:S.queue,next:null};null===T?R.memoizedState=T=a:T=T.next=a}return T}function Jh(a,b){return"function"===typeof b?b(a):b}\nfunction Kh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=S,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else{var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,\neagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R.lanes|=l;Dg|=l}k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}\nfunction Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}\nfunction Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y(350));}\nfunction Nh(a,b,c,d){var e=U;if(null===e)throw Error(y(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=\ne.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes}catch(q){c(function(){throw q;})}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}\nfunction Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R,a);return[b.memoizedState,a]}\nfunction Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R.updateQueue;null===b?(b={lastEffect:null},R.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d)}\nfunction Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S){var g=S.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R.flags|=a;e.memoizedState=Rh(1|b,c,f,d)}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}\nfunction $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}\nfunction di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0)});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b()}finally{wh.transition=c}})}\nfunction Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R||null!==g&&g===R)zh=yh=!0;else{if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d)}}\nvar Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,\nb,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R,a);return[d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;\nwh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return[a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y(355));}),c=Qh(b)[1];0===(R.mode&2)&&(R.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36))},\nvoid 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh,useRef:Th,useState:function(){return Kh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Kh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a)}finally{wh.transition=b}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return[Th().current,\na]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d)}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,d,e);return b.child}\nfunction ii(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}\nfunction mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi(a,b,e,c);return b.child}\nfunction oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128}function li(a,b,c,d,e){var f=Ff(c)?Df:M.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi(a,b,c,e);return b.child}\nfunction pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b)}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&\n"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===\ntypeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1)}else{g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||\n"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,\nx,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||\nh===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1)}return qi(a,b,c,d,f,e)}\nfunction qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo)}\nvar si={dehydrated:null,retryLane:0};\nfunction ti(a,b,c){var d=b.pendingProps,e=P.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I(P,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},\nb.memoizedState=si,b.lanes=33554432,a;c=vi({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:\n{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}\nfunction xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}\nfunction wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b)}\nfunction zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f)}\nfunction Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi(a,b,d.children,c);d=P.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else{if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(P,d);if(0===(b.mode&2))b.memoizedState=\nnull;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}zi(b,!0,c,null,f,b.lastEffect);break;case "together":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}\nfunction hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}return null}var Bi,Ci,Di,Ei;\nBi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Ci=function(){};\nDi=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m({},e,{value:void 0});d=m({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf)}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===\nl){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="")}else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||\n(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,c)),c=k;else"dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k))}c&&(f=f||[]).push("style",\nc);var l=f;if(b.updateQueue=l)b.flags|=4}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4)};function Fi(a,b){if(!lh)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H(N);H(M);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else{if(!d){if(null===\nb.stateNode)throw Error(y(166));return null}a=dh(ah.current);if(rh(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G("cancel",d);G("close",d);break;case "iframe":case "object":case "embed":G("load",d);break;case "video":case "audio":for(a=0;a<Xe.length;a++)G(Xe[a],d);break;case "source":G("error",d);break;case "img":case "image":case "link":G("error",d);G("load",d);break;case "details":G("toggle",d);break;case "input":Za(d,f);G("invalid",d);break;case "select":d._wrapperState=\n{wasMultiple:!!f.multiple};G("invalid",d);break;case "textarea":hb(d,f),G("invalid",d)}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G("scroll",d));switch(c){case "input":Va(d);cb(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=\njf)}d=a;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case "dialog":G("cancel",a);G("close",a);\ne=d;break;case "iframe":case "object":case "embed":G("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe.length;e++)G(Xe[e],a);e=d;break;case "source":G("error",a);e=d;break;case "img":case "image":case "link":G("error",a);G("load",a);e=d;break;case "details":G("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);G("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m({},d,{value:void 0});G("invalid",a);break;case "textarea":hb(a,d);e=\ngb(a,d);G("invalid",a);break;default:e=d}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb(a,k):"number"===typeof k&&pb(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G("scroll",a):null!=k&&qa(a,f,k,g))}switch(c){case "input":Va(a);cb(a,d,!1);\nbreak;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf)}mf(c,d)&&(b.flags|=4)}null!==b.ref&&(b.flags|=128)}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(y(166));\nc=dh(ch.current);dh(ah.current);rh(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d)}return null;case 13:H(P);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P.current&1))0===V&&(V=3);else{if(0===V||3===V)V=\n4;null===U||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U,W)}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H(P);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else{if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);\nnull===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,\nf.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I(P,P.current&1|2);return b.child}a=a.sibling}null!==d.tail&&O()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432)}else{if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=\n64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g)}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O(),c.sibling=null,b=P.current,I(P,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y(156,b.tag));}\nfunction Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H(N);H(M);uh();b=a.flags;if(0!==(b&64))throw Error(y(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H(P),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H(P),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}\nfunction Mi(a,b){try{var c="",d=b;do c+=Qa(d),d=d.return;while(d);var e=c}catch(f){e="\\nError generating stack: "+f.message+"\\n"+f.stack}return{value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Oi="function"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b)};return c}\nfunction Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}var Ui="function"===typeof WeakSet?WeakSet:Set;\nfunction Vi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Wi(a,c)}else b.current=null}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y(163));}\nfunction Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d()}a=a.next}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,\nb.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Eg(c,b,a)}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));\nreturn;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y(163));}\nfunction aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else{d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb("display",e)}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===\na)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return}c.sibling.return=c.return;c=c.sibling}}\nfunction bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b)}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else{d=b;try{e()}catch(f){Wi(d,f)}}c=c.next}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount()}catch(f){Wi(b,\nf)}break;case 5:Vi(b);break;case 4:cj(a,b)}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return}throw Error(y(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y(161));}c.flags&16&&(pb(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===\nc.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b)}\nfunction gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling}\nfunction hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling}\nfunction cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return}d=!0}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else{if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return}k.sibling.return=k.return;k=k.sibling}f?(g=e,h=c.stateNode,\n8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode)}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1)}c.sibling.return=c.return;c=c.sibling}}\nfunction ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=\n2){var g=f[e],h=f[e+1];"style"===g?tb(c,h):"dangerouslySetInnerHTML"===g?ob(c,h):"children"===g?pb(c,h):qa(c,g,h,b)}switch(a){case "input":ab(c,d);break;case "textarea":ib(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(y(162));b.stateNode.nodeValue=\nb.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X=0,U=null,Y=null,W=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O()+500}var Z=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X&48)?O():-1!==Fj?Fj:Fj=O()}\nfunction Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}\nfunction Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U&&(Hi|=b,4===V&&Ii(a,W));var d=eg();1===b?0!==(X&8)&&0===(X&48)?Lj(a):(Mj(a,c),0===X&&(wj(),ig())):(0===(X&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}\nfunction Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F;f[h]=10<=n?l+250:6<=n?l+5E3:-1}}else l<=b&&(a.expiredLanes|=k);g&=~k}d=Uc(a,a===U?W:0);b=F;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else{if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c)}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),\nc=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c}}\nfunction Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X&48))throw Error(y(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U?W:0);if(0===c)return null;var d=c;var e=X;X|=16;var f=Pj();if(U!==a||W!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h)}while(1);qg();oj.current=f;X=e;null!==Y?d=0:(U=null,W=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O()),b;a.finishedWork=\na.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f}c=e;c=O()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>\nc?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y(329));}}Mj(a,O());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d}}\nfunction Lj(a){if(0!==(X&48))throw Error(y(327));Oj();if(a===U&&0!==(a.expiredLanes&W)){var b=W;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b))}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O());return null}\nfunction Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O())})}ig()}function Wj(a,b){var c=X;X|=1;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function Xj(a,b){var c=X;X&=-2;X|=8;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}}function ni(a,b){I(rj,qj);qj|=b;tj|=b}function Ki(){qj=rj.current;H(rj)}\nfunction Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H(N);H(M);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H(P);break;case 19:H(P);break;case 10:rg(d);break;case 23:case 24:Ki()}c=c.return}U=a;Y=Tg(a.current,null);W=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0}\nfunction Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}yh=!1}xh=0;T=S=R=null;zh=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):\n(h.updateQueue=null,h.memoizedState=null)}var A=0!==(P.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else{var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else{var t=zg(-1,1);t.tag=2;Ag(h,t)}h.lanes|=1;break a}k=\nvoid 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v)}p.flags|=4096;p.lanes=b;break a}p=p.return}while(null!==p);k=Error((Ra(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==V&&(V=2);k=Mi(k,h);p=\ng;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return}while(null!==p)}Zj(c)}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}\nfunction Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X;X|=16;var d=Pj();U===a&&W===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e)}while(1);qg();X=c;oj.current=d;if(null!==Y)throw Error(y(261));U=null;W=0;return V}function ak(){for(;null!==Y;)bk(Y)}function Rj(){for(;null!==Y&&!Qf();)bk(Y)}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null}\nfunction Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==\na.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b))}else{c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048)}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===V&&(V=5)}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}\nfunction dk(a,b){do Oj();while(null!==yj);if(0!==(X&48))throw Error(y(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l}null!==\nCj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U&&(Y=U=null,W=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X;X|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType}catch(va){h=null;\nbreak a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode}w=u}h=-1===A||-1===p?null:{start:A,end:p}}else h=null;h=h||{start:0,end:0}}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z=d;do try{ek()}catch(va){if(null===\nZ)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Ij=null;Z=d;do try{for(g=a;null!==Z;){var t=Z.flags;t&16&&pb(Z.stateNode,"");if(t&128){var q=Z.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null)}}switch(t&1038){case 2:fj(Z);Z.flags&=-3;break;case 6:fj(Z);Z.flags&=-3;ij(Z.alternate,Z);break;case 1024:Z.flags&=-1025;break;case 1028:Z.flags&=-1025;ij(Z.alternate,Z);break;case 4:ij(Z.alternate,Z);break;case 8:h=Z;cj(g,h);var J=h.alternate;dj(h);null!==\nJ&&dj(J)}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===\ng.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=\n0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top}fd=!!kf;lf=kf=null;a.current=c;Z=d;do try{for(t=a;null!==Z;){var K=Z.flags;K&36&&Yi(t,Z.alternate,Z);if(K&128){q=void 0;var Q=Z.ref;if(null!==Q){var L=Z.stateNode;switch(Z.tag){case 5:q=L;break;default:q=L}"function"===typeof Q?Q(q):Q.current=q}}Z=Z.nextEffect}}catch(va){if(null===Z)throw Error(y(330));Wi(Z,va);Z=Z.nextEffect}while(null!==Z);Z=null;$f();X=e}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z=d;null!==Z;)b=\nZ.nextEffect,Z.nextEffect=null,Z.flags&8&&(K=Z,K.sibling=null,K.stateNode=null),Z=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64))}catch(va){}Mj(a,O());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X&8))return null;ig();return null}\nfunction ek(){for(;null!==Z;){var a=Z.alternate;Jj||null===Ij||(0!==(Z.flags&8)?dc(Z,Ij)&&(Jj=!0):13===Z.tag&&mj(a,Z)&&dc(Z,Ij)&&(Jj=!0));var b=Z.flags;0!==(b&256)&&Xi(a,Z);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z=Z.nextEffect}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return!1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}))}\nfunction fk(){if(null===yj)return!1;var a=yj;yj=null;if(0!==(X&48))throw Error(y(331));var b=X;X|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h()}catch(k){if(null===f)throw Error(y(330));Wi(f,k)}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=\nnull,h.stateNode=null),h=a;X=b;ig();return!0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b))}\nfunction Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a)}catch(f){}break}}c=c.return}}\nfunction Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U===a&&(W&c)===c&&(4===V||3===V&&(W&62914560)===W&&500>O()-jj?Qj(a,0):uj|=c);Mj(a,b)}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c))}var ck;\nck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else{ug=!1;switch(b.tag){case 3:ri(b);sh();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I(P,P.current&1);b=hi(a,b,c);return null!==\nb?b.sibling:null}I(P,P.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I(P,P.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===\ntypeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c)}else b.tag=0,fi(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);\na=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y(282));\nd=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh(),b=hi(a,b,c);else{e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling}else fi(a,b,d,c),sh();b=b.child}return b;case 5:return gh(b),null===a&&\nph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi(a,b,b.pendingProps,c),b.child;case 8:return fi(a,b,b.pendingProps.children,\nc),b.child;case 12:return fi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=\nk.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=g}fi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,\nf.unstable_observedBits),d=d(e),b.flags|=1,fi(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y(156,b.tag));\n};function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction hk(a){if("function"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}\nfunction Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if("object"===\ntypeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}\nfunction Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null}\nfunction kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ta,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}\nfunction lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(y(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==\nd&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b)}function pk(){return null}\nfunction qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e)}this._internalRoot=c}\nqk.prototype.render=function(a){lk(a,this._internalRoot,null,null)};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null})};function rk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}\nfunction sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}\nfunction tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a)}}lk(b,g,a,e)}else{f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a)}}Xj(function(){lk(b,g,a,e)})}return mk(g)}ec=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4)}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864)}};\ngc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c)}};hc=function(a,b){return b()};\nyb=function(a,b,c){switch(b){case "input":ab(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+\'][type="radio"]\');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y(90));Wa(d);ab(d,e)}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Wj;\nHb=function(a,b,c,d,e){var f=X;X|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X=f,0===X&&(wj(),ig())}};Ib=function(){0===(X&49)&&(Vj(),Oj())};Jb=function(a,b){var c=X;X|=2;try{return a(b)}finally{X=c,0===X&&(wj(),ig())}};function uk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};\nvar xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||\npk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk}catch(a){}}__webpack_unused_export__=vk;__webpack_unused_export__=uk;\n__webpack_unused_export__=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y(188));throw Error(y(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};__webpack_unused_export__=function(a,b){var c=X;if(0!==(c&48))return a(b);X|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X=c,ig()}};__webpack_unused_export__=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!0,c)};\nexports.render=function(a,b,c){if(!rk(b))throw Error(y(200));return tk(null,a,b,!1,c)};__webpack_unused_export__=function(a){if(!rk(a))throw Error(y(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null})}),!0):!1};__webpack_unused_export__=Wj;__webpack_unused_export__=function(a,b){return uk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};\n__webpack_unused_export__=function(a,b,c,d){if(!rk(c))throw Error(y(200));if(null==a||void 0===a._reactInternals)throw Error(y(38));return tk(a,b,c,!1,d)};__webpack_unused_export__="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///448\n')},935:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {}\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(448);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTM1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDLEVBQUUsRUFTMUM7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLEVBQUUseUNBQTZEO0FBQy9ELEVBQUUsS0FBSyxFQUVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcXVpY2stc2NvcmUtZGVtby8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanM/OGJjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///935\n")},921:(__unused_webpack_module,exports)=>{"use strict";eval('var __webpack_unused_export__;\n/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif("function"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x("react.element");c=x("react.portal");d=x("react.fragment");e=x("react.strict_mode");f=x("react.profiler");g=x("react.provider");h=x("react.context");k=x("react.forward_ref");l=x("react.suspense");m=x("react.suspense_list");n=x("react.memo");p=x("react.lazy");q=x("react.block");r=x("react.server.block");u=x("react.fundamental");v=x("react.debug_trace_mode");w=x("react.legacy_hidden")}\nfunction y(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;__webpack_unused_export__=h;__webpack_unused_export__=z;__webpack_unused_export__=A;__webpack_unused_export__=B;__webpack_unused_export__=C;__webpack_unused_export__=D;__webpack_unused_export__=E;__webpack_unused_export__=F;__webpack_unused_export__=G;__webpack_unused_export__=H;\n__webpack_unused_export__=I;__webpack_unused_export__=function(){return!1};__webpack_unused_export__=function(){return!1};__webpack_unused_export__=function(a){return y(a)===h};__webpack_unused_export__=function(a){return y(a)===g};__webpack_unused_export__=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===b};__webpack_unused_export__=function(a){return y(a)===k};__webpack_unused_export__=function(a){return y(a)===d};__webpack_unused_export__=function(a){return y(a)===p};__webpack_unused_export__=function(a){return y(a)===n};\n__webpack_unused_export__=function(a){return y(a)===c};__webpack_unused_export__=function(a){return y(a)===f};__webpack_unused_export__=function(a){return y(a)===e};__webpack_unused_export__=function(a){return y(a)===l};exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||"object"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIxLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2E7QUFDYiwyQ0FBMkMsaUJBQWlCLHFCQUFxQixvQkFBb0Isc0JBQXNCLHlCQUF5QixzQkFBc0Isc0JBQXNCLHFCQUFxQix5QkFBeUIsc0JBQXNCLDJCQUEyQixrQkFBa0Isa0JBQWtCLG1CQUFtQiwwQkFBMEIseUJBQXlCLDhCQUE4QjtBQUN2YSxjQUFjLGtDQUFrQyxpQkFBaUIsVUFBVSwwQkFBMEIsNENBQTRDLGtDQUFrQyw0Q0FBNEMsa0JBQWtCLGtCQUFrQiw0Q0FBNEMseUJBQXVCLEdBQUcseUJBQXVCLEdBQUcseUJBQWUsR0FBRyx5QkFBa0IsR0FBRyx5QkFBZ0IsR0FBRyx5QkFBWSxHQUFHLHlCQUFZLEdBQUcseUJBQWMsR0FBRyx5QkFBZ0IsR0FBRyx5QkFBa0I7QUFDamYseUJBQWdCLEdBQUcseUJBQW1CLFlBQVksVUFBVSx5QkFBd0IsWUFBWSxVQUFVLHlCQUF5QixhQUFhLGlCQUFpQix5QkFBeUIsYUFBYSxpQkFBaUIseUJBQWlCLGFBQWEscURBQXFELHlCQUFvQixhQUFhLGlCQUFpQix5QkFBa0IsYUFBYSxpQkFBaUIseUJBQWMsYUFBYSxpQkFBaUIseUJBQWMsYUFBYTtBQUNwZCx5QkFBZ0IsYUFBYSxpQkFBaUIseUJBQWtCLGFBQWEsaUJBQWlCLHlCQUFvQixhQUFhLGlCQUFpQix5QkFBa0IsYUFBYSxpQkFBaUIsMEJBQTBCLGFBQWE7QUFDdk8sY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL3F1aWNrLXNjb3JlLWRlbW8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzP2E5M2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///921\n')},864:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(921);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODY0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBNEQ7QUFDOUQsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzPzRjZWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///864\n")},408:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('/** @license React v17.0.2\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar l=__webpack_require__(418),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif("function"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w("react.element");p=w("react.portal");exports.Fragment=w("react.fragment");exports.StrictMode=w("react.strict_mode");exports.Profiler=w("react.profiler");q=w("react.provider");r=w("react.context");t=w("react.forward_ref");exports.Suspense=w("react.suspense");u=w("react.memo");v=w("react.lazy")}var x="function"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||"object"!==typeof a)return null;a=x&&a[x]||a["@@iterator"];return"function"===typeof a?a:null}function z(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,"setState")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return"object"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={"=":"=0",":":"=2"};return"$"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=""===e?"."+N(h,0):e,Array.isArray(d)?(c="",null!=a&&(c=a.replace(M,"$&/")+"/"),O(d,b,c,"",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?"":(""+d.key).replace(M,"$&/")+"/")+a)),b.push(d)),1;h=0;e=""===e?".":e+":";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if("object"===k)throw b=""+a,Error(z(31,"[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,"","",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version="17.0.2";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///408\n')},294:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(408);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx5Q0FBeUQ7QUFDM0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzP2FiNWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///294\n")},826:module=>{eval('var characterMap = {\r\n\t"À": "A",\r\n\t"Á": "A",\r\n\t"Â": "A",\r\n\t"Ã": "A",\r\n\t"Ä": "A",\r\n\t"Å": "A",\r\n\t"Ấ": "A",\r\n\t"Ắ": "A",\r\n\t"Ẳ": "A",\r\n\t"Ẵ": "A",\r\n\t"Ặ": "A",\r\n\t"Æ": "AE",\r\n\t"Ầ": "A",\r\n\t"Ằ": "A",\r\n\t"Ȃ": "A",\r\n\t"Ç": "C",\r\n\t"Ḉ": "C",\r\n\t"È": "E",\r\n\t"É": "E",\r\n\t"Ê": "E",\r\n\t"Ë": "E",\r\n\t"Ế": "E",\r\n\t"Ḗ": "E",\r\n\t"Ề": "E",\r\n\t"Ḕ": "E",\r\n\t"Ḝ": "E",\r\n\t"Ȇ": "E",\r\n\t"Ì": "I",\r\n\t"Í": "I",\r\n\t"Î": "I",\r\n\t"Ï": "I",\r\n\t"Ḯ": "I",\r\n\t"Ȋ": "I",\r\n\t"Ð": "D",\r\n\t"Ñ": "N",\r\n\t"Ò": "O",\r\n\t"Ó": "O",\r\n\t"Ô": "O",\r\n\t"Õ": "O",\r\n\t"Ö": "O",\r\n\t"Ø": "O",\r\n\t"Ố": "O",\r\n\t"Ṍ": "O",\r\n\t"Ṓ": "O",\r\n\t"Ȏ": "O",\r\n\t"Ù": "U",\r\n\t"Ú": "U",\r\n\t"Û": "U",\r\n\t"Ü": "U",\r\n\t"Ý": "Y",\r\n\t"à": "a",\r\n\t"á": "a",\r\n\t"â": "a",\r\n\t"ã": "a",\r\n\t"ä": "a",\r\n\t"å": "a",\r\n\t"ấ": "a",\r\n\t"ắ": "a",\r\n\t"ẳ": "a",\r\n\t"ẵ": "a",\r\n\t"ặ": "a",\r\n\t"æ": "ae",\r\n\t"ầ": "a",\r\n\t"ằ": "a",\r\n\t"ȃ": "a",\r\n\t"ç": "c",\r\n\t"ḉ": "c",\r\n\t"è": "e",\r\n\t"é": "e",\r\n\t"ê": "e",\r\n\t"ë": "e",\r\n\t"ế": "e",\r\n\t"ḗ": "e",\r\n\t"ề": "e",\r\n\t"ḕ": "e",\r\n\t"ḝ": "e",\r\n\t"ȇ": "e",\r\n\t"ì": "i",\r\n\t"í": "i",\r\n\t"î": "i",\r\n\t"ï": "i",\r\n\t"ḯ": "i",\r\n\t"ȋ": "i",\r\n\t"ð": "d",\r\n\t"ñ": "n",\r\n\t"ò": "o",\r\n\t"ó": "o",\r\n\t"ô": "o",\r\n\t"õ": "o",\r\n\t"ö": "o",\r\n\t"ø": "o",\r\n\t"ố": "o",\r\n\t"ṍ": "o",\r\n\t"ṓ": "o",\r\n\t"ȏ": "o",\r\n\t"ù": "u",\r\n\t"ú": "u",\r\n\t"û": "u",\r\n\t"ü": "u",\r\n\t"ý": "y",\r\n\t"ÿ": "y",\r\n\t"Ā": "A",\r\n\t"ā": "a",\r\n\t"Ă": "A",\r\n\t"ă": "a",\r\n\t"Ą": "A",\r\n\t"ą": "a",\r\n\t"Ć": "C",\r\n\t"ć": "c",\r\n\t"Ĉ": "C",\r\n\t"ĉ": "c",\r\n\t"Ċ": "C",\r\n\t"ċ": "c",\r\n\t"Č": "C",\r\n\t"č": "c",\r\n\t"C̆": "C",\r\n\t"c̆": "c",\r\n\t"Ď": "D",\r\n\t"ď": "d",\r\n\t"Đ": "D",\r\n\t"đ": "d",\r\n\t"Ē": "E",\r\n\t"ē": "e",\r\n\t"Ĕ": "E",\r\n\t"ĕ": "e",\r\n\t"Ė": "E",\r\n\t"ė": "e",\r\n\t"Ę": "E",\r\n\t"ę": "e",\r\n\t"Ě": "E",\r\n\t"ě": "e",\r\n\t"Ĝ": "G",\r\n\t"Ǵ": "G",\r\n\t"ĝ": "g",\r\n\t"ǵ": "g",\r\n\t"Ğ": "G",\r\n\t"ğ": "g",\r\n\t"Ġ": "G",\r\n\t"ġ": "g",\r\n\t"Ģ": "G",\r\n\t"ģ": "g",\r\n\t"Ĥ": "H",\r\n\t"ĥ": "h",\r\n\t"Ħ": "H",\r\n\t"ħ": "h",\r\n\t"Ḫ": "H",\r\n\t"ḫ": "h",\r\n\t"Ĩ": "I",\r\n\t"ĩ": "i",\r\n\t"Ī": "I",\r\n\t"ī": "i",\r\n\t"Ĭ": "I",\r\n\t"ĭ": "i",\r\n\t"Į": "I",\r\n\t"į": "i",\r\n\t"İ": "I",\r\n\t"ı": "i",\r\n\t"Ĳ": "IJ",\r\n\t"ĳ": "ij",\r\n\t"Ĵ": "J",\r\n\t"ĵ": "j",\r\n\t"Ķ": "K",\r\n\t"ķ": "k",\r\n\t"Ḱ": "K",\r\n\t"ḱ": "k",\r\n\t"K̆": "K",\r\n\t"k̆": "k",\r\n\t"Ĺ": "L",\r\n\t"ĺ": "l",\r\n\t"Ļ": "L",\r\n\t"ļ": "l",\r\n\t"Ľ": "L",\r\n\t"ľ": "l",\r\n\t"Ŀ": "L",\r\n\t"ŀ": "l",\r\n\t"Ł": "l",\r\n\t"ł": "l",\r\n\t"Ḿ": "M",\r\n\t"ḿ": "m",\r\n\t"M̆": "M",\r\n\t"m̆": "m",\r\n\t"Ń": "N",\r\n\t"ń": "n",\r\n\t"Ņ": "N",\r\n\t"ņ": "n",\r\n\t"Ň": "N",\r\n\t"ň": "n",\r\n\t"ŉ": "n",\r\n\t"N̆": "N",\r\n\t"n̆": "n",\r\n\t"Ō": "O",\r\n\t"ō": "o",\r\n\t"Ŏ": "O",\r\n\t"ŏ": "o",\r\n\t"Ő": "O",\r\n\t"ő": "o",\r\n\t"Œ": "OE",\r\n\t"œ": "oe",\r\n\t"P̆": "P",\r\n\t"p̆": "p",\r\n\t"Ŕ": "R",\r\n\t"ŕ": "r",\r\n\t"Ŗ": "R",\r\n\t"ŗ": "r",\r\n\t"Ř": "R",\r\n\t"ř": "r",\r\n\t"R̆": "R",\r\n\t"r̆": "r",\r\n\t"Ȓ": "R",\r\n\t"ȓ": "r",\r\n\t"Ś": "S",\r\n\t"ś": "s",\r\n\t"Ŝ": "S",\r\n\t"ŝ": "s",\r\n\t"Ş": "S",\r\n\t"Ș": "S",\r\n\t"ș": "s",\r\n\t"ş": "s",\r\n\t"Š": "S",\r\n\t"š": "s",\r\n\t"Ţ": "T",\r\n\t"ţ": "t",\r\n\t"ț": "t",\r\n\t"Ț": "T",\r\n\t"Ť": "T",\r\n\t"ť": "t",\r\n\t"Ŧ": "T",\r\n\t"ŧ": "t",\r\n\t"T̆": "T",\r\n\t"t̆": "t",\r\n\t"Ũ": "U",\r\n\t"ũ": "u",\r\n\t"Ū": "U",\r\n\t"ū": "u",\r\n\t"Ŭ": "U",\r\n\t"ŭ": "u",\r\n\t"Ů": "U",\r\n\t"ů": "u",\r\n\t"Ű": "U",\r\n\t"ű": "u",\r\n\t"Ų": "U",\r\n\t"ų": "u",\r\n\t"Ȗ": "U",\r\n\t"ȗ": "u",\r\n\t"V̆": "V",\r\n\t"v̆": "v",\r\n\t"Ŵ": "W",\r\n\t"ŵ": "w",\r\n\t"Ẃ": "W",\r\n\t"ẃ": "w",\r\n\t"X̆": "X",\r\n\t"x̆": "x",\r\n\t"Ŷ": "Y",\r\n\t"ŷ": "y",\r\n\t"Ÿ": "Y",\r\n\t"Y̆": "Y",\r\n\t"y̆": "y",\r\n\t"Ź": "Z",\r\n\t"ź": "z",\r\n\t"Ż": "Z",\r\n\t"ż": "z",\r\n\t"Ž": "Z",\r\n\t"ž": "z",\r\n\t"ſ": "s",\r\n\t"ƒ": "f",\r\n\t"Ơ": "O",\r\n\t"ơ": "o",\r\n\t"Ư": "U",\r\n\t"ư": "u",\r\n\t"Ǎ": "A",\r\n\t"ǎ": "a",\r\n\t"Ǐ": "I",\r\n\t"ǐ": "i",\r\n\t"Ǒ": "O",\r\n\t"ǒ": "o",\r\n\t"Ǔ": "U",\r\n\t"ǔ": "u",\r\n\t"Ǖ": "U",\r\n\t"ǖ": "u",\r\n\t"Ǘ": "U",\r\n\t"ǘ": "u",\r\n\t"Ǚ": "U",\r\n\t"ǚ": "u",\r\n\t"Ǜ": "U",\r\n\t"ǜ": "u",\r\n\t"Ứ": "U",\r\n\t"ứ": "u",\r\n\t"Ṹ": "U",\r\n\t"ṹ": "u",\r\n\t"Ǻ": "A",\r\n\t"ǻ": "a",\r\n\t"Ǽ": "AE",\r\n\t"ǽ": "ae",\r\n\t"Ǿ": "O",\r\n\t"ǿ": "o",\r\n\t"Þ": "TH",\r\n\t"þ": "th",\r\n\t"Ṕ": "P",\r\n\t"ṕ": "p",\r\n\t"Ṥ": "S",\r\n\t"ṥ": "s",\r\n\t"X́": "X",\r\n\t"x́": "x",\r\n\t"Ѓ": "Г",\r\n\t"ѓ": "г",\r\n\t"Ќ": "К",\r\n\t"ќ": "к",\r\n\t"A̋": "A",\r\n\t"a̋": "a",\r\n\t"E̋": "E",\r\n\t"e̋": "e",\r\n\t"I̋": "I",\r\n\t"i̋": "i",\r\n\t"Ǹ": "N",\r\n\t"ǹ": "n",\r\n\t"Ồ": "O",\r\n\t"ồ": "o",\r\n\t"Ṑ": "O",\r\n\t"ṑ": "o",\r\n\t"Ừ": "U",\r\n\t"ừ": "u",\r\n\t"Ẁ": "W",\r\n\t"ẁ": "w",\r\n\t"Ỳ": "Y",\r\n\t"ỳ": "y",\r\n\t"Ȁ": "A",\r\n\t"ȁ": "a",\r\n\t"Ȅ": "E",\r\n\t"ȅ": "e",\r\n\t"Ȉ": "I",\r\n\t"ȉ": "i",\r\n\t"Ȍ": "O",\r\n\t"ȍ": "o",\r\n\t"Ȑ": "R",\r\n\t"ȑ": "r",\r\n\t"Ȕ": "U",\r\n\t"ȕ": "u",\r\n\t"B̌": "B",\r\n\t"b̌": "b",\r\n\t"Č̣": "C",\r\n\t"č̣": "c",\r\n\t"Ê̌": "E",\r\n\t"ê̌": "e",\r\n\t"F̌": "F",\r\n\t"f̌": "f",\r\n\t"Ǧ": "G",\r\n\t"ǧ": "g",\r\n\t"Ȟ": "H",\r\n\t"ȟ": "h",\r\n\t"J̌": "J",\r\n\t"ǰ": "j",\r\n\t"Ǩ": "K",\r\n\t"ǩ": "k",\r\n\t"M̌": "M",\r\n\t"m̌": "m",\r\n\t"P̌": "P",\r\n\t"p̌": "p",\r\n\t"Q̌": "Q",\r\n\t"q̌": "q",\r\n\t"Ř̩": "R",\r\n\t"ř̩": "r",\r\n\t"Ṧ": "S",\r\n\t"ṧ": "s",\r\n\t"V̌": "V",\r\n\t"v̌": "v",\r\n\t"W̌": "W",\r\n\t"w̌": "w",\r\n\t"X̌": "X",\r\n\t"x̌": "x",\r\n\t"Y̌": "Y",\r\n\t"y̌": "y",\r\n\t"A̧": "A",\r\n\t"a̧": "a",\r\n\t"B̧": "B",\r\n\t"b̧": "b",\r\n\t"Ḑ": "D",\r\n\t"ḑ": "d",\r\n\t"Ȩ": "E",\r\n\t"ȩ": "e",\r\n\t"Ɛ̧": "E",\r\n\t"ɛ̧": "e",\r\n\t"Ḩ": "H",\r\n\t"ḩ": "h",\r\n\t"I̧": "I",\r\n\t"i̧": "i",\r\n\t"Ɨ̧": "I",\r\n\t"ɨ̧": "i",\r\n\t"M̧": "M",\r\n\t"m̧": "m",\r\n\t"O̧": "O",\r\n\t"o̧": "o",\r\n\t"Q̧": "Q",\r\n\t"q̧": "q",\r\n\t"U̧": "U",\r\n\t"u̧": "u",\r\n\t"X̧": "X",\r\n\t"x̧": "x",\r\n\t"Z̧": "Z",\r\n\t"z̧": "z",\r\n};\r\n\r\nvar chars = Object.keys(characterMap).join(\'|\');\r\nvar allAccents = new RegExp(chars, \'g\');\r\nvar firstAccent = new RegExp(chars, \'\');\r\n\r\nvar removeAccents = function(string) {\t\r\n\treturn string.replace(allAccents, function(match) {\r\n\t\treturn characterMap[match];\r\n\t});\r\n};\r\n\r\nvar hasAccents = function(string) {\r\n\treturn !!string.match(firstAccent);\r\n};\r\n\r\nmodule.exports = removeAccents;\r\nmodule.exports.has = hasAccents;\r\nmodule.exports.remove = removeAccents;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///826\n')},53:(__unused_webpack_module,exports)=>{"use strict";eval('/** @license React v0.20.2\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}\nif("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0))};g=function(a,b){u=setTimeout(a,b)};h=function(){clearTimeout(u)};exports.unstable_shouldYield=function(){return!1};k=exports.unstable_forceFrameRate=function(){}}else{var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=\nwindow.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=\nE};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null)}catch(b){throw G.postMessage(null),b;}}else A=!1};f=function(a){B=a;A||(A=!0,G.postMessage(null))};g=function(a,b){C=\nx(function(){a(exports.unstable_now())},b)};h=function(){y(C);C=-1}}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}\nfunction K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;\nfunction T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M)}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else{var b=J(M);null!==b&&g(U,b.startTime-a)}}\nfunction V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b)}else K(L);O=J(L)}if(null!==O)var m=!0;else{var n=J(M);null!==n&&g(U,n.startTime-b);m=!1}return m}finally{O=null,P=c,Q=!1}}var W=k;exports.unstable_IdlePriority=5;\nexports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V))};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};\nexports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P}var c=P;P=b;try{return a()}finally{P=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=P;P=a;try{return b()}finally{P=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};\nexports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c}}};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n')},840:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nif (true) {\n  module.exports = __webpack_require__(53);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksSUFBcUM7QUFDekMsRUFBRSx3Q0FBNkQ7QUFDL0QsRUFBRSxLQUFLLEVBRU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcz80MDI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///840\n")},774:module=>{eval('//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A\'s keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc0LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9xdWljay1zY29yZS1kZW1vLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcz8xYjJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIsIGNvbXBhcmUsIGNvbXBhcmVDb250ZXh0KSB7XG4gIHZhciByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCBvYmpBLCBvYmpCKSA6IHZvaWQgMDtcblxuICBpZiAocmV0ICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gISFyZXQ7XG4gIH1cblxuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSBcIm9iamVjdFwiIHx8ICFvYmpBIHx8IHR5cGVvZiBvYmpCICE9PSBcIm9iamVjdFwiIHx8ICFvYmpCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBiSGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmJpbmQob2JqQik7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwga2V5c0EubGVuZ3RoOyBpZHgrKykge1xuICAgIHZhciBrZXkgPSBrZXlzQVtpZHhdO1xuXG4gICAgaWYgKCFiSGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZUEgPSBvYmpBW2tleV07XG4gICAgdmFyIHZhbHVlQiA9IG9iakJba2V5XTtcblxuICAgIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIHZhbHVlQSwgdmFsdWVCLCBrZXkpIDogdm9pZCAwO1xuXG4gICAgaWYgKHJldCA9PT0gZmFsc2UgfHwgKHJldCA9PT0gdm9pZCAwICYmIHZhbHVlQSAhPT0gdmFsdWVCKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///774\n')}},__webpack_module_cache__={};function __webpack_require__(c){var l=__webpack_module_cache__[c];if(void 0!==l)return l.exports;var t=__webpack_module_cache__[c]={exports:{}};return __webpack_modules__[c].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=c=>{var l=c&&c.__esModule?()=>c.default:()=>c;return __webpack_require__.d(l,{a:l}),l},__webpack_require__.d=(c,l)=>{for(var t in l)__webpack_require__.o(l,t)&&!__webpack_require__.o(c,t)&&Object.defineProperty(c,t,{enumerable:!0,get:l[t]})},__webpack_require__.o=(c,l)=>Object.prototype.hasOwnProperty.call(c,l);var __webpack_exports__=__webpack_require__(622)})();